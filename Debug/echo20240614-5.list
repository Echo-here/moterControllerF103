
echo20240614-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003500  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800360c  0800360c  0000460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003678  08003678  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003678  08003678  00004678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003680  08003680  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003680  08003680  00004680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003684  08003684  00004684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003688  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  080036e4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080036e4  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bae7  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be6  00000000  00000000  00010b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00012758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096a  00000000  00000000  00013358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ac9  00000000  00000000  00013cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cec9  00000000  00000000  0002b78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6f4  00000000  00000000  00038654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2d48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  000c2d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c64f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080035f4 	.word	0x080035f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080035f4 	.word	0x080035f4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	@ 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (huart2->Instance == USART2)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a1b      	ldr	r2, [pc, #108]	@ (80001d8 <HAL_UART_RxCpltCallback+0x7c>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d130      	bne.n	80001d0 <HAL_UART_RxCpltCallback+0x74>
  {
    char tx_buffer[32];  // 송신할 문자열 버퍼

    if (rx_data >= '0' && rx_data <= '9') {
 800016e:	4b1b      	ldr	r3, [pc, #108]	@ (80001dc <HAL_UART_RxCpltCallback+0x80>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b2f      	cmp	r3, #47	@ 0x2f
 8000174:	d927      	bls.n	80001c6 <HAL_UART_RxCpltCallback+0x6a>
 8000176:	4b19      	ldr	r3, [pc, #100]	@ (80001dc <HAL_UART_RxCpltCallback+0x80>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b39      	cmp	r3, #57	@ 0x39
 800017c:	d823      	bhi.n	80001c6 <HAL_UART_RxCpltCallback+0x6a>
      pwm_value = (rx_data - '0') * 100;
 800017e:	4b17      	ldr	r3, [pc, #92]	@ (80001dc <HAL_UART_RxCpltCallback+0x80>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	3b30      	subs	r3, #48	@ 0x30
 8000184:	2264      	movs	r2, #100	@ 0x64
 8000186:	fb02 f303 	mul.w	r3, r2, r3
 800018a:	461a      	mov	r2, r3
 800018c:	4b14      	ldr	r3, [pc, #80]	@ (80001e0 <HAL_UART_RxCpltCallback+0x84>)
 800018e:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
 8000190:	4b14      	ldr	r3, [pc, #80]	@ (80001e4 <HAL_UART_RxCpltCallback+0x88>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a12      	ldr	r2, [pc, #72]	@ (80001e0 <HAL_UART_RxCpltCallback+0x84>)
 8000196:	6812      	ldr	r2, [r2, #0]
 8000198:	635a      	str	r2, [r3, #52]	@ 0x34

      // 송신 문자열 구성 (예: "Duty: 500\r\n")
      snprintf(tx_buffer, sizeof(tx_buffer), "Duty: %lu\r\n", pwm_value);
 800019a:	4b11      	ldr	r3, [pc, #68]	@ (80001e0 <HAL_UART_RxCpltCallback+0x84>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	f107 0008 	add.w	r0, r7, #8
 80001a2:	4a11      	ldr	r2, [pc, #68]	@ (80001e8 <HAL_UART_RxCpltCallback+0x8c>)
 80001a4:	2120      	movs	r1, #32
 80001a6:	f002 fd61 	bl	8002c6c <sniprintf>
      HAL_UART_Transmit(huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4618      	mov	r0, r3
 80001b0:	f7ff ffcc 	bl	800014c <strlen>
 80001b4:	4603      	mov	r3, r0
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	f107 0108 	add.w	r1, r7, #8
 80001bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f001 ff39 	bl	8002038 <HAL_UART_Transmit>
    }

    // 다시 수신 인터럽트 시작
    HAL_UART_Receive_IT(huart2, &rx_data, 1);
 80001c6:	2201      	movs	r2, #1
 80001c8:	4904      	ldr	r1, [pc, #16]	@ (80001dc <HAL_UART_RxCpltCallback+0x80>)
 80001ca:	6878      	ldr	r0, [r7, #4]
 80001cc:	f001 ffbf 	bl	800214e <HAL_UART_Receive_IT>
  }
}
 80001d0:	bf00      	nop
 80001d2:	3728      	adds	r7, #40	@ 0x28
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40004400 	.word	0x40004400
 80001dc:	20000108 	.word	0x20000108
 80001e0:	2000010c 	.word	0x2000010c
 80001e4:	20000078 	.word	0x20000078
 80001e8:	0800360c 	.word	0x0800360c

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fab6 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f818 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f8da 	bl	80003b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001fc:	f000 f8ae 	bl	800035c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000200:	f000 f854 	bl	80002ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // PWM 시작
 8000204:	2100      	movs	r1, #0
 8000206:	4805      	ldr	r0, [pc, #20]	@ (800021c <main+0x30>)
 8000208:	f001 faea 	bl	80017e0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1); // UART 수신 인터럽트 시작
 800020c:	2201      	movs	r2, #1
 800020e:	4904      	ldr	r1, [pc, #16]	@ (8000220 <main+0x34>)
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <main+0x38>)
 8000212:	f001 ff9c 	bl	800214e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000216:	bf00      	nop
 8000218:	e7fd      	b.n	8000216 <main+0x2a>
 800021a:	bf00      	nop
 800021c:	20000078 	.word	0x20000078
 8000220:	20000108 	.word	0x20000108
 8000224:	200000c0 	.word	0x200000c0

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	@ 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fd4e 	bl	8002cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800025a:	2300      	movs	r3, #0
 800025c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fe59 	bl	8000f20 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000274:	f000 f90a 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f8c6 	bl	8001424 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800029e:	f000 f8f5 	bl	800048c <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	@ 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	@ 0x28
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]
 80002ca:	615a      	str	r2, [r3, #20]
 80002cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ce:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <MX_TIM2_Init+0xac>)
 80002d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80002d6:	4b20      	ldr	r3, [pc, #128]	@ (8000358 <MX_TIM2_Init+0xac>)
 80002d8:	2253      	movs	r2, #83	@ 0x53
 80002da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <MX_TIM2_Init+0xac>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <MX_TIM2_Init+0xac>)
 80002e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <MX_TIM2_Init+0xac>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f0:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <MX_TIM2_Init+0xac>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002f6:	4818      	ldr	r0, [pc, #96]	@ (8000358 <MX_TIM2_Init+0xac>)
 80002f8:	f001 fa22 	bl	8001740 <HAL_TIM_PWM_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000302:	f000 f8c3 	bl	800048c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000306:	2300      	movs	r3, #0
 8000308:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800030a:	2300      	movs	r3, #0
 800030c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800030e:	f107 0320 	add.w	r3, r7, #32
 8000312:	4619      	mov	r1, r3
 8000314:	4810      	ldr	r0, [pc, #64]	@ (8000358 <MX_TIM2_Init+0xac>)
 8000316:	f001 fde1 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000320:	f000 f8b4 	bl	800048c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000324:	2360      	movs	r3, #96	@ 0x60
 8000326:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	4619      	mov	r1, r3
 800033a:	4807      	ldr	r0, [pc, #28]	@ (8000358 <MX_TIM2_Init+0xac>)
 800033c:	f001 faf2 	bl	8001924 <HAL_TIM_PWM_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000346:	f000 f8a1 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800034a:	4803      	ldr	r0, [pc, #12]	@ (8000358 <MX_TIM2_Init+0xac>)
 800034c:	f000 f8f2 	bl	8000534 <HAL_TIM_MspPostInit>

}
 8000350:	bf00      	nop
 8000352:	3728      	adds	r7, #40	@ 0x28
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000078 	.word	0x20000078

0800035c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000360:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000362:	4a12      	ldr	r2, [pc, #72]	@ (80003ac <MX_USART2_UART_Init+0x50>)
 8000364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000366:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800036c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	@ (80003a8 <MX_USART2_UART_Init+0x4c>)
 8000394:	f001 fe00 	bl	8001f98 <HAL_UART_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800039e:	f000 f875 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000c0 	.word	0x200000c0
 80003ac:	40004400 	.word	0x40004400

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c4:	4b2d      	ldr	r3, [pc, #180]	@ (800047c <MX_GPIO_Init+0xcc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a2c      	ldr	r2, [pc, #176]	@ (800047c <MX_GPIO_Init+0xcc>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b2a      	ldr	r3, [pc, #168]	@ (800047c <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0310 	and.w	r3, r3, #16
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003dc:	4b27      	ldr	r3, [pc, #156]	@ (800047c <MX_GPIO_Init+0xcc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a26      	ldr	r2, [pc, #152]	@ (800047c <MX_GPIO_Init+0xcc>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b24      	ldr	r3, [pc, #144]	@ (800047c <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0320 	and.w	r3, r3, #32
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b21      	ldr	r3, [pc, #132]	@ (800047c <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a20      	ldr	r2, [pc, #128]	@ (800047c <MX_GPIO_Init+0xcc>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b1e      	ldr	r3, [pc, #120]	@ (800047c <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040c:	4b1b      	ldr	r3, [pc, #108]	@ (800047c <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a1a      	ldr	r2, [pc, #104]	@ (800047c <MX_GPIO_Init+0xcc>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b18      	ldr	r3, [pc, #96]	@ (800047c <MX_GPIO_Init+0xcc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	4815      	ldr	r0, [pc, #84]	@ (8000480 <MX_GPIO_Init+0xd0>)
 800042a:	f000 fd3f 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800042e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000434:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <MX_GPIO_Init+0xd4>)
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4811      	ldr	r0, [pc, #68]	@ (8000488 <MX_GPIO_Init+0xd8>)
 8000444:	f000 fbae 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000448:	2320      	movs	r3, #32
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4808      	ldr	r0, [pc, #32]	@ (8000480 <MX_GPIO_Init+0xd0>)
 8000460:	f000 fba0 	bl	8000ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2028      	movs	r0, #40	@ 0x28
 800046a:	f000 fab2 	bl	80009d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800046e:	2028      	movs	r0, #40	@ 0x28
 8000470:	f000 facb 	bl	8000a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800
 8000484:	10110000 	.word	0x10110000
 8000488:	40011000 	.word	0x40011000

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <Error_Handler+0x8>

08000498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a14      	ldr	r2, [pc, #80]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ce:	4b0a      	ldr	r3, [pc, #40]	@ (80004f8 <HAL_MspInit+0x60>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <HAL_MspInit+0x60>)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000

080004fc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800050c:	d10b      	bne.n	8000526 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <HAL_TIM_PWM_MspInit+0x34>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a07      	ldr	r2, [pc, #28]	@ (8000530 <HAL_TIM_PWM_MspInit+0x34>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <HAL_TIM_PWM_MspInit+0x34>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000

08000534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000552:	d117      	bne.n	8000584 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <HAL_TIM_MspPostInit+0x58>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <HAL_TIM_MspPostInit+0x58>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <HAL_TIM_MspPostInit+0x58>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800056c:	2301      	movs	r3, #1
 800056e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4804      	ldr	r0, [pc, #16]	@ (8000590 <HAL_TIM_MspPostInit+0x5c>)
 8000580:	f000 fb10 	bl	8000ba4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	40010800 	.word	0x40010800

08000594 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a19      	ldr	r2, [pc, #100]	@ (8000614 <HAL_UART_MspInit+0x80>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d12b      	bne.n	800060c <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <HAL_UART_MspInit+0x84>)
 80005b6:	69db      	ldr	r3, [r3, #28]
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <HAL_UART_MspInit+0x84>)
 80005ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005be:	61d3      	str	r3, [r2, #28]
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <HAL_UART_MspInit+0x84>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_UART_MspInit+0x84>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <HAL_UART_MspInit+0x84>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_UART_MspInit+0x84>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005e4:	230c      	movs	r3, #12
 80005e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4809      	ldr	r0, [pc, #36]	@ (800061c <HAL_UART_MspInit+0x88>)
 80005f8:	f000 fad4 	bl	8000ba4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2026      	movs	r0, #38	@ 0x26
 8000602:	f000 f9e6 	bl	80009d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000606:	2026      	movs	r0, #38	@ 0x26
 8000608:	f000 f9ff 	bl	8000a0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40004400 	.word	0x40004400
 8000618:	40021000 	.word	0x40021000
 800061c:	40010800 	.word	0x40010800

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <NMI_Handler+0x4>

08000628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <MemManage_Handler+0x4>

08000638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <UsageFault_Handler+0x4>

08000648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000670:	f000 f8bc 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800067c:	4802      	ldr	r0, [pc, #8]	@ (8000688 <USART2_IRQHandler+0x10>)
 800067e:	f001 fd8b 	bl	8002198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000c0 	.word	0x200000c0

0800068c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000690:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000694:	f000 fc22 	bl	8000edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a4:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <_sbrk+0x5c>)
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <_sbrk+0x60>)
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <_sbrk+0x64>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <_sbrk+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d207      	bcs.n	80006dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006cc:	f002 fb0c 	bl	8002ce8 <__errno>
 80006d0:	4603      	mov	r3, r0
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006da:	e009      	b.n	80006f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <_sbrk+0x64>)
 80006ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20005000 	.word	0x20005000
 80006fc:	00000400 	.word	0x00000400
 8000700:	20000110 	.word	0x20000110
 8000704:	20000260 	.word	0x20000260

08000708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff fff8 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800071a:	490c      	ldr	r1, [pc, #48]	@ (800074c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800071c:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <LoopFillZerobss+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000730:	4c09      	ldr	r4, [pc, #36]	@ (8000758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f002 fad9 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fd53 	bl	80001ec <main>
  bx lr
 8000746:	4770      	bx	lr
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000750:	08003688 	.word	0x08003688
  ldr r2, =_sbss
 8000754:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000758:	20000260 	.word	0x20000260

0800075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_2_IRQHandler>
	...

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <HAL_Init+0x28>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	@ (8000788 <HAL_Init+0x28>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f923 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	2000      	movs	r0, #0
 8000778:	f000 f808 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff fe8c 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <HAL_InitTick+0x54>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_InitTick+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f93b 	bl	8000a26 <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00e      	b.n	80007d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d80a      	bhi.n	80007d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007c8:	f000 f903 	bl	80009d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007cc:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <HAL_InitTick+0x5c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e000      	b.n	80007d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000008 	.word	0x20000008
 80007e8:	20000004 	.word	0x20000004

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <HAL_IncTick+0x1c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HAL_IncTick+0x20>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a03      	ldr	r2, [pc, #12]	@ (800080c <HAL_IncTick+0x20>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000008 	.word	0x20000008
 800080c:	20000114 	.word	0x20000114

08000810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b02      	ldr	r3, [pc, #8]	@ (8000820 <HAL_GetTick+0x10>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000114 	.word	0x20000114

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4906      	ldr	r1, [pc, #24]	@ (80008bc <__NVIC_EnableIRQ+0x34>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	@ (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	@ (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	@ 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	@ 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	210f      	movs	r1, #15
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	f7ff ff90 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff2d 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff42 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ff90 	bl	8000914 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff5f 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff35 	bl	8000888 <__NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffa2 	bl	8000978 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b085      	sub	sp, #20
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d008      	beq.n	8000a68 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2204      	movs	r2, #4
 8000a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e020      	b.n	8000aaa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f022 020e 	bic.w	r2, r2, #14
 8000a76:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f022 0201 	bic.w	r2, r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a90:	2101      	movs	r1, #1
 8000a92:	fa01 f202 	lsl.w	r2, r1, r2
 8000a96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d005      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2204      	movs	r2, #4
 8000ad0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e051      	b.n	8000b7c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 020e 	bic.w	r2, r2, #14
 8000ae6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0201 	bic.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <HAL_DMA_Abort_IT+0xd4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d029      	beq.n	8000b56 <HAL_DMA_Abort_IT+0xa2>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <HAL_DMA_Abort_IT+0xd8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d022      	beq.n	8000b52 <HAL_DMA_Abort_IT+0x9e>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <HAL_DMA_Abort_IT+0xdc>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d01a      	beq.n	8000b4c <HAL_DMA_Abort_IT+0x98>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b94 <HAL_DMA_Abort_IT+0xe0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d012      	beq.n	8000b46 <HAL_DMA_Abort_IT+0x92>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <HAL_DMA_Abort_IT+0xe4>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00a      	beq.n	8000b40 <HAL_DMA_Abort_IT+0x8c>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <HAL_DMA_Abort_IT+0xe8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d102      	bne.n	8000b3a <HAL_DMA_Abort_IT+0x86>
 8000b34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b38:	e00e      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b3e:	e00b      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b44:	e008      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4a:	e005      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b50:	e002      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b52:	2310      	movs	r3, #16
 8000b54:	e000      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b56:	2301      	movs	r3, #1
 8000b58:	4a11      	ldr	r2, [pc, #68]	@ (8000ba0 <HAL_DMA_Abort_IT+0xec>)
 8000b5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	4798      	blx	r3
    } 
  }
  return status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020008 	.word	0x40020008
 8000b8c:	4002001c 	.word	0x4002001c
 8000b90:	40020030 	.word	0x40020030
 8000b94:	40020044 	.word	0x40020044
 8000b98:	40020058 	.word	0x40020058
 8000b9c:	4002006c 	.word	0x4002006c
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b08b      	sub	sp, #44	@ 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb6:	e169      	b.n	8000e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 8158 	bne.w	8000e86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a9a      	ldr	r2, [pc, #616]	@ (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d05e      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000be0:	4a98      	ldr	r2, [pc, #608]	@ (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d875      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000be6:	4a98      	ldr	r2, [pc, #608]	@ (8000e48 <HAL_GPIO_Init+0x2a4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d058      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000bec:	4a96      	ldr	r2, [pc, #600]	@ (8000e48 <HAL_GPIO_Init+0x2a4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d86f      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000bf2:	4a96      	ldr	r2, [pc, #600]	@ (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d052      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000bf8:	4a94      	ldr	r2, [pc, #592]	@ (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d869      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000bfe:	4a94      	ldr	r2, [pc, #592]	@ (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d04c      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000c04:	4a92      	ldr	r2, [pc, #584]	@ (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d863      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c0a:	4a92      	ldr	r2, [pc, #584]	@ (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d046      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000c10:	4a90      	ldr	r2, [pc, #576]	@ (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d85d      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d82a      	bhi.n	8000c70 <HAL_GPIO_Init+0xcc>
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d859      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <HAL_GPIO_Init+0x80>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000c79 	.word	0x08000c79
 8000c2c:	08000c8b 	.word	0x08000c8b
 8000c30:	08000ccd 	.word	0x08000ccd
 8000c34:	08000cd3 	.word	0x08000cd3
 8000c38:	08000cd3 	.word	0x08000cd3
 8000c3c:	08000cd3 	.word	0x08000cd3
 8000c40:	08000cd3 	.word	0x08000cd3
 8000c44:	08000cd3 	.word	0x08000cd3
 8000c48:	08000cd3 	.word	0x08000cd3
 8000c4c:	08000cd3 	.word	0x08000cd3
 8000c50:	08000cd3 	.word	0x08000cd3
 8000c54:	08000cd3 	.word	0x08000cd3
 8000c58:	08000cd3 	.word	0x08000cd3
 8000c5c:	08000cd3 	.word	0x08000cd3
 8000c60:	08000cd3 	.word	0x08000cd3
 8000c64:	08000cd3 	.word	0x08000cd3
 8000c68:	08000c81 	.word	0x08000c81
 8000c6c:	08000c95 	.word	0x08000c95
 8000c70:	4a79      	ldr	r2, [pc, #484]	@ (8000e58 <HAL_GPIO_Init+0x2b4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c76:	e02c      	b.n	8000cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e029      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	3304      	adds	r3, #4
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e024      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	3308      	adds	r3, #8
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e01f      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	330c      	adds	r3, #12
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e01a      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e013      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d105      	bne.n	8000cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	611a      	str	r2, [r3, #16]
          break;
 8000cbe:	e009      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	615a      	str	r2, [r3, #20]
          break;
 8000cca:	e003      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
          break;
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          break;
 8000cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2bff      	cmp	r3, #255	@ 0xff
 8000cd8:	d801      	bhi.n	8000cde <HAL_GPIO_Init+0x13a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	e001      	b.n	8000ce2 <HAL_GPIO_Init+0x13e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	2bff      	cmp	r3, #255	@ 0xff
 8000ce8:	d802      	bhi.n	8000cf0 <HAL_GPIO_Init+0x14c>
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x152>
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf2:	3b08      	subs	r3, #8
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	6a39      	ldr	r1, [r7, #32]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	431a      	orrs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 80b1 	beq.w	8000e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d24:	4b4d      	ldr	r3, [pc, #308]	@ (8000e5c <HAL_GPIO_Init+0x2b8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a4c      	ldr	r2, [pc, #304]	@ (8000e5c <HAL_GPIO_Init+0x2b8>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b4a      	ldr	r3, [pc, #296]	@ (8000e5c <HAL_GPIO_Init+0x2b8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d3c:	4a48      	ldr	r2, [pc, #288]	@ (8000e60 <HAL_GPIO_Init+0x2bc>)
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a40      	ldr	r2, [pc, #256]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d013      	beq.n	8000d90 <HAL_GPIO_Init+0x1ec>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e68 <HAL_GPIO_Init+0x2c4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d00d      	beq.n	8000d8c <HAL_GPIO_Init+0x1e8>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a3e      	ldr	r2, [pc, #248]	@ (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d007      	beq.n	8000d88 <HAL_GPIO_Init+0x1e4>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e70 <HAL_GPIO_Init+0x2cc>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d101      	bne.n	8000d84 <HAL_GPIO_Init+0x1e0>
 8000d80:	2303      	movs	r3, #3
 8000d82:	e006      	b.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d84:	2304      	movs	r3, #4
 8000d86:	e004      	b.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e002      	b.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <HAL_GPIO_Init+0x1ee>
 8000d90:	2300      	movs	r3, #0
 8000d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d94:	f002 0203 	and.w	r2, r2, #3
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	4093      	lsls	r3, r2
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000da2:	492f      	ldr	r1, [pc, #188]	@ (8000e60 <HAL_GPIO_Init+0x2bc>)
 8000da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	492c      	ldr	r1, [pc, #176]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dca:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	4928      	ldr	r1, [pc, #160]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	4922      	ldr	r1, [pc, #136]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60cb      	str	r3, [r1, #12]
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	491e      	ldr	r1, [pc, #120]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4918      	ldr	r1, [pc, #96]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	604b      	str	r3, [r1, #4]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e1a:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4914      	ldr	r1, [pc, #80]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d021      	beq.n	8000e78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	490e      	ldr	r1, [pc, #56]	@ (8000e74 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	600b      	str	r3, [r1, #0]
 8000e40:	e021      	b.n	8000e86 <HAL_GPIO_Init+0x2e2>
 8000e42:	bf00      	nop
 8000e44:	10320000 	.word	0x10320000
 8000e48:	10310000 	.word	0x10310000
 8000e4c:	10220000 	.word	0x10220000
 8000e50:	10210000 	.word	0x10210000
 8000e54:	10120000 	.word	0x10120000
 8000e58:	10110000 	.word	0x10110000
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40010800 	.word	0x40010800
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40011400 	.word	0x40011400
 8000e74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	4909      	ldr	r1, [pc, #36]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e88:	3301      	adds	r3, #1
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	fa22 f303 	lsr.w	r3, r2, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f47f ae8e 	bne.w	8000bb8 <HAL_GPIO_Init+0x14>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	372c      	adds	r7, #44	@ 0x2c
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ebc:	787b      	ldrb	r3, [r7, #1]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ec8:	e003      	b.n	8000ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	041a      	lsls	r2, r3, #16
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	611a      	str	r2, [r3, #16]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ee8:	695a      	ldr	r2, [r3, #20]
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d006      	beq.n	8000f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f806 	bl	8000f0c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e272      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8087 	beq.w	800104e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f40:	4b92      	ldr	r3, [pc, #584]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d00c      	beq.n	8000f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d112      	bne.n	8000f7e <HAL_RCC_OscConfig+0x5e>
 8000f58:	4b8c      	ldr	r3, [pc, #560]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f64:	d10b      	bne.n	8000f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f66:	4b89      	ldr	r3, [pc, #548]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d06c      	beq.n	800104c <HAL_RCC_OscConfig+0x12c>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d168      	bne.n	800104c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e24c      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f86:	d106      	bne.n	8000f96 <HAL_RCC_OscConfig+0x76>
 8000f88:	4b80      	ldr	r3, [pc, #512]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a7f      	ldr	r2, [pc, #508]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e02e      	b.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x98>
 8000f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7a      	ldr	r2, [pc, #488]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b78      	ldr	r3, [pc, #480]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a77      	ldr	r2, [pc, #476]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e01d      	b.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0xbc>
 8000fc2:	4b72      	ldr	r3, [pc, #456]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a71      	ldr	r2, [pc, #452]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b6f      	ldr	r3, [pc, #444]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
 8000fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a6a      	ldr	r2, [pc, #424]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b68      	ldr	r3, [pc, #416]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a67      	ldr	r2, [pc, #412]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc08 	bl	8000810 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fc04 	bl	8000810 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	@ 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e200      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4b5d      	ldr	r3, [pc, #372]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0xe4>
 8001022:	e014      	b.n	800104e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fbf4 	bl	8000810 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fbf0 	bl	8000810 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	@ 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e1ec      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	4b53      	ldr	r3, [pc, #332]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x10c>
 800104a:	e000      	b.n	800104e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800105a:	4b4c      	ldr	r3, [pc, #304]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001066:	4b49      	ldr	r3, [pc, #292]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b08      	cmp	r3, #8
 8001070:	d11c      	bne.n	80010ac <HAL_RCC_OscConfig+0x18c>
 8001072:	4b46      	ldr	r3, [pc, #280]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	4b43      	ldr	r3, [pc, #268]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <HAL_RCC_OscConfig+0x176>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e1c0      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b3d      	ldr	r3, [pc, #244]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4939      	ldr	r1, [pc, #228]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	e03a      	b.n	8001122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b4:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fba9 	bl	8000810 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fba5 	bl	8000810 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1a1      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4927      	ldr	r1, [pc, #156]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	e015      	b.n	8001122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fb88 	bl	8000810 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fb84 	bl	8000810 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e180      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d03a      	beq.n	80011a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d019      	beq.n	800116a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <HAL_RCC_OscConfig+0x274>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fb68 	bl	8000810 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fb64 	bl	8000810 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e160      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <HAL_RCC_OscConfig+0x26c>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f000 face 	bl	8001704 <RCC_Delay>
 8001168:	e01c      	b.n	80011a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_RCC_OscConfig+0x274>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fb4e 	bl	8000810 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001176:	e00f      	b.n	8001198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff fb4a 	bl	8000810 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d908      	bls.n	8001198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e146      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	42420000 	.word	0x42420000
 8001194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	4b92      	ldr	r3, [pc, #584]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e9      	bne.n	8001178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80a6 	beq.w	80012fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b6:	4b8b      	ldr	r3, [pc, #556]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10d      	bne.n	80011de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b88      	ldr	r3, [pc, #544]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a87      	ldr	r2, [pc, #540]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b85      	ldr	r3, [pc, #532]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011da:	2301      	movs	r3, #1
 80011dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011de:	4b82      	ldr	r3, [pc, #520]	@ (80013e8 <HAL_RCC_OscConfig+0x4c8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d118      	bne.n	800121c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ea:	4b7f      	ldr	r3, [pc, #508]	@ (80013e8 <HAL_RCC_OscConfig+0x4c8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a7e      	ldr	r2, [pc, #504]	@ (80013e8 <HAL_RCC_OscConfig+0x4c8>)
 80011f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fb0b 	bl	8000810 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fe:	f7ff fb07 	bl	8000810 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b64      	cmp	r3, #100	@ 0x64
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e103      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001210:	4b75      	ldr	r3, [pc, #468]	@ (80013e8 <HAL_RCC_OscConfig+0x4c8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0x312>
 8001224:	4b6f      	ldr	r3, [pc, #444]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4a6e      	ldr	r2, [pc, #440]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6213      	str	r3, [r2, #32]
 8001230:	e02d      	b.n	800128e <HAL_RCC_OscConfig+0x36e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x334>
 800123a:	4b6a      	ldr	r3, [pc, #424]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a69      	ldr	r2, [pc, #420]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	4b67      	ldr	r3, [pc, #412]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a66      	ldr	r2, [pc, #408]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	6213      	str	r3, [r2, #32]
 8001252:	e01c      	b.n	800128e <HAL_RCC_OscConfig+0x36e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b05      	cmp	r3, #5
 800125a:	d10c      	bne.n	8001276 <HAL_RCC_OscConfig+0x356>
 800125c:	4b61      	ldr	r3, [pc, #388]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a60      	ldr	r2, [pc, #384]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	4b5e      	ldr	r3, [pc, #376]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a5d      	ldr	r2, [pc, #372]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6213      	str	r3, [r2, #32]
 8001274:	e00b      	b.n	800128e <HAL_RCC_OscConfig+0x36e>
 8001276:	4b5b      	ldr	r3, [pc, #364]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a5a      	ldr	r2, [pc, #360]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6213      	str	r3, [r2, #32]
 8001282:	4b58      	ldr	r3, [pc, #352]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4a57      	ldr	r2, [pc, #348]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	f023 0304 	bic.w	r3, r3, #4
 800128c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d015      	beq.n	80012c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fabb 	bl	8000810 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fab7 	bl	8000810 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e0b1      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b4:	4b4b      	ldr	r3, [pc, #300]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0ee      	beq.n	800129e <HAL_RCC_OscConfig+0x37e>
 80012c0:	e014      	b.n	80012ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff faa5 	bl	8000810 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff faa1 	bl	8000810 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e09b      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e0:	4b40      	ldr	r3, [pc, #256]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1ee      	bne.n	80012ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d105      	bne.n	80012fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f2:	4b3c      	ldr	r3, [pc, #240]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a3b      	ldr	r2, [pc, #236]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8087 	beq.w	8001416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b08      	cmp	r3, #8
 8001312:	d061      	beq.n	80013d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d146      	bne.n	80013aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131c:	4b33      	ldr	r3, [pc, #204]	@ (80013ec <HAL_RCC_OscConfig+0x4cc>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fa75 	bl	8000810 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132a:	f7ff fa71 	bl	8000810 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e06d      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133c:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001350:	d108      	bne.n	8001364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001352:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4921      	ldr	r1, [pc, #132]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a19      	ldr	r1, [r3, #32]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001374:	430b      	orrs	r3, r1
 8001376:	491b      	ldr	r1, [pc, #108]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <HAL_RCC_OscConfig+0x4cc>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fa45 	bl	8000810 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138a:	f7ff fa41 	bl	8000810 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e03d      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x46a>
 80013a8:	e035      	b.n	8001416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_RCC_OscConfig+0x4cc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fa2e 	bl	8000810 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff fa2a 	bl	8000810 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e026      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x498>
 80013d6:	e01e      	b.n	8001416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e019      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40007000 	.word	0x40007000
 80013ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <HAL_RCC_OscConfig+0x500>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	429a      	cmp	r2, r3
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0d0      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d910      	bls.n	8001468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b67      	ldr	r3, [pc, #412]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 0207 	bic.w	r2, r3, #7
 800144e:	4965      	ldr	r1, [pc, #404]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b63      	ldr	r3, [pc, #396]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0b8      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001480:	4b59      	ldr	r3, [pc, #356]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a58      	ldr	r2, [pc, #352]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800148a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a52      	ldr	r2, [pc, #328]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	4b50      	ldr	r3, [pc, #320]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	494d      	ldr	r1, [pc, #308]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d040      	beq.n	8001544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d115      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e07f      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e2:	4b41      	ldr	r3, [pc, #260]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e073      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	4b3d      	ldr	r3, [pc, #244]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e06b      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001502:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f023 0203 	bic.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4936      	ldr	r1, [pc, #216]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff f97c 	bl	8000810 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	e00a      	b.n	8001532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff f978 	bl	8000810 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e053      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 020c 	and.w	r2, r3, #12
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d1eb      	bne.n	800151c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d210      	bcs.n	8001574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 0207 	bic.w	r2, r3, #7
 800155a:	4922      	ldr	r1, [pc, #136]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e032      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4916      	ldr	r1, [pc, #88]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	490e      	ldr	r1, [pc, #56]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b2:	f000 f821 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	490a      	ldr	r1, [pc, #40]	@ (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80015c4:	5ccb      	ldrb	r3, [r1, r3]
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <HAL_RCC_ClockConfig+0x1cc>)
 80015cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_RCC_ClockConfig+0x1d0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f8da 	bl	800078c <HAL_InitTick>

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	08003618 	.word	0x08003618
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_RCC_GetSysClockFreq+0x94>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d002      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x30>
 8001622:	2b08      	cmp	r3, #8
 8001624:	d003      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x36>
 8001626:	e027      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x98>)
 800162a:	613b      	str	r3, [r7, #16]
      break;
 800162c:	e027      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d010      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_RCC_GetSysClockFreq+0x94>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	0c5b      	lsrs	r3, r3, #17
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x98>)
 800165a:	fb03 f202 	mul.w	r2, r3, r2
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e004      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <HAL_RCC_GetSysClockFreq+0xa4>)
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	613b      	str	r3, [r7, #16]
      break;
 8001676:	e002      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x98>)
 800167a:	613b      	str	r3, [r7, #16]
      break;
 800167c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800167e:	693b      	ldr	r3, [r7, #16]
}
 8001680:	4618      	mov	r0, r3
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	007a1200 	.word	0x007a1200
 8001694:	08003630 	.word	0x08003630
 8001698:	08003640 	.word	0x08003640
 800169c:	003d0900 	.word	0x003d0900

080016a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a4:	4b02      	ldr	r3, [pc, #8]	@ (80016b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000000 	.word	0x20000000

080016b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016b8:	f7ff fff2 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016bc:	4602      	mov	r2, r0
 80016be:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	4903      	ldr	r1, [pc, #12]	@ (80016d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ca:	5ccb      	ldrb	r3, [r1, r3]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	08003628 	.word	0x08003628

080016dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	0adb      	lsrs	r3, r3, #11
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	4903      	ldr	r1, [pc, #12]	@ (8001700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	08003628 	.word	0x08003628

08001704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <RCC_Delay+0x34>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <RCC_Delay+0x38>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0a5b      	lsrs	r3, r3, #9
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001720:	bf00      	nop
  }
  while (Delay --);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	60fa      	str	r2, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f9      	bne.n	8001720 <RCC_Delay+0x1c>
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000000 	.word	0x20000000
 800173c:	10624dd3 	.word	0x10624dd3

08001740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e041      	b.n	80017d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe fec8 	bl	80004fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2202      	movs	r2, #2
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3304      	adds	r3, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f000 f992 	bl	8001aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_TIM_PWM_Start+0x24>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e022      	b.n	800184a <HAL_TIM_PWM_Start+0x6a>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b04      	cmp	r3, #4
 8001808:	d109      	bne.n	800181e <HAL_TIM_PWM_Start+0x3e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b01      	cmp	r3, #1
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	e015      	b.n	800184a <HAL_TIM_PWM_Start+0x6a>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b08      	cmp	r3, #8
 8001822:	d109      	bne.n	8001838 <HAL_TIM_PWM_Start+0x58>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e008      	b.n	800184a <HAL_TIM_PWM_Start+0x6a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e05e      	b.n	8001910 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d104      	bne.n	8001862 <HAL_TIM_PWM_Start+0x82>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001860:	e013      	b.n	800188a <HAL_TIM_PWM_Start+0xaa>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b04      	cmp	r3, #4
 8001866:	d104      	bne.n	8001872 <HAL_TIM_PWM_Start+0x92>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001870:	e00b      	b.n	800188a <HAL_TIM_PWM_Start+0xaa>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b08      	cmp	r3, #8
 8001876:	d104      	bne.n	8001882 <HAL_TIM_PWM_Start+0xa2>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001880:	e003      	b.n	800188a <HAL_TIM_PWM_Start+0xaa>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2201      	movs	r2, #1
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fafe 	bl	8001e94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <HAL_TIM_PWM_Start+0x138>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d107      	bne.n	80018b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a18      	ldr	r2, [pc, #96]	@ (8001918 <HAL_TIM_PWM_Start+0x138>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00e      	beq.n	80018da <HAL_TIM_PWM_Start+0xfa>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c4:	d009      	beq.n	80018da <HAL_TIM_PWM_Start+0xfa>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a14      	ldr	r2, [pc, #80]	@ (800191c <HAL_TIM_PWM_Start+0x13c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d004      	beq.n	80018da <HAL_TIM_PWM_Start+0xfa>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <HAL_TIM_PWM_Start+0x140>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d111      	bne.n	80018fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b06      	cmp	r3, #6
 80018ea:	d010      	beq.n	800190e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fc:	e007      	b.n	800190e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0201 	orr.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40012c00 	.word	0x40012c00
 800191c:	40000400 	.word	0x40000400
 8001920:	40000800 	.word	0x40000800

08001924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800193e:	2302      	movs	r3, #2
 8001940:	e0ae      	b.n	8001aa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0c      	cmp	r3, #12
 800194e:	f200 809f 	bhi.w	8001a90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001952:	a201      	add	r2, pc, #4	@ (adr r2, 8001958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	0800198d 	.word	0x0800198d
 800195c:	08001a91 	.word	0x08001a91
 8001960:	08001a91 	.word	0x08001a91
 8001964:	08001a91 	.word	0x08001a91
 8001968:	080019cd 	.word	0x080019cd
 800196c:	08001a91 	.word	0x08001a91
 8001970:	08001a91 	.word	0x08001a91
 8001974:	08001a91 	.word	0x08001a91
 8001978:	08001a0f 	.word	0x08001a0f
 800197c:	08001a91 	.word	0x08001a91
 8001980:	08001a91 	.word	0x08001a91
 8001984:	08001a91 	.word	0x08001a91
 8001988:	08001a4f 	.word	0x08001a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f8f6 	bl	8001b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0208 	orr.w	r2, r2, #8
 80019a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6999      	ldr	r1, [r3, #24]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	619a      	str	r2, [r3, #24]
      break;
 80019ca:	e064      	b.n	8001a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f93c 	bl	8001c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6999      	ldr	r1, [r3, #24]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	021a      	lsls	r2, r3, #8
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	619a      	str	r2, [r3, #24]
      break;
 8001a0c:	e043      	b.n	8001a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f985 	bl	8001d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69da      	ldr	r2, [r3, #28]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0208 	orr.w	r2, r2, #8
 8001a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0204 	bic.w	r2, r2, #4
 8001a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69d9      	ldr	r1, [r3, #28]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	61da      	str	r2, [r3, #28]
      break;
 8001a4c:	e023      	b.n	8001a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f9cf 	bl	8001df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69da      	ldr	r2, [r3, #28]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69d9      	ldr	r1, [r3, #28]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	021a      	lsls	r2, r3, #8
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	61da      	str	r2, [r3, #28]
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	75fb      	strb	r3, [r7, #23]
      break;
 8001a94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a2f      	ldr	r2, [pc, #188]	@ (8001b78 <TIM_Base_SetConfig+0xd0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00b      	beq.n	8001ad8 <TIM_Base_SetConfig+0x30>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac6:	d007      	beq.n	8001ad8 <TIM_Base_SetConfig+0x30>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a2c      	ldr	r2, [pc, #176]	@ (8001b7c <TIM_Base_SetConfig+0xd4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d003      	beq.n	8001ad8 <TIM_Base_SetConfig+0x30>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8001b80 <TIM_Base_SetConfig+0xd8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d108      	bne.n	8001aea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a22      	ldr	r2, [pc, #136]	@ (8001b78 <TIM_Base_SetConfig+0xd0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00b      	beq.n	8001b0a <TIM_Base_SetConfig+0x62>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af8:	d007      	beq.n	8001b0a <TIM_Base_SetConfig+0x62>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a1f      	ldr	r2, [pc, #124]	@ (8001b7c <TIM_Base_SetConfig+0xd4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d003      	beq.n	8001b0a <TIM_Base_SetConfig+0x62>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a1e      	ldr	r2, [pc, #120]	@ (8001b80 <TIM_Base_SetConfig+0xd8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d108      	bne.n	8001b1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <TIM_Base_SetConfig+0xd0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d103      	bne.n	8001b50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f023 0201 	bic.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40000400 	.word	0x40000400
 8001b80:	40000800 	.word	0x40000800

08001b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f023 0201 	bic.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f023 0302 	bic.w	r3, r3, #2
 8001bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a1c      	ldr	r2, [pc, #112]	@ (8001c4c <TIM_OC1_SetConfig+0xc8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d10c      	bne.n	8001bfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f023 0308 	bic.w	r3, r3, #8
 8001be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a13      	ldr	r2, [pc, #76]	@ (8001c4c <TIM_OC1_SetConfig+0xc8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d111      	bne.n	8001c26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	621a      	str	r2, [r3, #32]
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40012c00 	.word	0x40012c00

08001c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	f023 0210 	bic.w	r2, r3, #16
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 0320 	bic.w	r3, r3, #32
 8001c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a1d      	ldr	r2, [pc, #116]	@ (8001d20 <TIM_OC2_SetConfig+0xd0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d10d      	bne.n	8001ccc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001cca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <TIM_OC2_SetConfig+0xd0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d113      	bne.n	8001cfc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	621a      	str	r2, [r3, #32]
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40012c00 	.word	0x40012c00

08001d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0303 	bic.w	r3, r3, #3
 8001d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001df4 <TIM_OC3_SetConfig+0xd0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10d      	bne.n	8001d9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a14      	ldr	r2, [pc, #80]	@ (8001df4 <TIM_OC3_SetConfig+0xd0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d113      	bne.n	8001dce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	621a      	str	r2, [r3, #32]
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	031b      	lsls	r3, r3, #12
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <TIM_OC4_SetConfig+0x98>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d109      	bne.n	8001e6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	621a      	str	r2, [r3, #32]
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40012c00 	.word	0x40012c00

08001e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	621a      	str	r2, [r3, #32]
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e046      	b.n	8001f82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a16      	ldr	r2, [pc, #88]	@ (8001f8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00e      	beq.n	8001f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f40:	d009      	beq.n	8001f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d004      	beq.n	8001f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10c      	bne.n	8001f70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800

08001f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e042      	b.n	8002030 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fae8 	bl	8000594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	@ 0x24
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fdb7 	bl	8002b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	@ 0x28
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b20      	cmp	r3, #32
 8002056:	d175      	bne.n	8002144 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <HAL_UART_Transmit+0x2c>
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e06e      	b.n	8002146 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2221      	movs	r2, #33	@ 0x21
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002076:	f7fe fbcb 	bl	8000810 <HAL_GetTick>
 800207a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	88fa      	ldrh	r2, [r7, #6]
 8002080:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002090:	d108      	bne.n	80020a4 <HAL_UART_Transmit+0x6c>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d104      	bne.n	80020a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	e003      	b.n	80020ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020ac:	e02e      	b.n	800210c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fb1c 	bl	80026f6 <UART_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e03a      	b.n	8002146 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10b      	bne.n	80020ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	3302      	adds	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	e007      	b.n	80020fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3301      	adds	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1cb      	bne.n	80020ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2200      	movs	r2, #0
 800211e:	2140      	movs	r1, #64	@ 0x40
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 fae8 	bl	80026f6 <UART_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e006      	b.n	8002146 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	4613      	mov	r3, r2
 800215a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	d112      	bne.n	800218e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_UART_Receive_IT+0x26>
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e00b      	b.n	8002190 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	461a      	mov	r2, r3
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fb0f 	bl	80027a8 <UART_Start_Receive_IT>
 800218a:	4603      	mov	r3, r0
 800218c:	e000      	b.n	8002190 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
  }
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0ba      	sub	sp, #232	@ 0xe8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80021d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10f      	bne.n	80021fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_UART_IRQHandler+0x66>
 80021ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fbec 	bl	80029d4 <UART_Receive_IT>
      return;
 80021fc:	e25b      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80de 	beq.w	80023c4 <HAL_UART_IRQHandler+0x22c>
 8002208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d106      	bne.n	8002222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002218:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80d1 	beq.w	80023c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_UART_IRQHandler+0xae>
 800222e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_UART_IRQHandler+0xd2>
 8002252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800226a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_UART_IRQHandler+0xf6>
 8002276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f043 0204 	orr.w	r2, r3, #4
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800228e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d011      	beq.n	80022be <HAL_UART_IRQHandler+0x126>
 800229a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f043 0208 	orr.w	r2, r3, #8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 81f2 	beq.w	80026ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_UART_IRQHandler+0x14e>
 80022d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fb77 	bl	80029d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <HAL_UART_IRQHandler+0x17a>
 800230a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d04f      	beq.n	80023b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa81 	bl	800281a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d041      	beq.n	80023aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3314      	adds	r3, #20
 800232c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800233c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3314      	adds	r3, #20
 800234e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002352:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800235e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002362:	e841 2300 	strex	r3, r2, [r1]
 8002366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800236a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1d9      	bne.n	8002326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d013      	beq.n	80023a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237e:	4a7e      	ldr	r2, [pc, #504]	@ (8002578 <HAL_UART_IRQHandler+0x3e0>)
 8002380:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fb94 	bl	8000ab4 <HAL_DMA_Abort_IT>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800239c:	4610      	mov	r0, r2
 800239e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a0:	e00e      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f993 	bl	80026ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	e00a      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f98f 	bl	80026ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	e006      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f98b 	bl	80026ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023be:	e175      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	bf00      	nop
    return;
 80023c2:	e173      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 814f 	bne.w	800266c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8148 	beq.w	800266c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8141 	beq.w	800266c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80b6 	beq.w	800257c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800241c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8145 	beq.w	80026b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800242a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800242e:	429a      	cmp	r2, r3
 8002430:	f080 813e 	bcs.w	80026b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800243a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b20      	cmp	r3, #32
 8002444:	f000 8088 	beq.w	8002558 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002456:	e853 3f00 	ldrex	r3, [r3]
 800245a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800245e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002466:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	330c      	adds	r3, #12
 8002470:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002474:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002480:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002484:	e841 2300 	strex	r3, r2, [r1]
 8002488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800248c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1d9      	bne.n	8002448 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3314      	adds	r3, #20
 800249a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800249e:	e853 3f00 	ldrex	r3, [r3]
 80024a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3314      	adds	r3, #20
 80024b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024c4:	e841 2300 	strex	r3, r2, [r1]
 80024c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80024ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e1      	bne.n	8002494 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3314      	adds	r3, #20
 80024d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024da:	e853 3f00 	ldrex	r3, [r3]
 80024de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80024e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3314      	adds	r3, #20
 80024f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80024f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80024fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e3      	bne.n	80024d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002528:	f023 0310 	bic.w	r3, r3, #16
 800252c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800253a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800253c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e3      	bne.n	8002516 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fa73 	bl	8000a3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002566:	b29b      	uxth	r3, r3
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b29b      	uxth	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8b6 	bl	80026e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002574:	e09c      	b.n	80026b0 <HAL_UART_IRQHandler+0x518>
 8002576:	bf00      	nop
 8002578:	080028df 	.word	0x080028df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002584:	b29b      	uxth	r3, r3
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 808e 	beq.w	80026b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8089 	beq.w	80026b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	330c      	adds	r3, #12
 80025a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ac:	e853 3f00 	ldrex	r3, [r3]
 80025b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	330c      	adds	r3, #12
 80025c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80025c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025ce:	e841 2300 	strex	r3, r2, [r1]
 80025d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1e3      	bne.n	80025a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3314      	adds	r3, #20
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	e853 3f00 	ldrex	r3, [r3]
 80025e8:	623b      	str	r3, [r7, #32]
   return(result);
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3314      	adds	r3, #20
 80025fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e3      	bne.n	80025da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0310 	bic.w	r3, r3, #16
 8002636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002644:	61fa      	str	r2, [r7, #28]
 8002646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002648:	69b9      	ldr	r1, [r7, #24]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	e841 2300 	strex	r3, r2, [r1]
 8002650:	617b      	str	r3, [r7, #20]
   return(result);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e3      	bne.n	8002620 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800265e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f83b 	bl	80026e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800266a:	e023      	b.n	80026b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800266c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_UART_IRQHandler+0x4f4>
 8002678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800267c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f93e 	bl	8002906 <UART_Transmit_IT>
    return;
 800268a:	e014      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800268c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <HAL_UART_IRQHandler+0x51e>
 8002698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800269c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f97d 	bl	80029a4 <UART_EndTransmit_IT>
    return;
 80026aa:	e004      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80026ac:	bf00      	nop
 80026ae:	e002      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80026b0:	bf00      	nop
 80026b2:	e000      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80026b4:	bf00      	nop
  }
}
 80026b6:	37e8      	adds	r7, #232	@ 0xe8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4613      	mov	r3, r2
 8002704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002706:	e03b      	b.n	8002780 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800270e:	d037      	beq.n	8002780 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002710:	f7fe f87e 	bl	8000810 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	6a3a      	ldr	r2, [r7, #32]
 800271c:	429a      	cmp	r2, r3
 800271e:	d302      	bcc.n	8002726 <UART_WaitOnFlagUntilTimeout+0x30>
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e03a      	b.n	80027a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b80      	cmp	r3, #128	@ 0x80
 800273c:	d020      	beq.n	8002780 <UART_WaitOnFlagUntilTimeout+0x8a>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b40      	cmp	r3, #64	@ 0x40
 8002742:	d01d      	beq.n	8002780 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d116      	bne.n	8002780 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f856 	bl	800281a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2208      	movs	r2, #8
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e00f      	b.n	80027a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4013      	ands	r3, r2
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	429a      	cmp	r2, r3
 800279c:	d0b4      	beq.n	8002708 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	88fa      	ldrh	r2, [r7, #6]
 80027c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2222      	movs	r2, #34	@ 0x22
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0220 	orr.w	r2, r2, #32
 800280c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800281a:	b480      	push	{r7}
 800281c:	b095      	sub	sp, #84	@ 0x54
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	330c      	adds	r3, #12
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002838:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002842:	643a      	str	r2, [r7, #64]	@ 0x40
 8002844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002848:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e5      	bne.n	8002822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	61fb      	str	r3, [r7, #28]
   return(result);
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3314      	adds	r3, #20
 8002874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002878:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800287c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e5      	bne.n	8002856 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	2b01      	cmp	r3, #1
 8002890:	d119      	bne.n	80028c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	330c      	adds	r3, #12
 8002898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f023 0310 	bic.w	r3, r3, #16
 80028a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b2:	61ba      	str	r2, [r7, #24]
 80028b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6979      	ldr	r1, [r7, #20]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	613b      	str	r3, [r7, #16]
   return(result);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e5      	bne.n	8002892 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028d4:	bf00      	nop
 80028d6:	3754      	adds	r7, #84	@ 0x54
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff fee8 	bl	80026ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b21      	cmp	r3, #33	@ 0x21
 8002918:	d13e      	bne.n	8002998 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002922:	d114      	bne.n	800294e <UART_Transmit_IT+0x48>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d110      	bne.n	800294e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002940:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	1c9a      	adds	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	621a      	str	r2, [r3, #32]
 800294c:	e008      	b.n	8002960 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	1c59      	adds	r1, r3, #1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6211      	str	r1, [r2, #32]
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10f      	bne.n	8002994 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002982:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002992:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe79 	bl	80026bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	@ 0x30
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b22      	cmp	r3, #34	@ 0x22
 80029e6:	f040 80ae 	bne.w	8002b46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f2:	d117      	bne.n	8002a24 <UART_Receive_IT+0x50>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d113      	bne.n	8002a24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	1c9a      	adds	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a22:	e026      	b.n	8002a72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a36:	d007      	beq.n	8002a48 <UART_Receive_IT+0x74>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <UART_Receive_IT+0x82>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e008      	b.n	8002a68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d15d      	bne.n	8002b42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0220 	bic.w	r2, r2, #32
 8002a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d135      	bne.n	8002b38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f023 0310 	bic.w	r3, r3, #16
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	330c      	adds	r3, #12
 8002af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af2:	623a      	str	r2, [r7, #32]
 8002af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	69f9      	ldr	r1, [r7, #28]
 8002af8:	6a3a      	ldr	r2, [r7, #32]
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e5      	bne.n	8002ad2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d10a      	bne.n	8002b2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fdd5 	bl	80026e0 <HAL_UARTEx_RxEventCallback>
 8002b36:	e002      	b.n	8002b3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fd fb0f 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e002      	b.n	8002b48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3730      	adds	r7, #48	@ 0x30
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002b8a:	f023 030c 	bic.w	r3, r3, #12
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c64 <UART_SetConfig+0x114>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d103      	bne.n	8002bc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bb8:	f7fe fd90 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	e002      	b.n	8002bc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bc0:	f7fe fd78 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
 8002bc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	009a      	lsls	r2, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	4a22      	ldr	r2, [pc, #136]	@ (8002c68 <UART_SetConfig+0x118>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	0119      	lsls	r1, r3, #4
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009a      	lsls	r2, r3, #2
 8002bf0:	441a      	add	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <UART_SetConfig+0x118>)
 8002bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2064      	movs	r0, #100	@ 0x64
 8002c06:	fb00 f303 	mul.w	r3, r0, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	3332      	adds	r3, #50	@ 0x32
 8002c10:	4a15      	ldr	r2, [pc, #84]	@ (8002c68 <UART_SetConfig+0x118>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c1c:	4419      	add	r1, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c34:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <UART_SetConfig+0x118>)
 8002c36:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2064      	movs	r0, #100	@ 0x64
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	3332      	adds	r3, #50	@ 0x32
 8002c48:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <UART_SetConfig+0x118>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	f003 020f 	and.w	r2, r3, #15
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	440a      	add	r2, r1
 8002c5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40013800 	.word	0x40013800
 8002c68:	51eb851f 	.word	0x51eb851f

08002c6c <sniprintf>:
 8002c6c:	b40c      	push	{r2, r3}
 8002c6e:	b530      	push	{r4, r5, lr}
 8002c70:	4b18      	ldr	r3, [pc, #96]	@ (8002cd4 <sniprintf+0x68>)
 8002c72:	1e0c      	subs	r4, r1, #0
 8002c74:	681d      	ldr	r5, [r3, #0]
 8002c76:	b09d      	sub	sp, #116	@ 0x74
 8002c78:	da08      	bge.n	8002c8c <sniprintf+0x20>
 8002c7a:	238b      	movs	r3, #139	@ 0x8b
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c80:	602b      	str	r3, [r5, #0]
 8002c82:	b01d      	add	sp, #116	@ 0x74
 8002c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c88:	b002      	add	sp, #8
 8002c8a:	4770      	bx	lr
 8002c8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002c90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002c9a:	bf0c      	ite	eq
 8002c9c:	4623      	moveq	r3, r4
 8002c9e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002ca2:	9304      	str	r3, [sp, #16]
 8002ca4:	9307      	str	r3, [sp, #28]
 8002ca6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002caa:	9002      	str	r0, [sp, #8]
 8002cac:	9006      	str	r0, [sp, #24]
 8002cae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	ab21      	add	r3, sp, #132	@ 0x84
 8002cb6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002cb8:	a902      	add	r1, sp, #8
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	f000 f89c 	bl	8002df8 <_svfiprintf_r>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	bfbc      	itt	lt
 8002cc4:	238b      	movlt	r3, #139	@ 0x8b
 8002cc6:	602b      	strlt	r3, [r5, #0]
 8002cc8:	2c00      	cmp	r4, #0
 8002cca:	d0da      	beq.n	8002c82 <sniprintf+0x16>
 8002ccc:	2200      	movs	r2, #0
 8002cce:	9b02      	ldr	r3, [sp, #8]
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e7d6      	b.n	8002c82 <sniprintf+0x16>
 8002cd4:	2000000c 	.word	0x2000000c

08002cd8 <memset>:
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4402      	add	r2, r0
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <memset+0xa>
 8002ce0:	4770      	bx	lr
 8002ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce6:	e7f9      	b.n	8002cdc <memset+0x4>

08002ce8 <__errno>:
 8002ce8:	4b01      	ldr	r3, [pc, #4]	@ (8002cf0 <__errno+0x8>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	2000000c 	.word	0x2000000c

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	4d0c      	ldr	r5, [pc, #48]	@ (8002d2c <__libc_init_array+0x38>)
 8002cfa:	4c0d      	ldr	r4, [pc, #52]	@ (8002d30 <__libc_init_array+0x3c>)
 8002cfc:	1b64      	subs	r4, r4, r5
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	42a6      	cmp	r6, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	f000 fc76 	bl	80035f4 <_init>
 8002d08:	2600      	movs	r6, #0
 8002d0a:	4d0a      	ldr	r5, [pc, #40]	@ (8002d34 <__libc_init_array+0x40>)
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d38 <__libc_init_array+0x44>)
 8002d0e:	1b64      	subs	r4, r4, r5
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	42a6      	cmp	r6, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1c:	4798      	blx	r3
 8002d1e:	3601      	adds	r6, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d26:	4798      	blx	r3
 8002d28:	3601      	adds	r6, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08003680 	.word	0x08003680
 8002d30:	08003680 	.word	0x08003680
 8002d34:	08003680 	.word	0x08003680
 8002d38:	08003684 	.word	0x08003684

08002d3c <__retarget_lock_acquire_recursive>:
 8002d3c:	4770      	bx	lr

08002d3e <__retarget_lock_release_recursive>:
 8002d3e:	4770      	bx	lr

08002d40 <__ssputs_r>:
 8002d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d44:	461f      	mov	r7, r3
 8002d46:	688e      	ldr	r6, [r1, #8]
 8002d48:	4682      	mov	sl, r0
 8002d4a:	42be      	cmp	r6, r7
 8002d4c:	460c      	mov	r4, r1
 8002d4e:	4690      	mov	r8, r2
 8002d50:	680b      	ldr	r3, [r1, #0]
 8002d52:	d82d      	bhi.n	8002db0 <__ssputs_r+0x70>
 8002d54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002d5c:	d026      	beq.n	8002dac <__ssputs_r+0x6c>
 8002d5e:	6965      	ldr	r5, [r4, #20]
 8002d60:	6909      	ldr	r1, [r1, #16]
 8002d62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d66:	eba3 0901 	sub.w	r9, r3, r1
 8002d6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d6e:	1c7b      	adds	r3, r7, #1
 8002d70:	444b      	add	r3, r9
 8002d72:	106d      	asrs	r5, r5, #1
 8002d74:	429d      	cmp	r5, r3
 8002d76:	bf38      	it	cc
 8002d78:	461d      	movcc	r5, r3
 8002d7a:	0553      	lsls	r3, r2, #21
 8002d7c:	d527      	bpl.n	8002dce <__ssputs_r+0x8e>
 8002d7e:	4629      	mov	r1, r5
 8002d80:	f000 f958 	bl	8003034 <_malloc_r>
 8002d84:	4606      	mov	r6, r0
 8002d86:	b360      	cbz	r0, 8002de2 <__ssputs_r+0xa2>
 8002d88:	464a      	mov	r2, r9
 8002d8a:	6921      	ldr	r1, [r4, #16]
 8002d8c:	f000 fbd4 	bl	8003538 <memcpy>
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d9a:	81a3      	strh	r3, [r4, #12]
 8002d9c:	6126      	str	r6, [r4, #16]
 8002d9e:	444e      	add	r6, r9
 8002da0:	6026      	str	r6, [r4, #0]
 8002da2:	463e      	mov	r6, r7
 8002da4:	6165      	str	r5, [r4, #20]
 8002da6:	eba5 0509 	sub.w	r5, r5, r9
 8002daa:	60a5      	str	r5, [r4, #8]
 8002dac:	42be      	cmp	r6, r7
 8002dae:	d900      	bls.n	8002db2 <__ssputs_r+0x72>
 8002db0:	463e      	mov	r6, r7
 8002db2:	4632      	mov	r2, r6
 8002db4:	4641      	mov	r1, r8
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	f000 fb86 	bl	80034c8 <memmove>
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	1b9b      	subs	r3, r3, r6
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	4433      	add	r3, r6
 8002dc8:	6023      	str	r3, [r4, #0]
 8002dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dce:	462a      	mov	r2, r5
 8002dd0:	f000 fb4c 	bl	800346c <_realloc_r>
 8002dd4:	4606      	mov	r6, r0
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	d1e0      	bne.n	8002d9c <__ssputs_r+0x5c>
 8002dda:	4650      	mov	r0, sl
 8002ddc:	6921      	ldr	r1, [r4, #16]
 8002dde:	f000 fbb9 	bl	8003554 <_free_r>
 8002de2:	230c      	movs	r3, #12
 8002de4:	f8ca 3000 	str.w	r3, [sl]
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002df2:	81a3      	strh	r3, [r4, #12]
 8002df4:	e7e9      	b.n	8002dca <__ssputs_r+0x8a>
	...

08002df8 <_svfiprintf_r>:
 8002df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfc:	4698      	mov	r8, r3
 8002dfe:	898b      	ldrh	r3, [r1, #12]
 8002e00:	4607      	mov	r7, r0
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	460d      	mov	r5, r1
 8002e06:	4614      	mov	r4, r2
 8002e08:	b09d      	sub	sp, #116	@ 0x74
 8002e0a:	d510      	bpl.n	8002e2e <_svfiprintf_r+0x36>
 8002e0c:	690b      	ldr	r3, [r1, #16]
 8002e0e:	b973      	cbnz	r3, 8002e2e <_svfiprintf_r+0x36>
 8002e10:	2140      	movs	r1, #64	@ 0x40
 8002e12:	f000 f90f 	bl	8003034 <_malloc_r>
 8002e16:	6028      	str	r0, [r5, #0]
 8002e18:	6128      	str	r0, [r5, #16]
 8002e1a:	b930      	cbnz	r0, 8002e2a <_svfiprintf_r+0x32>
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e24:	b01d      	add	sp, #116	@ 0x74
 8002e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2a:	2340      	movs	r3, #64	@ 0x40
 8002e2c:	616b      	str	r3, [r5, #20]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e32:	2320      	movs	r3, #32
 8002e34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e38:	2330      	movs	r3, #48	@ 0x30
 8002e3a:	f04f 0901 	mov.w	r9, #1
 8002e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002fdc <_svfiprintf_r+0x1e4>
 8002e46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	469a      	mov	sl, r3
 8002e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e52:	b10a      	cbz	r2, 8002e58 <_svfiprintf_r+0x60>
 8002e54:	2a25      	cmp	r2, #37	@ 0x25
 8002e56:	d1f9      	bne.n	8002e4c <_svfiprintf_r+0x54>
 8002e58:	ebba 0b04 	subs.w	fp, sl, r4
 8002e5c:	d00b      	beq.n	8002e76 <_svfiprintf_r+0x7e>
 8002e5e:	465b      	mov	r3, fp
 8002e60:	4622      	mov	r2, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	4638      	mov	r0, r7
 8002e66:	f7ff ff6b 	bl	8002d40 <__ssputs_r>
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	f000 80a7 	beq.w	8002fbe <_svfiprintf_r+0x1c6>
 8002e70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e72:	445a      	add	r2, fp
 8002e74:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e76:	f89a 3000 	ldrb.w	r3, [sl]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 809f 	beq.w	8002fbe <_svfiprintf_r+0x1c6>
 8002e80:	2300      	movs	r3, #0
 8002e82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e8a:	f10a 0a01 	add.w	sl, sl, #1
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	9307      	str	r3, [sp, #28]
 8002e92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e96:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e98:	4654      	mov	r4, sl
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ea0:	484e      	ldr	r0, [pc, #312]	@ (8002fdc <_svfiprintf_r+0x1e4>)
 8002ea2:	f000 fb3b 	bl	800351c <memchr>
 8002ea6:	9a04      	ldr	r2, [sp, #16]
 8002ea8:	b9d8      	cbnz	r0, 8002ee2 <_svfiprintf_r+0xea>
 8002eaa:	06d0      	lsls	r0, r2, #27
 8002eac:	bf44      	itt	mi
 8002eae:	2320      	movmi	r3, #32
 8002eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002eb4:	0711      	lsls	r1, r2, #28
 8002eb6:	bf44      	itt	mi
 8002eb8:	232b      	movmi	r3, #43	@ 0x2b
 8002eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8002ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ec4:	d015      	beq.n	8002ef2 <_svfiprintf_r+0xfa>
 8002ec6:	4654      	mov	r4, sl
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f04f 0c0a 	mov.w	ip, #10
 8002ece:	9a07      	ldr	r2, [sp, #28]
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ed6:	3b30      	subs	r3, #48	@ 0x30
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	d94b      	bls.n	8002f74 <_svfiprintf_r+0x17c>
 8002edc:	b1b0      	cbz	r0, 8002f0c <_svfiprintf_r+0x114>
 8002ede:	9207      	str	r2, [sp, #28]
 8002ee0:	e014      	b.n	8002f0c <_svfiprintf_r+0x114>
 8002ee2:	eba0 0308 	sub.w	r3, r0, r8
 8002ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	46a2      	mov	sl, r4
 8002eee:	9304      	str	r3, [sp, #16]
 8002ef0:	e7d2      	b.n	8002e98 <_svfiprintf_r+0xa0>
 8002ef2:	9b03      	ldr	r3, [sp, #12]
 8002ef4:	1d19      	adds	r1, r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	9103      	str	r1, [sp, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bfbb      	ittet	lt
 8002efe:	425b      	neglt	r3, r3
 8002f00:	f042 0202 	orrlt.w	r2, r2, #2
 8002f04:	9307      	strge	r3, [sp, #28]
 8002f06:	9307      	strlt	r3, [sp, #28]
 8002f08:	bfb8      	it	lt
 8002f0a:	9204      	strlt	r2, [sp, #16]
 8002f0c:	7823      	ldrb	r3, [r4, #0]
 8002f0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f10:	d10a      	bne.n	8002f28 <_svfiprintf_r+0x130>
 8002f12:	7863      	ldrb	r3, [r4, #1]
 8002f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f16:	d132      	bne.n	8002f7e <_svfiprintf_r+0x186>
 8002f18:	9b03      	ldr	r3, [sp, #12]
 8002f1a:	3402      	adds	r4, #2
 8002f1c:	1d1a      	adds	r2, r3, #4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	9203      	str	r2, [sp, #12]
 8002f22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f26:	9305      	str	r3, [sp, #20]
 8002f28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002fe0 <_svfiprintf_r+0x1e8>
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	4650      	mov	r0, sl
 8002f30:	7821      	ldrb	r1, [r4, #0]
 8002f32:	f000 faf3 	bl	800351c <memchr>
 8002f36:	b138      	cbz	r0, 8002f48 <_svfiprintf_r+0x150>
 8002f38:	2240      	movs	r2, #64	@ 0x40
 8002f3a:	9b04      	ldr	r3, [sp, #16]
 8002f3c:	eba0 000a 	sub.w	r0, r0, sl
 8002f40:	4082      	lsls	r2, r0
 8002f42:	4313      	orrs	r3, r2
 8002f44:	3401      	adds	r4, #1
 8002f46:	9304      	str	r3, [sp, #16]
 8002f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f4c:	2206      	movs	r2, #6
 8002f4e:	4825      	ldr	r0, [pc, #148]	@ (8002fe4 <_svfiprintf_r+0x1ec>)
 8002f50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f54:	f000 fae2 	bl	800351c <memchr>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d036      	beq.n	8002fca <_svfiprintf_r+0x1d2>
 8002f5c:	4b22      	ldr	r3, [pc, #136]	@ (8002fe8 <_svfiprintf_r+0x1f0>)
 8002f5e:	bb1b      	cbnz	r3, 8002fa8 <_svfiprintf_r+0x1b0>
 8002f60:	9b03      	ldr	r3, [sp, #12]
 8002f62:	3307      	adds	r3, #7
 8002f64:	f023 0307 	bic.w	r3, r3, #7
 8002f68:	3308      	adds	r3, #8
 8002f6a:	9303      	str	r3, [sp, #12]
 8002f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f6e:	4433      	add	r3, r6
 8002f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f72:	e76a      	b.n	8002e4a <_svfiprintf_r+0x52>
 8002f74:	460c      	mov	r4, r1
 8002f76:	2001      	movs	r0, #1
 8002f78:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f7c:	e7a8      	b.n	8002ed0 <_svfiprintf_r+0xd8>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f04f 0c0a 	mov.w	ip, #10
 8002f84:	4619      	mov	r1, r3
 8002f86:	3401      	adds	r4, #1
 8002f88:	9305      	str	r3, [sp, #20]
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f90:	3a30      	subs	r2, #48	@ 0x30
 8002f92:	2a09      	cmp	r2, #9
 8002f94:	d903      	bls.n	8002f9e <_svfiprintf_r+0x1a6>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0c6      	beq.n	8002f28 <_svfiprintf_r+0x130>
 8002f9a:	9105      	str	r1, [sp, #20]
 8002f9c:	e7c4      	b.n	8002f28 <_svfiprintf_r+0x130>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fa6:	e7f0      	b.n	8002f8a <_svfiprintf_r+0x192>
 8002fa8:	ab03      	add	r3, sp, #12
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	462a      	mov	r2, r5
 8002fae:	4638      	mov	r0, r7
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <_svfiprintf_r+0x1f4>)
 8002fb2:	a904      	add	r1, sp, #16
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	1c42      	adds	r2, r0, #1
 8002fba:	4606      	mov	r6, r0
 8002fbc:	d1d6      	bne.n	8002f6c <_svfiprintf_r+0x174>
 8002fbe:	89ab      	ldrh	r3, [r5, #12]
 8002fc0:	065b      	lsls	r3, r3, #25
 8002fc2:	f53f af2d 	bmi.w	8002e20 <_svfiprintf_r+0x28>
 8002fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002fc8:	e72c      	b.n	8002e24 <_svfiprintf_r+0x2c>
 8002fca:	ab03      	add	r3, sp, #12
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	462a      	mov	r2, r5
 8002fd0:	4638      	mov	r0, r7
 8002fd2:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <_svfiprintf_r+0x1f4>)
 8002fd4:	a904      	add	r1, sp, #16
 8002fd6:	f000 f91f 	bl	8003218 <_printf_i>
 8002fda:	e7ed      	b.n	8002fb8 <_svfiprintf_r+0x1c0>
 8002fdc:	08003642 	.word	0x08003642
 8002fe0:	08003648 	.word	0x08003648
 8002fe4:	0800364c 	.word	0x0800364c
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	08002d41 	.word	0x08002d41

08002ff0 <sbrk_aligned>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	4e0f      	ldr	r6, [pc, #60]	@ (8003030 <sbrk_aligned+0x40>)
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	6831      	ldr	r1, [r6, #0]
 8002ff8:	4605      	mov	r5, r0
 8002ffa:	b911      	cbnz	r1, 8003002 <sbrk_aligned+0x12>
 8002ffc:	f000 fa7e 	bl	80034fc <_sbrk_r>
 8003000:	6030      	str	r0, [r6, #0]
 8003002:	4621      	mov	r1, r4
 8003004:	4628      	mov	r0, r5
 8003006:	f000 fa79 	bl	80034fc <_sbrk_r>
 800300a:	1c43      	adds	r3, r0, #1
 800300c:	d103      	bne.n	8003016 <sbrk_aligned+0x26>
 800300e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003012:	4620      	mov	r0, r4
 8003014:	bd70      	pop	{r4, r5, r6, pc}
 8003016:	1cc4      	adds	r4, r0, #3
 8003018:	f024 0403 	bic.w	r4, r4, #3
 800301c:	42a0      	cmp	r0, r4
 800301e:	d0f8      	beq.n	8003012 <sbrk_aligned+0x22>
 8003020:	1a21      	subs	r1, r4, r0
 8003022:	4628      	mov	r0, r5
 8003024:	f000 fa6a 	bl	80034fc <_sbrk_r>
 8003028:	3001      	adds	r0, #1
 800302a:	d1f2      	bne.n	8003012 <sbrk_aligned+0x22>
 800302c:	e7ef      	b.n	800300e <sbrk_aligned+0x1e>
 800302e:	bf00      	nop
 8003030:	20000254 	.word	0x20000254

08003034 <_malloc_r>:
 8003034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003038:	1ccd      	adds	r5, r1, #3
 800303a:	f025 0503 	bic.w	r5, r5, #3
 800303e:	3508      	adds	r5, #8
 8003040:	2d0c      	cmp	r5, #12
 8003042:	bf38      	it	cc
 8003044:	250c      	movcc	r5, #12
 8003046:	2d00      	cmp	r5, #0
 8003048:	4606      	mov	r6, r0
 800304a:	db01      	blt.n	8003050 <_malloc_r+0x1c>
 800304c:	42a9      	cmp	r1, r5
 800304e:	d904      	bls.n	800305a <_malloc_r+0x26>
 8003050:	230c      	movs	r3, #12
 8003052:	6033      	str	r3, [r6, #0]
 8003054:	2000      	movs	r0, #0
 8003056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800305a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003130 <_malloc_r+0xfc>
 800305e:	f000 f9f9 	bl	8003454 <__malloc_lock>
 8003062:	f8d8 3000 	ldr.w	r3, [r8]
 8003066:	461c      	mov	r4, r3
 8003068:	bb44      	cbnz	r4, 80030bc <_malloc_r+0x88>
 800306a:	4629      	mov	r1, r5
 800306c:	4630      	mov	r0, r6
 800306e:	f7ff ffbf 	bl	8002ff0 <sbrk_aligned>
 8003072:	1c43      	adds	r3, r0, #1
 8003074:	4604      	mov	r4, r0
 8003076:	d158      	bne.n	800312a <_malloc_r+0xf6>
 8003078:	f8d8 4000 	ldr.w	r4, [r8]
 800307c:	4627      	mov	r7, r4
 800307e:	2f00      	cmp	r7, #0
 8003080:	d143      	bne.n	800310a <_malloc_r+0xd6>
 8003082:	2c00      	cmp	r4, #0
 8003084:	d04b      	beq.n	800311e <_malloc_r+0xea>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	4639      	mov	r1, r7
 800308a:	4630      	mov	r0, r6
 800308c:	eb04 0903 	add.w	r9, r4, r3
 8003090:	f000 fa34 	bl	80034fc <_sbrk_r>
 8003094:	4581      	cmp	r9, r0
 8003096:	d142      	bne.n	800311e <_malloc_r+0xea>
 8003098:	6821      	ldr	r1, [r4, #0]
 800309a:	4630      	mov	r0, r6
 800309c:	1a6d      	subs	r5, r5, r1
 800309e:	4629      	mov	r1, r5
 80030a0:	f7ff ffa6 	bl	8002ff0 <sbrk_aligned>
 80030a4:	3001      	adds	r0, #1
 80030a6:	d03a      	beq.n	800311e <_malloc_r+0xea>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	442b      	add	r3, r5
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	f8d8 3000 	ldr.w	r3, [r8]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	bb62      	cbnz	r2, 8003110 <_malloc_r+0xdc>
 80030b6:	f8c8 7000 	str.w	r7, [r8]
 80030ba:	e00f      	b.n	80030dc <_malloc_r+0xa8>
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	1b52      	subs	r2, r2, r5
 80030c0:	d420      	bmi.n	8003104 <_malloc_r+0xd0>
 80030c2:	2a0b      	cmp	r2, #11
 80030c4:	d917      	bls.n	80030f6 <_malloc_r+0xc2>
 80030c6:	1961      	adds	r1, r4, r5
 80030c8:	42a3      	cmp	r3, r4
 80030ca:	6025      	str	r5, [r4, #0]
 80030cc:	bf18      	it	ne
 80030ce:	6059      	strne	r1, [r3, #4]
 80030d0:	6863      	ldr	r3, [r4, #4]
 80030d2:	bf08      	it	eq
 80030d4:	f8c8 1000 	streq.w	r1, [r8]
 80030d8:	5162      	str	r2, [r4, r5]
 80030da:	604b      	str	r3, [r1, #4]
 80030dc:	4630      	mov	r0, r6
 80030de:	f000 f9bf 	bl	8003460 <__malloc_unlock>
 80030e2:	f104 000b 	add.w	r0, r4, #11
 80030e6:	1d23      	adds	r3, r4, #4
 80030e8:	f020 0007 	bic.w	r0, r0, #7
 80030ec:	1ac2      	subs	r2, r0, r3
 80030ee:	bf1c      	itt	ne
 80030f0:	1a1b      	subne	r3, r3, r0
 80030f2:	50a3      	strne	r3, [r4, r2]
 80030f4:	e7af      	b.n	8003056 <_malloc_r+0x22>
 80030f6:	6862      	ldr	r2, [r4, #4]
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	bf0c      	ite	eq
 80030fc:	f8c8 2000 	streq.w	r2, [r8]
 8003100:	605a      	strne	r2, [r3, #4]
 8003102:	e7eb      	b.n	80030dc <_malloc_r+0xa8>
 8003104:	4623      	mov	r3, r4
 8003106:	6864      	ldr	r4, [r4, #4]
 8003108:	e7ae      	b.n	8003068 <_malloc_r+0x34>
 800310a:	463c      	mov	r4, r7
 800310c:	687f      	ldr	r7, [r7, #4]
 800310e:	e7b6      	b.n	800307e <_malloc_r+0x4a>
 8003110:	461a      	mov	r2, r3
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	42a3      	cmp	r3, r4
 8003116:	d1fb      	bne.n	8003110 <_malloc_r+0xdc>
 8003118:	2300      	movs	r3, #0
 800311a:	6053      	str	r3, [r2, #4]
 800311c:	e7de      	b.n	80030dc <_malloc_r+0xa8>
 800311e:	230c      	movs	r3, #12
 8003120:	4630      	mov	r0, r6
 8003122:	6033      	str	r3, [r6, #0]
 8003124:	f000 f99c 	bl	8003460 <__malloc_unlock>
 8003128:	e794      	b.n	8003054 <_malloc_r+0x20>
 800312a:	6005      	str	r5, [r0, #0]
 800312c:	e7d6      	b.n	80030dc <_malloc_r+0xa8>
 800312e:	bf00      	nop
 8003130:	20000258 	.word	0x20000258

08003134 <_printf_common>:
 8003134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003138:	4616      	mov	r6, r2
 800313a:	4698      	mov	r8, r3
 800313c:	688a      	ldr	r2, [r1, #8]
 800313e:	690b      	ldr	r3, [r1, #16]
 8003140:	4607      	mov	r7, r0
 8003142:	4293      	cmp	r3, r2
 8003144:	bfb8      	it	lt
 8003146:	4613      	movlt	r3, r2
 8003148:	6033      	str	r3, [r6, #0]
 800314a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800314e:	460c      	mov	r4, r1
 8003150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003154:	b10a      	cbz	r2, 800315a <_printf_common+0x26>
 8003156:	3301      	adds	r3, #1
 8003158:	6033      	str	r3, [r6, #0]
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	0699      	lsls	r1, r3, #26
 800315e:	bf42      	ittt	mi
 8003160:	6833      	ldrmi	r3, [r6, #0]
 8003162:	3302      	addmi	r3, #2
 8003164:	6033      	strmi	r3, [r6, #0]
 8003166:	6825      	ldr	r5, [r4, #0]
 8003168:	f015 0506 	ands.w	r5, r5, #6
 800316c:	d106      	bne.n	800317c <_printf_common+0x48>
 800316e:	f104 0a19 	add.w	sl, r4, #25
 8003172:	68e3      	ldr	r3, [r4, #12]
 8003174:	6832      	ldr	r2, [r6, #0]
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	42ab      	cmp	r3, r5
 800317a:	dc2b      	bgt.n	80031d4 <_printf_common+0xa0>
 800317c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	3b00      	subs	r3, #0
 8003184:	bf18      	it	ne
 8003186:	2301      	movne	r3, #1
 8003188:	0692      	lsls	r2, r2, #26
 800318a:	d430      	bmi.n	80031ee <_printf_common+0xba>
 800318c:	4641      	mov	r1, r8
 800318e:	4638      	mov	r0, r7
 8003190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003194:	47c8      	blx	r9
 8003196:	3001      	adds	r0, #1
 8003198:	d023      	beq.n	80031e2 <_printf_common+0xae>
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	6922      	ldr	r2, [r4, #16]
 800319e:	f003 0306 	and.w	r3, r3, #6
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf14      	ite	ne
 80031a6:	2500      	movne	r5, #0
 80031a8:	6833      	ldreq	r3, [r6, #0]
 80031aa:	f04f 0600 	mov.w	r6, #0
 80031ae:	bf08      	it	eq
 80031b0:	68e5      	ldreq	r5, [r4, #12]
 80031b2:	f104 041a 	add.w	r4, r4, #26
 80031b6:	bf08      	it	eq
 80031b8:	1aed      	subeq	r5, r5, r3
 80031ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80031be:	bf08      	it	eq
 80031c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031c4:	4293      	cmp	r3, r2
 80031c6:	bfc4      	itt	gt
 80031c8:	1a9b      	subgt	r3, r3, r2
 80031ca:	18ed      	addgt	r5, r5, r3
 80031cc:	42b5      	cmp	r5, r6
 80031ce:	d11a      	bne.n	8003206 <_printf_common+0xd2>
 80031d0:	2000      	movs	r0, #0
 80031d2:	e008      	b.n	80031e6 <_printf_common+0xb2>
 80031d4:	2301      	movs	r3, #1
 80031d6:	4652      	mov	r2, sl
 80031d8:	4641      	mov	r1, r8
 80031da:	4638      	mov	r0, r7
 80031dc:	47c8      	blx	r9
 80031de:	3001      	adds	r0, #1
 80031e0:	d103      	bne.n	80031ea <_printf_common+0xb6>
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ea:	3501      	adds	r5, #1
 80031ec:	e7c1      	b.n	8003172 <_printf_common+0x3e>
 80031ee:	2030      	movs	r0, #48	@ 0x30
 80031f0:	18e1      	adds	r1, r4, r3
 80031f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80031fc:	4422      	add	r2, r4
 80031fe:	3302      	adds	r3, #2
 8003200:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003204:	e7c2      	b.n	800318c <_printf_common+0x58>
 8003206:	2301      	movs	r3, #1
 8003208:	4622      	mov	r2, r4
 800320a:	4641      	mov	r1, r8
 800320c:	4638      	mov	r0, r7
 800320e:	47c8      	blx	r9
 8003210:	3001      	adds	r0, #1
 8003212:	d0e6      	beq.n	80031e2 <_printf_common+0xae>
 8003214:	3601      	adds	r6, #1
 8003216:	e7d9      	b.n	80031cc <_printf_common+0x98>

08003218 <_printf_i>:
 8003218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800321c:	7e0f      	ldrb	r7, [r1, #24]
 800321e:	4691      	mov	r9, r2
 8003220:	2f78      	cmp	r7, #120	@ 0x78
 8003222:	4680      	mov	r8, r0
 8003224:	460c      	mov	r4, r1
 8003226:	469a      	mov	sl, r3
 8003228:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800322a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800322e:	d807      	bhi.n	8003240 <_printf_i+0x28>
 8003230:	2f62      	cmp	r7, #98	@ 0x62
 8003232:	d80a      	bhi.n	800324a <_printf_i+0x32>
 8003234:	2f00      	cmp	r7, #0
 8003236:	f000 80d1 	beq.w	80033dc <_printf_i+0x1c4>
 800323a:	2f58      	cmp	r7, #88	@ 0x58
 800323c:	f000 80b8 	beq.w	80033b0 <_printf_i+0x198>
 8003240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003244:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003248:	e03a      	b.n	80032c0 <_printf_i+0xa8>
 800324a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800324e:	2b15      	cmp	r3, #21
 8003250:	d8f6      	bhi.n	8003240 <_printf_i+0x28>
 8003252:	a101      	add	r1, pc, #4	@ (adr r1, 8003258 <_printf_i+0x40>)
 8003254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003258:	080032b1 	.word	0x080032b1
 800325c:	080032c5 	.word	0x080032c5
 8003260:	08003241 	.word	0x08003241
 8003264:	08003241 	.word	0x08003241
 8003268:	08003241 	.word	0x08003241
 800326c:	08003241 	.word	0x08003241
 8003270:	080032c5 	.word	0x080032c5
 8003274:	08003241 	.word	0x08003241
 8003278:	08003241 	.word	0x08003241
 800327c:	08003241 	.word	0x08003241
 8003280:	08003241 	.word	0x08003241
 8003284:	080033c3 	.word	0x080033c3
 8003288:	080032ef 	.word	0x080032ef
 800328c:	0800337d 	.word	0x0800337d
 8003290:	08003241 	.word	0x08003241
 8003294:	08003241 	.word	0x08003241
 8003298:	080033e5 	.word	0x080033e5
 800329c:	08003241 	.word	0x08003241
 80032a0:	080032ef 	.word	0x080032ef
 80032a4:	08003241 	.word	0x08003241
 80032a8:	08003241 	.word	0x08003241
 80032ac:	08003385 	.word	0x08003385
 80032b0:	6833      	ldr	r3, [r6, #0]
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6032      	str	r2, [r6, #0]
 80032b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032c0:	2301      	movs	r3, #1
 80032c2:	e09c      	b.n	80033fe <_printf_i+0x1e6>
 80032c4:	6833      	ldr	r3, [r6, #0]
 80032c6:	6820      	ldr	r0, [r4, #0]
 80032c8:	1d19      	adds	r1, r3, #4
 80032ca:	6031      	str	r1, [r6, #0]
 80032cc:	0606      	lsls	r6, r0, #24
 80032ce:	d501      	bpl.n	80032d4 <_printf_i+0xbc>
 80032d0:	681d      	ldr	r5, [r3, #0]
 80032d2:	e003      	b.n	80032dc <_printf_i+0xc4>
 80032d4:	0645      	lsls	r5, r0, #25
 80032d6:	d5fb      	bpl.n	80032d0 <_printf_i+0xb8>
 80032d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80032dc:	2d00      	cmp	r5, #0
 80032de:	da03      	bge.n	80032e8 <_printf_i+0xd0>
 80032e0:	232d      	movs	r3, #45	@ 0x2d
 80032e2:	426d      	negs	r5, r5
 80032e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032e8:	230a      	movs	r3, #10
 80032ea:	4858      	ldr	r0, [pc, #352]	@ (800344c <_printf_i+0x234>)
 80032ec:	e011      	b.n	8003312 <_printf_i+0xfa>
 80032ee:	6821      	ldr	r1, [r4, #0]
 80032f0:	6833      	ldr	r3, [r6, #0]
 80032f2:	0608      	lsls	r0, r1, #24
 80032f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80032f8:	d402      	bmi.n	8003300 <_printf_i+0xe8>
 80032fa:	0649      	lsls	r1, r1, #25
 80032fc:	bf48      	it	mi
 80032fe:	b2ad      	uxthmi	r5, r5
 8003300:	2f6f      	cmp	r7, #111	@ 0x6f
 8003302:	6033      	str	r3, [r6, #0]
 8003304:	bf14      	ite	ne
 8003306:	230a      	movne	r3, #10
 8003308:	2308      	moveq	r3, #8
 800330a:	4850      	ldr	r0, [pc, #320]	@ (800344c <_printf_i+0x234>)
 800330c:	2100      	movs	r1, #0
 800330e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003312:	6866      	ldr	r6, [r4, #4]
 8003314:	2e00      	cmp	r6, #0
 8003316:	60a6      	str	r6, [r4, #8]
 8003318:	db05      	blt.n	8003326 <_printf_i+0x10e>
 800331a:	6821      	ldr	r1, [r4, #0]
 800331c:	432e      	orrs	r6, r5
 800331e:	f021 0104 	bic.w	r1, r1, #4
 8003322:	6021      	str	r1, [r4, #0]
 8003324:	d04b      	beq.n	80033be <_printf_i+0x1a6>
 8003326:	4616      	mov	r6, r2
 8003328:	fbb5 f1f3 	udiv	r1, r5, r3
 800332c:	fb03 5711 	mls	r7, r3, r1, r5
 8003330:	5dc7      	ldrb	r7, [r0, r7]
 8003332:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003336:	462f      	mov	r7, r5
 8003338:	42bb      	cmp	r3, r7
 800333a:	460d      	mov	r5, r1
 800333c:	d9f4      	bls.n	8003328 <_printf_i+0x110>
 800333e:	2b08      	cmp	r3, #8
 8003340:	d10b      	bne.n	800335a <_printf_i+0x142>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	07df      	lsls	r7, r3, #31
 8003346:	d508      	bpl.n	800335a <_printf_i+0x142>
 8003348:	6923      	ldr	r3, [r4, #16]
 800334a:	6861      	ldr	r1, [r4, #4]
 800334c:	4299      	cmp	r1, r3
 800334e:	bfde      	ittt	le
 8003350:	2330      	movle	r3, #48	@ 0x30
 8003352:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003356:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800335a:	1b92      	subs	r2, r2, r6
 800335c:	6122      	str	r2, [r4, #16]
 800335e:	464b      	mov	r3, r9
 8003360:	4621      	mov	r1, r4
 8003362:	4640      	mov	r0, r8
 8003364:	f8cd a000 	str.w	sl, [sp]
 8003368:	aa03      	add	r2, sp, #12
 800336a:	f7ff fee3 	bl	8003134 <_printf_common>
 800336e:	3001      	adds	r0, #1
 8003370:	d14a      	bne.n	8003408 <_printf_i+0x1f0>
 8003372:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003376:	b004      	add	sp, #16
 8003378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	f043 0320 	orr.w	r3, r3, #32
 8003382:	6023      	str	r3, [r4, #0]
 8003384:	2778      	movs	r7, #120	@ 0x78
 8003386:	4832      	ldr	r0, [pc, #200]	@ (8003450 <_printf_i+0x238>)
 8003388:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	6831      	ldr	r1, [r6, #0]
 8003390:	061f      	lsls	r7, r3, #24
 8003392:	f851 5b04 	ldr.w	r5, [r1], #4
 8003396:	d402      	bmi.n	800339e <_printf_i+0x186>
 8003398:	065f      	lsls	r7, r3, #25
 800339a:	bf48      	it	mi
 800339c:	b2ad      	uxthmi	r5, r5
 800339e:	6031      	str	r1, [r6, #0]
 80033a0:	07d9      	lsls	r1, r3, #31
 80033a2:	bf44      	itt	mi
 80033a4:	f043 0320 	orrmi.w	r3, r3, #32
 80033a8:	6023      	strmi	r3, [r4, #0]
 80033aa:	b11d      	cbz	r5, 80033b4 <_printf_i+0x19c>
 80033ac:	2310      	movs	r3, #16
 80033ae:	e7ad      	b.n	800330c <_printf_i+0xf4>
 80033b0:	4826      	ldr	r0, [pc, #152]	@ (800344c <_printf_i+0x234>)
 80033b2:	e7e9      	b.n	8003388 <_printf_i+0x170>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	f023 0320 	bic.w	r3, r3, #32
 80033ba:	6023      	str	r3, [r4, #0]
 80033bc:	e7f6      	b.n	80033ac <_printf_i+0x194>
 80033be:	4616      	mov	r6, r2
 80033c0:	e7bd      	b.n	800333e <_printf_i+0x126>
 80033c2:	6833      	ldr	r3, [r6, #0]
 80033c4:	6825      	ldr	r5, [r4, #0]
 80033c6:	1d18      	adds	r0, r3, #4
 80033c8:	6961      	ldr	r1, [r4, #20]
 80033ca:	6030      	str	r0, [r6, #0]
 80033cc:	062e      	lsls	r6, r5, #24
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	d501      	bpl.n	80033d6 <_printf_i+0x1be>
 80033d2:	6019      	str	r1, [r3, #0]
 80033d4:	e002      	b.n	80033dc <_printf_i+0x1c4>
 80033d6:	0668      	lsls	r0, r5, #25
 80033d8:	d5fb      	bpl.n	80033d2 <_printf_i+0x1ba>
 80033da:	8019      	strh	r1, [r3, #0]
 80033dc:	2300      	movs	r3, #0
 80033de:	4616      	mov	r6, r2
 80033e0:	6123      	str	r3, [r4, #16]
 80033e2:	e7bc      	b.n	800335e <_printf_i+0x146>
 80033e4:	6833      	ldr	r3, [r6, #0]
 80033e6:	2100      	movs	r1, #0
 80033e8:	1d1a      	adds	r2, r3, #4
 80033ea:	6032      	str	r2, [r6, #0]
 80033ec:	681e      	ldr	r6, [r3, #0]
 80033ee:	6862      	ldr	r2, [r4, #4]
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 f893 	bl	800351c <memchr>
 80033f6:	b108      	cbz	r0, 80033fc <_printf_i+0x1e4>
 80033f8:	1b80      	subs	r0, r0, r6
 80033fa:	6060      	str	r0, [r4, #4]
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	6123      	str	r3, [r4, #16]
 8003400:	2300      	movs	r3, #0
 8003402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003406:	e7aa      	b.n	800335e <_printf_i+0x146>
 8003408:	4632      	mov	r2, r6
 800340a:	4649      	mov	r1, r9
 800340c:	4640      	mov	r0, r8
 800340e:	6923      	ldr	r3, [r4, #16]
 8003410:	47d0      	blx	sl
 8003412:	3001      	adds	r0, #1
 8003414:	d0ad      	beq.n	8003372 <_printf_i+0x15a>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	079b      	lsls	r3, r3, #30
 800341a:	d413      	bmi.n	8003444 <_printf_i+0x22c>
 800341c:	68e0      	ldr	r0, [r4, #12]
 800341e:	9b03      	ldr	r3, [sp, #12]
 8003420:	4298      	cmp	r0, r3
 8003422:	bfb8      	it	lt
 8003424:	4618      	movlt	r0, r3
 8003426:	e7a6      	b.n	8003376 <_printf_i+0x15e>
 8003428:	2301      	movs	r3, #1
 800342a:	4632      	mov	r2, r6
 800342c:	4649      	mov	r1, r9
 800342e:	4640      	mov	r0, r8
 8003430:	47d0      	blx	sl
 8003432:	3001      	adds	r0, #1
 8003434:	d09d      	beq.n	8003372 <_printf_i+0x15a>
 8003436:	3501      	adds	r5, #1
 8003438:	68e3      	ldr	r3, [r4, #12]
 800343a:	9903      	ldr	r1, [sp, #12]
 800343c:	1a5b      	subs	r3, r3, r1
 800343e:	42ab      	cmp	r3, r5
 8003440:	dcf2      	bgt.n	8003428 <_printf_i+0x210>
 8003442:	e7eb      	b.n	800341c <_printf_i+0x204>
 8003444:	2500      	movs	r5, #0
 8003446:	f104 0619 	add.w	r6, r4, #25
 800344a:	e7f5      	b.n	8003438 <_printf_i+0x220>
 800344c:	08003653 	.word	0x08003653
 8003450:	08003664 	.word	0x08003664

08003454 <__malloc_lock>:
 8003454:	4801      	ldr	r0, [pc, #4]	@ (800345c <__malloc_lock+0x8>)
 8003456:	f7ff bc71 	b.w	8002d3c <__retarget_lock_acquire_recursive>
 800345a:	bf00      	nop
 800345c:	20000250 	.word	0x20000250

08003460 <__malloc_unlock>:
 8003460:	4801      	ldr	r0, [pc, #4]	@ (8003468 <__malloc_unlock+0x8>)
 8003462:	f7ff bc6c 	b.w	8002d3e <__retarget_lock_release_recursive>
 8003466:	bf00      	nop
 8003468:	20000250 	.word	0x20000250

0800346c <_realloc_r>:
 800346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003470:	4607      	mov	r7, r0
 8003472:	4614      	mov	r4, r2
 8003474:	460d      	mov	r5, r1
 8003476:	b921      	cbnz	r1, 8003482 <_realloc_r+0x16>
 8003478:	4611      	mov	r1, r2
 800347a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800347e:	f7ff bdd9 	b.w	8003034 <_malloc_r>
 8003482:	b92a      	cbnz	r2, 8003490 <_realloc_r+0x24>
 8003484:	f000 f866 	bl	8003554 <_free_r>
 8003488:	4625      	mov	r5, r4
 800348a:	4628      	mov	r0, r5
 800348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003490:	f000 f8a8 	bl	80035e4 <_malloc_usable_size_r>
 8003494:	4284      	cmp	r4, r0
 8003496:	4606      	mov	r6, r0
 8003498:	d802      	bhi.n	80034a0 <_realloc_r+0x34>
 800349a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800349e:	d8f4      	bhi.n	800348a <_realloc_r+0x1e>
 80034a0:	4621      	mov	r1, r4
 80034a2:	4638      	mov	r0, r7
 80034a4:	f7ff fdc6 	bl	8003034 <_malloc_r>
 80034a8:	4680      	mov	r8, r0
 80034aa:	b908      	cbnz	r0, 80034b0 <_realloc_r+0x44>
 80034ac:	4645      	mov	r5, r8
 80034ae:	e7ec      	b.n	800348a <_realloc_r+0x1e>
 80034b0:	42b4      	cmp	r4, r6
 80034b2:	4622      	mov	r2, r4
 80034b4:	4629      	mov	r1, r5
 80034b6:	bf28      	it	cs
 80034b8:	4632      	movcs	r2, r6
 80034ba:	f000 f83d 	bl	8003538 <memcpy>
 80034be:	4629      	mov	r1, r5
 80034c0:	4638      	mov	r0, r7
 80034c2:	f000 f847 	bl	8003554 <_free_r>
 80034c6:	e7f1      	b.n	80034ac <_realloc_r+0x40>

080034c8 <memmove>:
 80034c8:	4288      	cmp	r0, r1
 80034ca:	b510      	push	{r4, lr}
 80034cc:	eb01 0402 	add.w	r4, r1, r2
 80034d0:	d902      	bls.n	80034d8 <memmove+0x10>
 80034d2:	4284      	cmp	r4, r0
 80034d4:	4623      	mov	r3, r4
 80034d6:	d807      	bhi.n	80034e8 <memmove+0x20>
 80034d8:	1e43      	subs	r3, r0, #1
 80034da:	42a1      	cmp	r1, r4
 80034dc:	d008      	beq.n	80034f0 <memmove+0x28>
 80034de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034e6:	e7f8      	b.n	80034da <memmove+0x12>
 80034e8:	4601      	mov	r1, r0
 80034ea:	4402      	add	r2, r0
 80034ec:	428a      	cmp	r2, r1
 80034ee:	d100      	bne.n	80034f2 <memmove+0x2a>
 80034f0:	bd10      	pop	{r4, pc}
 80034f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034fa:	e7f7      	b.n	80034ec <memmove+0x24>

080034fc <_sbrk_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	2300      	movs	r3, #0
 8003500:	4d05      	ldr	r5, [pc, #20]	@ (8003518 <_sbrk_r+0x1c>)
 8003502:	4604      	mov	r4, r0
 8003504:	4608      	mov	r0, r1
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	f7fd f8c8 	bl	800069c <_sbrk>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d102      	bne.n	8003516 <_sbrk_r+0x1a>
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	b103      	cbz	r3, 8003516 <_sbrk_r+0x1a>
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	bd38      	pop	{r3, r4, r5, pc}
 8003518:	2000025c 	.word	0x2000025c

0800351c <memchr>:
 800351c:	4603      	mov	r3, r0
 800351e:	b510      	push	{r4, lr}
 8003520:	b2c9      	uxtb	r1, r1
 8003522:	4402      	add	r2, r0
 8003524:	4293      	cmp	r3, r2
 8003526:	4618      	mov	r0, r3
 8003528:	d101      	bne.n	800352e <memchr+0x12>
 800352a:	2000      	movs	r0, #0
 800352c:	e003      	b.n	8003536 <memchr+0x1a>
 800352e:	7804      	ldrb	r4, [r0, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	428c      	cmp	r4, r1
 8003534:	d1f6      	bne.n	8003524 <memchr+0x8>
 8003536:	bd10      	pop	{r4, pc}

08003538 <memcpy>:
 8003538:	440a      	add	r2, r1
 800353a:	4291      	cmp	r1, r2
 800353c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003540:	d100      	bne.n	8003544 <memcpy+0xc>
 8003542:	4770      	bx	lr
 8003544:	b510      	push	{r4, lr}
 8003546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800354a:	4291      	cmp	r1, r2
 800354c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003550:	d1f9      	bne.n	8003546 <memcpy+0xe>
 8003552:	bd10      	pop	{r4, pc}

08003554 <_free_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4605      	mov	r5, r0
 8003558:	2900      	cmp	r1, #0
 800355a:	d040      	beq.n	80035de <_free_r+0x8a>
 800355c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003560:	1f0c      	subs	r4, r1, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bfb8      	it	lt
 8003566:	18e4      	addlt	r4, r4, r3
 8003568:	f7ff ff74 	bl	8003454 <__malloc_lock>
 800356c:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <_free_r+0x8c>)
 800356e:	6813      	ldr	r3, [r2, #0]
 8003570:	b933      	cbnz	r3, 8003580 <_free_r+0x2c>
 8003572:	6063      	str	r3, [r4, #4]
 8003574:	6014      	str	r4, [r2, #0]
 8003576:	4628      	mov	r0, r5
 8003578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800357c:	f7ff bf70 	b.w	8003460 <__malloc_unlock>
 8003580:	42a3      	cmp	r3, r4
 8003582:	d908      	bls.n	8003596 <_free_r+0x42>
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	1821      	adds	r1, r4, r0
 8003588:	428b      	cmp	r3, r1
 800358a:	bf01      	itttt	eq
 800358c:	6819      	ldreq	r1, [r3, #0]
 800358e:	685b      	ldreq	r3, [r3, #4]
 8003590:	1809      	addeq	r1, r1, r0
 8003592:	6021      	streq	r1, [r4, #0]
 8003594:	e7ed      	b.n	8003572 <_free_r+0x1e>
 8003596:	461a      	mov	r2, r3
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b10b      	cbz	r3, 80035a0 <_free_r+0x4c>
 800359c:	42a3      	cmp	r3, r4
 800359e:	d9fa      	bls.n	8003596 <_free_r+0x42>
 80035a0:	6811      	ldr	r1, [r2, #0]
 80035a2:	1850      	adds	r0, r2, r1
 80035a4:	42a0      	cmp	r0, r4
 80035a6:	d10b      	bne.n	80035c0 <_free_r+0x6c>
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	4401      	add	r1, r0
 80035ac:	1850      	adds	r0, r2, r1
 80035ae:	4283      	cmp	r3, r0
 80035b0:	6011      	str	r1, [r2, #0]
 80035b2:	d1e0      	bne.n	8003576 <_free_r+0x22>
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4408      	add	r0, r1
 80035ba:	6010      	str	r0, [r2, #0]
 80035bc:	6053      	str	r3, [r2, #4]
 80035be:	e7da      	b.n	8003576 <_free_r+0x22>
 80035c0:	d902      	bls.n	80035c8 <_free_r+0x74>
 80035c2:	230c      	movs	r3, #12
 80035c4:	602b      	str	r3, [r5, #0]
 80035c6:	e7d6      	b.n	8003576 <_free_r+0x22>
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	1821      	adds	r1, r4, r0
 80035cc:	428b      	cmp	r3, r1
 80035ce:	bf01      	itttt	eq
 80035d0:	6819      	ldreq	r1, [r3, #0]
 80035d2:	685b      	ldreq	r3, [r3, #4]
 80035d4:	1809      	addeq	r1, r1, r0
 80035d6:	6021      	streq	r1, [r4, #0]
 80035d8:	6063      	str	r3, [r4, #4]
 80035da:	6054      	str	r4, [r2, #4]
 80035dc:	e7cb      	b.n	8003576 <_free_r+0x22>
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	20000258 	.word	0x20000258

080035e4 <_malloc_usable_size_r>:
 80035e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035e8:	1f18      	subs	r0, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bfbc      	itt	lt
 80035ee:	580b      	ldrlt	r3, [r1, r0]
 80035f0:	18c0      	addlt	r0, r0, r3
 80035f2:	4770      	bx	lr

080035f4 <_init>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr

08003600 <_fini>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	bf00      	nop
 8003604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003606:	bc08      	pop	{r3}
 8003608:	469e      	mov	lr, r3
 800360a:	4770      	bx	lr
