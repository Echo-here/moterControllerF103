
echo20250614-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005408  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005514  08005514  00006514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056cc  080056cc  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080056cc  080056cc  00007068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080056cc  080056cc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056cc  080056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056d0  080056d0  000066d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080056d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  0800573c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  0800573c  000072b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6fd  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002425  00000000  00000000  0001578e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00017bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5d  00000000  00000000  00018a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019464  00000000  00000000  000195a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100cd  00000000  00000000  00032a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009179a  00000000  00000000  00042ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004534  00000000  00000000  000d42b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d87e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080054fc 	.word	0x080054fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080054fc 	.word	0x080054fc

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 1000);
 8000518:	1d39      	adds	r1, r7, #4
 800051a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800051e:	2201      	movs	r2, #1
 8000520:	4808      	ldr	r0, [pc, #32]	@ (8000544 <__io_putchar+0x34>)
 8000522:	f003 fa13 	bl	800394c <HAL_UART_Transmit>
  if (ch == '\n')
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0a      	cmp	r3, #10
 800052a:	d106      	bne.n	800053a <__io_putchar+0x2a>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 1000);
 800052c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000530:	2201      	movs	r2, #1
 8000532:	4905      	ldr	r1, [pc, #20]	@ (8000548 <__io_putchar+0x38>)
 8000534:	4803      	ldr	r0, [pc, #12]	@ (8000544 <__io_putchar+0x34>)
 8000536:	f003 fa09 	bl	800394c <HAL_UART_Transmit>
  return ch;
 800053a:	687b      	ldr	r3, [r7, #4]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200000fc 	.word	0x200000fc
 8000548:	08005514 	.word	0x08005514

0800054c <HAL_UART_RxCpltCallback>:
  * @brief  UART 수신 완료 시 호출되는 콜백 함수
  * @param  huart: UART 핸들
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a53      	ldr	r2, [pc, #332]	@ (80006a8 <HAL_UART_RxCpltCallback+0x15c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	f040 80a0 	bne.w	80006a0 <HAL_UART_RxCpltCallback+0x154>
    {
        if (rx_data == '\n' || rx_data == '\r')
 8000560:	4b52      	ldr	r3, [pc, #328]	@ (80006ac <HAL_UART_RxCpltCallback+0x160>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b0a      	cmp	r3, #10
 8000566:	d004      	beq.n	8000572 <HAL_UART_RxCpltCallback+0x26>
 8000568:	4b50      	ldr	r3, [pc, #320]	@ (80006ac <HAL_UART_RxCpltCallback+0x160>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b0d      	cmp	r3, #13
 800056e:	f040 8083 	bne.w	8000678 <HAL_UART_RxCpltCallback+0x12c>
        {
            rx_buffer[rx_index] = '\0';
 8000572:	4b4f      	ldr	r3, [pc, #316]	@ (80006b0 <HAL_UART_RxCpltCallback+0x164>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	4b4e      	ldr	r3, [pc, #312]	@ (80006b4 <HAL_UART_RxCpltCallback+0x168>)
 800057a:	2100      	movs	r1, #0
 800057c:	5499      	strb	r1, [r3, r2]

            // --- 단일 명령 (예: "s") ---
            if (rx_index == 1 && rx_buffer[0] == 's')
 800057e:	4b4c      	ldr	r3, [pc, #304]	@ (80006b0 <HAL_UART_RxCpltCallback+0x164>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d10d      	bne.n	80005a2 <HAL_UART_RxCpltCallback+0x56>
 8000586:	4b4b      	ldr	r3, [pc, #300]	@ (80006b4 <HAL_UART_RxCpltCallback+0x168>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b73      	cmp	r3, #115	@ 0x73
 800058c:	d109      	bne.n	80005a2 <HAL_UART_RxCpltCallback+0x56>
            {
                Stop_Motor();
 800058e:	f000 f901 	bl	8000794 <Stop_Motor>
                HAL_UART_Transmit(&huart2,
 8000592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000596:	2213      	movs	r2, #19
 8000598:	4947      	ldr	r1, [pc, #284]	@ (80006b8 <HAL_UART_RxCpltCallback+0x16c>)
 800059a:	4848      	ldr	r0, [pc, #288]	@ (80006bc <HAL_UART_RxCpltCallback+0x170>)
 800059c:	f003 f9d6 	bl	800394c <HAL_UART_Transmit>
            {
 80005a0:	e061      	b.n	8000666 <HAL_UART_RxCpltCallback+0x11a>
                    (uint8_t*)"Stop CMD received\r\n", 19, HAL_MAX_DELAY);
            }
            // --- 일반 모터 명령 (예: "l f 3") ---
            else if (rx_index >= 5)
 80005a2:	4b43      	ldr	r3, [pc, #268]	@ (80006b0 <HAL_UART_RxCpltCallback+0x164>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d95d      	bls.n	8000666 <HAL_UART_RxCpltCallback+0x11a>
            {
                char motor = rx_buffer[0];   // 'l' or 'r'
 80005aa:	4b42      	ldr	r3, [pc, #264]	@ (80006b4 <HAL_UART_RxCpltCallback+0x168>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	75fb      	strb	r3, [r7, #23]
                char dir   = rx_buffer[2];   // 'f' or 'b'
 80005b0:	4b40      	ldr	r3, [pc, #256]	@ (80006b4 <HAL_UART_RxCpltCallback+0x168>)
 80005b2:	789b      	ldrb	r3, [r3, #2]
 80005b4:	75bb      	strb	r3, [r7, #22]
                int speed  = atoi(&rx_buffer[4]); // duty (0~9)
 80005b6:	4842      	ldr	r0, [pc, #264]	@ (80006c0 <HAL_UART_RxCpltCallback+0x174>)
 80005b8:	f003 ffe2 	bl	8004580 <atoi>
 80005bc:	6138      	str	r0, [r7, #16]

                if ((motor == 'l' || motor == 'r') &&
 80005be:	7dfb      	ldrb	r3, [r7, #23]
 80005c0:	2b6c      	cmp	r3, #108	@ 0x6c
 80005c2:	d002      	beq.n	80005ca <HAL_UART_RxCpltCallback+0x7e>
 80005c4:	7dfb      	ldrb	r3, [r7, #23]
 80005c6:	2b72      	cmp	r3, #114	@ 0x72
 80005c8:	d146      	bne.n	8000658 <HAL_UART_RxCpltCallback+0x10c>
 80005ca:	7dbb      	ldrb	r3, [r7, #22]
 80005cc:	2b66      	cmp	r3, #102	@ 0x66
 80005ce:	d002      	beq.n	80005d6 <HAL_UART_RxCpltCallback+0x8a>
                    (dir == 'f' || dir == 'b') &&
 80005d0:	7dbb      	ldrb	r3, [r7, #22]
 80005d2:	2b62      	cmp	r3, #98	@ 0x62
 80005d4:	d140      	bne.n	8000658 <HAL_UART_RxCpltCallback+0x10c>
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db3d      	blt.n	8000658 <HAL_UART_RxCpltCallback+0x10c>
                    (speed >= 0 && speed <= 9))
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	2b09      	cmp	r3, #9
 80005e0:	dc3a      	bgt.n	8000658 <HAL_UART_RxCpltCallback+0x10c>
                {
                    uint16_t duty = speed * PWM_DUTY_SCALE;
 80005e2:	6938      	ldr	r0, [r7, #16]
 80005e4:	f7ff ff20 	bl	8000428 <__aeabi_i2f>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4936      	ldr	r1, [pc, #216]	@ (80006c4 <HAL_UART_RxCpltCallback+0x178>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdad 	bl	800014c <__aeabi_fmul>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff6b 	bl	80004d0 <__aeabi_f2uiz>
 80005fa:	4603      	mov	r3, r0
 80005fc:	81fb      	strh	r3, [r7, #14]

                    if (motor == 'l')  // Left Motor
 80005fe:	7dfb      	ldrb	r3, [r7, #23]
 8000600:	2b6c      	cmp	r3, #108	@ 0x6c
 8000602:	d10f      	bne.n	8000624 <HAL_UART_RxCpltCallback+0xd8>
                    {
                        target_pwm_left = duty;
 8000604:	4a30      	ldr	r2, [pc, #192]	@ (80006c8 <HAL_UART_RxCpltCallback+0x17c>)
 8000606:	89fb      	ldrh	r3, [r7, #14]
 8000608:	8013      	strh	r3, [r2, #0]
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,
 800060a:	7dbb      	ldrb	r3, [r7, #22]
 800060c:	2b66      	cmp	r3, #102	@ 0x66
 800060e:	bf14      	ite	ne
 8000610:	2301      	movne	r3, #1
 8000612:	2300      	moveq	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800061c:	482b      	ldr	r0, [pc, #172]	@ (80006cc <HAL_UART_RxCpltCallback+0x180>)
 800061e:	f001 fe33 	bl	8002288 <HAL_GPIO_WritePin>
 8000622:	e011      	b.n	8000648 <HAL_UART_RxCpltCallback+0xfc>
                            (dir == 'f') ? GPIO_PIN_RESET : GPIO_PIN_SET);

                    }
                    else if (motor == 'r') // Right Motor
 8000624:	7dfb      	ldrb	r3, [r7, #23]
 8000626:	2b72      	cmp	r3, #114	@ 0x72
 8000628:	d10e      	bne.n	8000648 <HAL_UART_RxCpltCallback+0xfc>
                    {
                        target_pwm_right = duty;
 800062a:	4a29      	ldr	r2, [pc, #164]	@ (80006d0 <HAL_UART_RxCpltCallback+0x184>)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	8013      	strh	r3, [r2, #0]
                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,
 8000630:	7dbb      	ldrb	r3, [r7, #22]
 8000632:	2b66      	cmp	r3, #102	@ 0x66
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000642:	4824      	ldr	r0, [pc, #144]	@ (80006d4 <HAL_UART_RxCpltCallback+0x188>)
 8000644:	f001 fe20 	bl	8002288 <HAL_GPIO_WritePin>
                            (dir == 'f') ? GPIO_PIN_RESET : GPIO_PIN_SET);
                    }
                    HAL_UART_Transmit(&huart2,(uint8_t*)"debug\r\n", 7, HAL_MAX_DELAY);
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064c:	2207      	movs	r2, #7
 800064e:	4922      	ldr	r1, [pc, #136]	@ (80006d8 <HAL_UART_RxCpltCallback+0x18c>)
 8000650:	481a      	ldr	r0, [pc, #104]	@ (80006bc <HAL_UART_RxCpltCallback+0x170>)
 8000652:	f003 f97b 	bl	800394c <HAL_UART_Transmit>
                {
 8000656:	e006      	b.n	8000666 <HAL_UART_RxCpltCallback+0x11a>
                }
                else
                {
                    HAL_UART_Transmit(&huart2,
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800065c:	220d      	movs	r2, #13
 800065e:	491f      	ldr	r1, [pc, #124]	@ (80006dc <HAL_UART_RxCpltCallback+0x190>)
 8000660:	4816      	ldr	r0, [pc, #88]	@ (80006bc <HAL_UART_RxCpltCallback+0x170>)
 8000662:	f003 f973 	bl	800394c <HAL_UART_Transmit>
                        (uint8_t*)"Invalid CMD\r\n", 13, HAL_MAX_DELAY);
                }
            }

            // 버퍼 초기화
            rx_index = 0;
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <HAL_UART_RxCpltCallback+0x164>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, sizeof(rx_buffer));
 800066c:	2214      	movs	r2, #20
 800066e:	2100      	movs	r1, #0
 8000670:	4810      	ldr	r0, [pc, #64]	@ (80006b4 <HAL_UART_RxCpltCallback+0x168>)
 8000672:	f004 f8e1 	bl	8004838 <memset>
 8000676:	e00e      	b.n	8000696 <HAL_UART_RxCpltCallback+0x14a>
        }
        else
        {
            if (rx_index < sizeof(rx_buffer) - 1)
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <HAL_UART_RxCpltCallback+0x164>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b12      	cmp	r3, #18
 800067e:	d80a      	bhi.n	8000696 <HAL_UART_RxCpltCallback+0x14a>
                rx_buffer[rx_index++] = rx_data;
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <HAL_UART_RxCpltCallback+0x164>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	b2d1      	uxtb	r1, r2
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <HAL_UART_RxCpltCallback+0x164>)
 800068a:	7011      	strb	r1, [r2, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <HAL_UART_RxCpltCallback+0x160>)
 8000690:	7819      	ldrb	r1, [r3, #0]
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <HAL_UART_RxCpltCallback+0x168>)
 8000694:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	4904      	ldr	r1, [pc, #16]	@ (80006ac <HAL_UART_RxCpltCallback+0x160>)
 800069a:	4808      	ldr	r0, [pc, #32]	@ (80006bc <HAL_UART_RxCpltCallback+0x170>)
 800069c:	f003 f9e1 	bl	8003a62 <HAL_UART_Receive_IT>
    }
}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40004400 	.word	0x40004400
 80006ac:	20000159 	.word	0x20000159
 80006b0:	20000158 	.word	0x20000158
 80006b4:	20000144 	.word	0x20000144
 80006b8:	08005518 	.word	0x08005518
 80006bc:	200000fc 	.word	0x200000fc
 80006c0:	20000148 	.word	0x20000148
 80006c4:	409ccccd 	.word	0x409ccccd
 80006c8:	2000015a 	.word	0x2000015a
 80006cc:	40010800 	.word	0x40010800
 80006d0:	2000015c 	.word	0x2000015c
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	0800552c 	.word	0x0800552c
 80006dc:	08005534 	.word	0x08005534

080006e0 <Transform_PWM>:

/**
  * @brief  목표 PWM 값에 도달할 때까지 현재 PWM 값을 점진적으로 변경
  * @retval None
  */
void Transform_PWM(){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	// 왼쪽 모터 PWM 제어
	if (current_pwm_left < target_pwm_left){
 80006e4:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <Transform_PWM+0xa0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <Transform_PWM+0xa4>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d207      	bcs.n	8000704 <Transform_PWM+0x24>
		current_pwm_left++;
 80006f4:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <Transform_PWM+0xa0>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	3301      	adds	r3, #1
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <Transform_PWM+0xa0>)
 8000700:	801a      	strh	r2, [r3, #0]
 8000702:	e00e      	b.n	8000722 <Transform_PWM+0x42>
	}
	else if (current_pwm_left > target_pwm_left){
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <Transform_PWM+0xa0>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <Transform_PWM+0xa4>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	b29b      	uxth	r3, r3
 8000710:	429a      	cmp	r2, r3
 8000712:	d906      	bls.n	8000722 <Transform_PWM+0x42>
		current_pwm_left--;
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <Transform_PWM+0xa0>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	3b01      	subs	r3, #1
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <Transform_PWM+0xa0>)
 8000720:	801a      	strh	r2, [r3, #0]
	}

	// 오른쪽 모터 PWM 제어
	if (current_pwm_right < target_pwm_right){
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <Transform_PWM+0xa8>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <Transform_PWM+0xac>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	b29b      	uxth	r3, r3
 800072e:	429a      	cmp	r2, r3
 8000730:	d207      	bcs.n	8000742 <Transform_PWM+0x62>
		current_pwm_right++;
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <Transform_PWM+0xa8>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	3301      	adds	r3, #1
 800073a:	b29a      	uxth	r2, r3
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <Transform_PWM+0xa8>)
 800073e:	801a      	strh	r2, [r3, #0]
 8000740:	e00e      	b.n	8000760 <Transform_PWM+0x80>
	}
	else if (current_pwm_right > target_pwm_right){
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <Transform_PWM+0xa8>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <Transform_PWM+0xac>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
 800074e:	429a      	cmp	r2, r3
 8000750:	d906      	bls.n	8000760 <Transform_PWM+0x80>
		current_pwm_right--;
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <Transform_PWM+0xa8>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	b29b      	uxth	r3, r3
 8000758:	3b01      	subs	r3, #1
 800075a:	b29a      	uxth	r2, r3
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <Transform_PWM+0xa8>)
 800075e:	801a      	strh	r2, [r3, #0]
	}

	// 계산된 PWM 값을 각 모터 채널에 적용
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, current_pwm_left);
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <Transform_PWM+0xa0>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <Transform_PWM+0xb0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, current_pwm_right);
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <Transform_PWM+0xa8>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	b29a      	uxth	r2, r3
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <Transform_PWM+0xb0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	2000015e 	.word	0x2000015e
 8000784:	2000015a 	.word	0x2000015a
 8000788:	20000160 	.word	0x20000160
 800078c:	2000015c 	.word	0x2000015c
 8000790:	200000b4 	.word	0x200000b4

08000794 <Stop_Motor>:
/**
  * @brief  모든 모터를 즉시 정지
  * @retval None
  */
void Stop_Motor(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  // 양쪽 모터의 PWM을 0으로 설정하여 정지
	target_pwm_right = 0;
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <Stop_Motor+0x18>)
 800079a:	2200      	movs	r2, #0
 800079c:	801a      	strh	r2, [r3, #0]
	target_pwm_left = 0;
 800079e:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <Stop_Motor+0x1c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	801a      	strh	r2, [r3, #0]

  // 필요 시 후속 처리 (예: 방향핀 LOW, 브레이크)
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	2000015c 	.word	0x2000015c
 80007b0:	2000015a 	.word	0x2000015a

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fc0b 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f847 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f96b 	bl	8000a9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007c6:	f000 f93f 	bl	8000a48 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007ca:	f000 f8db 	bl	8000984 <MX_TIM2_Init>
  MX_ADC1_Init();
 80007ce:	f000 f89b 	bl	8000908 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // 왼쪽, 오른쪽 모터 PWM 채널 시작
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Left Motor PWM
 80007d2:	2100      	movs	r1, #0
 80007d4:	4819      	ldr	r0, [pc, #100]	@ (800083c <main+0x88>)
 80007d6:	f002 fb5d 	bl	8002e94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Right Motor PWM
 80007da:	2104      	movs	r1, #4
 80007dc:	4817      	ldr	r0, [pc, #92]	@ (800083c <main+0x88>)
 80007de:	f002 fb59 	bl	8002e94 <HAL_TIM_PWM_Start>

  // UART 수신 인터럽트 시작 (1바이트씩 수신)
  HAL_UART_Receive_IT(&huart2, &rx_data, 1); // UART Receive 1 byte
 80007e2:	2201      	movs	r2, #1
 80007e4:	4916      	ldr	r1, [pc, #88]	@ (8000840 <main+0x8c>)
 80007e6:	4817      	ldr	r0, [pc, #92]	@ (8000844 <main+0x90>)
 80007e8:	f003 f93b 	bl	8003a62 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 80007ec:	4816      	ldr	r0, [pc, #88]	@ (8000848 <main+0x94>)
 80007ee:	f000 ff03 	bl	80015f8 <HAL_ADC_Start_IT>
  // 엔코더 입력을 위한 타이머 입력 캡처 시작

  // 초기 PWM 값을 0으로 설정
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <main+0x88>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <main+0x88>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2200      	movs	r2, #0
 8000800:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000802:	4811      	ldr	r0, [pc, #68]	@ (8000848 <main+0x94>)
 8000804:	f001 f94e 	bl	8001aa4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8000808:	480f      	ldr	r0, [pc, #60]	@ (8000848 <main+0x94>)
 800080a:	f000 fd41 	bl	8001290 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 800080e:	210a      	movs	r1, #10
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <main+0x94>)
 8000812:	f000 fdeb 	bl	80013ec <HAL_ADC_PollForConversion>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d108      	bne.n	800082e <main+0x7a>
	        int adc_value = HAL_ADC_GetValue(&hadc1);
 800081c:	480a      	ldr	r0, [pc, #40]	@ (8000848 <main+0x94>)
 800081e:	f000 ffa1 	bl	8001764 <HAL_ADC_GetValue>
 8000822:	4603      	mov	r3, r0
 8000824:	607b      	str	r3, [r7, #4]
	        printf("ADC_VALUE = %d\n\n", adc_value);
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	4808      	ldr	r0, [pc, #32]	@ (800084c <main+0x98>)
 800082a:	f003 fff3 	bl	8004814 <iprintf>
	  }

	  Transform_PWM();
 800082e:	f7ff ff57 	bl	80006e0 <Transform_PWM>
	  HAL_Delay(10); // 딜레이를 줘서 천천히 변경 (5ms 조절 가능)
 8000832:	200a      	movs	r0, #10
 8000834:	f000 fc30 	bl	8001098 <HAL_Delay>
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000838:	e7e9      	b.n	800080e <main+0x5a>
 800083a:	bf00      	nop
 800083c:	200000b4 	.word	0x200000b4
 8000840:	20000159 	.word	0x20000159
 8000844:	200000fc 	.word	0x200000fc
 8000848:	20000084 	.word	0x20000084
 800084c:	08005544 	.word	0x08005544

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800085a:	2228      	movs	r2, #40	@ 0x28
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 ffea 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000884:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088e:	2301      	movs	r3, #1
 8000890:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800089c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fd28 	bl	80022fc <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008b2:	f000 f983 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 ff94 	bl	8002800 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008de:	f000 f96d 	bl	8000bbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008e2:	2302      	movs	r3, #2
 80008e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 f914 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008fa:	f000 f95f 	bl	8000bbc <Error_Handler>
  }
}
 80008fe:	bf00      	nop
 8000900:	3750      	adds	r7, #80	@ 0x50
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_ADC1_Init+0x74>)
 800091a:	4a19      	ldr	r2, [pc, #100]	@ (8000980 <MX_ADC1_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_ADC1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_ADC1_Init+0x74>)
 8000926:	2201      	movs	r2, #1
 8000928:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_ADC1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_ADC1_Init+0x74>)
 8000932:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000936:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000938:	4b10      	ldr	r3, [pc, #64]	@ (800097c <MX_ADC1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_ADC1_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000944:	480d      	ldr	r0, [pc, #52]	@ (800097c <MX_ADC1_Init+0x74>)
 8000946:	f000 fbcb 	bl	80010e0 <HAL_ADC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000950:	f000 f934 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000954:	2310      	movs	r3, #16
 8000956:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000958:	2301      	movs	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800095c:	2307      	movs	r3, #7
 800095e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_ADC1_Init+0x74>)
 8000966:	f000 ff09 	bl	800177c <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000970:	f000 f924 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000084 	.word	0x20000084
 8000980:	40012400 	.word	0x40012400

08000984 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a6:	4b27      	ldr	r3, [pc, #156]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 80009a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80009ae:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 80009b0:	2247      	movs	r2, #71	@ 0x47
 80009b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80009ba:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 80009bc:	2231      	movs	r2, #49	@ 0x31
 80009be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009cc:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 80009ce:	f002 fa11 	bl	8002df4 <HAL_TIM_PWM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f8f0 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	4619      	mov	r1, r3
 80009ea:	4816      	ldr	r0, [pc, #88]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 80009ec:	f002 feee 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80009f6:	f000 f8e1 	bl	8000bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fa:	2360      	movs	r3, #96	@ 0x60
 80009fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 8000a12:	f002 fbd1 	bl	80031b8 <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a1c:	f000 f8ce 	bl	8000bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2204      	movs	r2, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 8000a28:	f002 fbc6 	bl	80031b8 <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a32:	f000 f8c3 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a36:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <MX_TIM2_Init+0xc0>)
 8000a38:	f000 f93a 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	@ 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000b4 	.word	0x200000b4

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a80:	f002 ff14 	bl	80038ac <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 f897 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000fc 	.word	0x200000fc
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac8:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a36      	ldr	r2, [pc, #216]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ace:	f043 0320 	orr.w	r3, r3, #32
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b34      	ldr	r3, [pc, #208]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0320 	and.w	r3, r3, #32
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a30      	ldr	r2, [pc, #192]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b28      	ldr	r3, [pc, #160]	@ (8000ba8 <MX_GPIO_Init+0x10c>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|moter_left_dir_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8000b16:	4825      	ldr	r0, [pc, #148]	@ (8000bac <MX_GPIO_Init+0x110>)
 8000b18:	f001 fbb6 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(moter_right_dir_GPIO_Port, moter_right_dir_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b22:	4823      	ldr	r0, [pc, #140]	@ (8000bb0 <MX_GPIO_Init+0x114>)
 8000b24:	f001 fbb0 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin IR_Pin */
  GPIO_InitStruct.Pin = B1_Pin|IR_Pin;
 8000b28:	f242 0301 	movw	r3, #8193	@ 0x2001
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <MX_GPIO_Init+0x118>)
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481e      	ldr	r0, [pc, #120]	@ (8000bb8 <MX_GPIO_Init+0x11c>)
 8000b3e:	f001 fa1f 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin moter_left_dir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|moter_left_dir_Pin;
 8000b42:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8000b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4814      	ldr	r0, [pc, #80]	@ (8000bac <MX_GPIO_Init+0x110>)
 8000b5c:	f001 fa10 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : moter_right_dir_Pin */
  GPIO_InitStruct.Pin = moter_right_dir_Pin;
 8000b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(moter_right_dir_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <MX_GPIO_Init+0x114>)
 8000b7a:	f001 fa01 	bl	8001f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2006      	movs	r0, #6
 8000b84:	f001 f913 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b88:	2006      	movs	r0, #6
 8000b8a:	f001 f92c 	bl	8001de6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2028      	movs	r0, #40	@ 0x28
 8000b94:	f001 f90b 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b98:	2028      	movs	r0, #40	@ 0x28
 8000b9a:	f001 f924 	bl	8001de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	40010c00 	.word	0x40010c00
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	40011000 	.word	0x40011000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <Error_Handler+0x8>

08000bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_MspInit+0x5c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <HAL_MspInit+0x5c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <HAL_MspInit+0x5c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <HAL_MspInit+0x5c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_MspInit+0x60>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <HAL_MspInit+0x60>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010000 	.word	0x40010000

08000c2c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <HAL_ADC_MspInit+0x34>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d10b      	bne.n	8000c56 <HAL_ADC_MspInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_ADC_MspInit+0x38>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_ADC_MspInit+0x38>)
 8000c44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_ADC_MspInit+0x38>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40012400 	.word	0x40012400
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c78:	d113      	bne.n	8000ca2 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_TIM_PWM_MspInit+0x44>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cac <HAL_TIM_PWM_MspInit+0x44>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <HAL_TIM_PWM_MspInit+0x44>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	201c      	movs	r0, #28
 8000c98:	f001 f889 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c9c:	201c      	movs	r0, #28
 8000c9e:	f001 f8a2 	bl	8001de6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cce:	d117      	bne.n	8000d00 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <HAL_TIM_MspPostInit+0x58>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <HAL_TIM_MspPostInit+0x58>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_TIM_MspPostInit+0x58>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = moter_left_Pin|moter_right_Pin;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <HAL_TIM_MspPostInit+0x5c>)
 8000cfc:	f001 f940 	bl	8001f80 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a19      	ldr	r2, [pc, #100]	@ (8000d90 <HAL_UART_MspInit+0x80>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d12b      	bne.n	8000d88 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d30:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_UART_MspInit+0x84>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4a17      	ldr	r2, [pc, #92]	@ (8000d94 <HAL_UART_MspInit+0x84>)
 8000d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3a:	61d3      	str	r3, [r2, #28]
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_UART_MspInit+0x84>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_UART_MspInit+0x84>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <HAL_UART_MspInit+0x84>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_UART_MspInit+0x84>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d60:	230c      	movs	r3, #12
 8000d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <HAL_UART_MspInit+0x88>)
 8000d74:	f001 f904 	bl	8001f80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2026      	movs	r0, #38	@ 0x26
 8000d7e:	f001 f816 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d82:	2026      	movs	r0, #38	@ 0x26
 8000d84:	f001 f82f 	bl	8001de6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40004400 	.word	0x40004400
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <NMI_Handler+0x4>

08000da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <MemManage_Handler+0x4>

08000db4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f938 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f001 fa5d 	bl	80022b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <TIM2_IRQHandler+0x10>)
 8000e0a:	f002 f8e5 	bl	8002fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000b4 	.word	0x200000b4

08000e18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <USART2_IRQHandler+0x10>)
 8000e1e:	f002 fe45 	bl	8003aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000fc 	.word	0x200000fc

08000e2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e34:	f001 fa40 	bl	80022b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e00a      	b.n	8000e64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e4e:	f3af 8000 	nop.w
 8000e52:	4601      	mov	r1, r0
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	60ba      	str	r2, [r7, #8]
 8000e5a:	b2ca      	uxtb	r2, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf0      	blt.n	8000e4e <_read+0x12>
  }

  return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	e009      	b.n	8000e9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	60ba      	str	r2, [r7, #8]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fb3d 	bl	8000510 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf1      	blt.n	8000e88 <_write+0x12>
  }
  return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_close>:

int _close(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <_isatty>:

int _isatty(int file)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
	...

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	@ (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f003 fc82 	bl	8004848 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20005000 	.word	0x20005000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	20000164 	.word	0x20000164
 8000f78:	200002b8 	.word	0x200002b8

08000f7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f88:	f7ff fff8 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f8e:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f90:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a09      	ldr	r2, [pc, #36]	@ (8000fc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fa4:	4c09      	ldr	r4, [pc, #36]	@ (8000fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f003 fc4f 	bl	8004854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb6:	f7ff fbfd 	bl	80007b4 <main>
  bx lr
 8000fba:	4770      	bx	lr
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fc4:	080056d4 	.word	0x080056d4
  ldr r2, =_sbss
 8000fc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fcc:	200002b8 	.word	0x200002b8

08000fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_2_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_Init+0x28>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <HAL_Init+0x28>)
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 fed7 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fdea 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40022000 	.word	0x40022000

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 feef 	bl	8001e02 <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800103c:	f000 feb7 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	@ (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <HAL_IncTick+0x1c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <HAL_IncTick+0x20>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a03      	ldr	r2, [pc, #12]	@ (8001080 <HAL_IncTick+0x20>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	20000008 	.word	0x20000008
 8001080:	20000168 	.word	0x20000168

08001084 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b02      	ldr	r3, [pc, #8]	@ (8001094 <HAL_GetTick+0x10>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	20000168 	.word	0x20000168

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff fff0 	bl	8001084 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffe0 	bl	8001084 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008

080010e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0be      	b.n	8001280 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110c:	2b00      	cmp	r3, #0
 800110e:	d109      	bne.n	8001124 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fd84 	bl	8000c2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fc7b 	bl	8001a20 <ADC_ConversionStop_Disable>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 8099 	bne.w	800126e <HAL_ADC_Init+0x18e>
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f040 8095 	bne.w	800126e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001148:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800114c:	f023 0302 	bic.w	r3, r3, #2
 8001150:	f043 0202 	orr.w	r2, r3, #2
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001160:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7b1b      	ldrb	r3, [r3, #12]
 8001166:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001168:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	4313      	orrs	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001178:	d003      	beq.n	8001182 <HAL_ADC_Init+0xa2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d102      	bne.n	8001188 <HAL_ADC_Init+0xa8>
 8001182:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001186:	e000      	b.n	800118a <HAL_ADC_Init+0xaa>
 8001188:	2300      	movs	r3, #0
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7d1b      	ldrb	r3, [r3, #20]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d119      	bne.n	80011cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7b1b      	ldrb	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d109      	bne.n	80011b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	035a      	lsls	r2, r3, #13
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	e00b      	b.n	80011cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b8:	f043 0220 	orr.w	r2, r3, #32
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	430a      	orrs	r2, r1
 80011de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <HAL_ADC_Init+0x1a8>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011fc:	d003      	beq.n	8001206 <HAL_ADC_Init+0x126>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d104      	bne.n	8001210 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	3b01      	subs	r3, #1
 800120c:	051b      	lsls	r3, r3, #20
 800120e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001216:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	430a      	orrs	r2, r1
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_ADC_Init+0x1ac>)
 800122c:	4013      	ands	r3, r2
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	d10b      	bne.n	800124c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123e:	f023 0303 	bic.w	r3, r3, #3
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800124a:	e018      	b.n	800127e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001250:	f023 0312 	bic.w	r3, r3, #18
 8001254:	f043 0210 	orr.w	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800126c:	e007      	b.n	800127e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001272:	f043 0210 	orr.w	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800127e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	ffe1f7fd 	.word	0xffe1f7fd
 800128c:	ff1f0efe 	.word	0xff1f0efe

08001290 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_ADC_Start+0x1a>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e098      	b.n	80013dc <HAL_ADC_Start+0x14c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fb5a 	bl	800196c <ADC_Enable>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 8087 	bne.w	80013d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a41      	ldr	r2, [pc, #260]	@ (80013e4 <HAL_ADC_Start+0x154>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d105      	bne.n	80012ee <HAL_ADC_Start+0x5e>
 80012e2:	4b41      	ldr	r3, [pc, #260]	@ (80013e8 <HAL_ADC_Start+0x158>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d115      	bne.n	800131a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001304:	2b00      	cmp	r3, #0
 8001306:	d026      	beq.n	8001356 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001310:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001318:	e01d      	b.n	8001356 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2f      	ldr	r2, [pc, #188]	@ (80013e8 <HAL_ADC_Start+0x158>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d004      	beq.n	800133a <HAL_ADC_Start+0xaa>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2b      	ldr	r2, [pc, #172]	@ (80013e4 <HAL_ADC_Start+0x154>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10d      	bne.n	8001356 <HAL_ADC_Start+0xc6>
 800133a:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <HAL_ADC_Start+0x158>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800134e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001366:	f023 0206 	bic.w	r2, r3, #6
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800136e:	e002      	b.n	8001376 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f06f 0202 	mvn.w	r2, #2
 8001386:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001392:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001396:	d113      	bne.n	80013c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800139c:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <HAL_ADC_Start+0x154>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d105      	bne.n	80013ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <HAL_ADC_Start+0x158>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	e00c      	b.n	80013da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e003      	b.n	80013da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40012800 	.word	0x40012800
 80013e8:	40012400 	.word	0x40012400

080013ec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001402:	f7ff fe3f 	bl	8001084 <HAL_GetTick>
 8001406:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141a:	f043 0220 	orr.w	r2, r3, #32
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0d3      	b.n	80015d6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d131      	bne.n	80014a0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001442:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001446:	2b00      	cmp	r3, #0
 8001448:	d12a      	bne.n	80014a0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800144a:	e021      	b.n	8001490 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001452:	d01d      	beq.n	8001490 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_ADC_PollForConversion+0x7e>
 800145a:	f7ff fe13 	bl	8001084 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d212      	bcs.n	8001490 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10b      	bne.n	8001490 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	f043 0204 	orr.w	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0a2      	b.n	80015d6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0d6      	beq.n	800144c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800149e:	e070      	b.n	8001582 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80014a0:	4b4f      	ldr	r3, [pc, #316]	@ (80015e0 <HAL_ADC_PollForConversion+0x1f4>)
 80014a2:	681c      	ldr	r4, [r3, #0]
 80014a4:	2002      	movs	r0, #2
 80014a6:	f001 fbef 	bl	8002c88 <HAL_RCCEx_GetPeriphCLKFreq>
 80014aa:	4603      	mov	r3, r0
 80014ac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6919      	ldr	r1, [r3, #16]
 80014b6:	4b4b      	ldr	r3, [pc, #300]	@ (80015e4 <HAL_ADC_PollForConversion+0x1f8>)
 80014b8:	400b      	ands	r3, r1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d118      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x104>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68d9      	ldr	r1, [r3, #12]
 80014c4:	4b48      	ldr	r3, [pc, #288]	@ (80015e8 <HAL_ADC_PollForConversion+0x1fc>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x104>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6919      	ldr	r1, [r3, #16]
 80014d2:	4b46      	ldr	r3, [pc, #280]	@ (80015ec <HAL_ADC_PollForConversion+0x200>)
 80014d4:	400b      	ands	r3, r1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <HAL_ADC_PollForConversion+0x100>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68d9      	ldr	r1, [r3, #12]
 80014e0:	4b43      	ldr	r3, [pc, #268]	@ (80015f0 <HAL_ADC_PollForConversion+0x204>)
 80014e2:	400b      	ands	r3, r1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_ADC_PollForConversion+0x100>
 80014e8:	2314      	movs	r3, #20
 80014ea:	e020      	b.n	800152e <HAL_ADC_PollForConversion+0x142>
 80014ec:	2329      	movs	r3, #41	@ 0x29
 80014ee:	e01e      	b.n	800152e <HAL_ADC_PollForConversion+0x142>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <HAL_ADC_PollForConversion+0x200>)
 80014f8:	400b      	ands	r3, r1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_ADC_PollForConversion+0x120>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68d9      	ldr	r1, [r3, #12]
 8001504:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <HAL_ADC_PollForConversion+0x204>)
 8001506:	400b      	ands	r3, r1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00d      	beq.n	8001528 <HAL_ADC_PollForConversion+0x13c>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <HAL_ADC_PollForConversion+0x208>)
 8001514:	400b      	ands	r3, r1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d108      	bne.n	800152c <HAL_ADC_PollForConversion+0x140>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68d9      	ldr	r1, [r3, #12]
 8001520:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <HAL_ADC_PollForConversion+0x208>)
 8001522:	400b      	ands	r3, r1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_ADC_PollForConversion+0x140>
 8001528:	2354      	movs	r3, #84	@ 0x54
 800152a:	e000      	b.n	800152e <HAL_ADC_PollForConversion+0x142>
 800152c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001534:	e021      	b.n	800157a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800153c:	d01a      	beq.n	8001574 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_ADC_PollForConversion+0x168>
 8001544:	f7ff fd9e 	bl	8001084 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d20f      	bcs.n	8001574 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d90b      	bls.n	8001574 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	f043 0204 	orr.w	r2, r3, #4
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e030      	b.n	80015d6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	429a      	cmp	r2, r3
 8001580:	d8d9      	bhi.n	8001536 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f06f 0212 	mvn.w	r2, #18
 800158a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015a6:	d115      	bne.n	80015d4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d111      	bne.n	80015d4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000000 	.word	0x20000000
 80015e4:	24924924 	.word	0x24924924
 80015e8:	00924924 	.word	0x00924924
 80015ec:	12492492 	.word	0x12492492
 80015f0:	00492492 	.word	0x00492492
 80015f4:	00249249 	.word	0x00249249

080015f8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Start_IT+0x1a>
 800160e:	2302      	movs	r3, #2
 8001610:	e0a0      	b.n	8001754 <HAL_ADC_Start_IT+0x15c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f9a6 	bl	800196c <ADC_Enable>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 808f 	bne.w	800174a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a45      	ldr	r2, [pc, #276]	@ (800175c <HAL_ADC_Start_IT+0x164>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d105      	bne.n	8001656 <HAL_ADC_Start_IT+0x5e>
 800164a:	4b45      	ldr	r3, [pc, #276]	@ (8001760 <HAL_ADC_Start_IT+0x168>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d115      	bne.n	8001682 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d026      	beq.n	80016be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001678:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001680:	e01d      	b.n	80016be <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001686:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a33      	ldr	r2, [pc, #204]	@ (8001760 <HAL_ADC_Start_IT+0x168>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d004      	beq.n	80016a2 <HAL_ADC_Start_IT+0xaa>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a2f      	ldr	r2, [pc, #188]	@ (800175c <HAL_ADC_Start_IT+0x164>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10d      	bne.n	80016be <HAL_ADC_Start_IT+0xc6>
 80016a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001760 <HAL_ADC_Start_IT+0x168>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ce:	f023 0206 	bic.w	r2, r3, #6
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016d6:	e002      	b.n	80016de <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f06f 0202 	mvn.w	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0220 	orr.w	r2, r2, #32
 80016fe:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800170a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800170e:	d113      	bne.n	8001738 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001714:	4a11      	ldr	r2, [pc, #68]	@ (800175c <HAL_ADC_Start_IT+0x164>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d105      	bne.n	8001726 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_ADC_Start_IT+0x168>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001722:	2b00      	cmp	r3, #0
 8001724:	d108      	bne.n	8001738 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	e00c      	b.n	8001752 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	e003      	b.n	8001752 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40012800 	.word	0x40012800
 8001760:	40012400 	.word	0x40012400

08001764 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x20>
 8001798:	2302      	movs	r3, #2
 800179a:	e0dc      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1da>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b06      	cmp	r3, #6
 80017aa:	d81c      	bhi.n	80017e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	3b05      	subs	r3, #5
 80017be:	221f      	movs	r2, #31
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4019      	ands	r1, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	3b05      	subs	r3, #5
 80017d8:	fa00 f203 	lsl.w	r2, r0, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80017e4:	e03c      	b.n	8001860 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d81c      	bhi.n	8001828 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b23      	subs	r3, #35	@ 0x23
 8001800:	221f      	movs	r2, #31
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	4019      	ands	r1, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b23      	subs	r3, #35	@ 0x23
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	631a      	str	r2, [r3, #48]	@ 0x30
 8001826:	e01b      	b.n	8001860 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	3b41      	subs	r3, #65	@ 0x41
 800183a:	221f      	movs	r2, #31
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	4019      	ands	r1, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3b41      	subs	r3, #65	@ 0x41
 8001854:	fa00 f203 	lsl.w	r2, r0, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b09      	cmp	r3, #9
 8001866:	d91c      	bls.n	80018a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68d9      	ldr	r1, [r3, #12]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	3b1e      	subs	r3, #30
 800187a:	2207      	movs	r2, #7
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	4019      	ands	r1, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6898      	ldr	r0, [r3, #8]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	3b1e      	subs	r3, #30
 8001894:	fa00 f203 	lsl.w	r2, r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	e019      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6919      	ldr	r1, [r3, #16]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	2207      	movs	r2, #7
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4019      	ands	r1, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6898      	ldr	r0, [r3, #8]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	fa00 f203 	lsl.w	r2, r0, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d003      	beq.n	80018e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018e2:	2b11      	cmp	r3, #17
 80018e4:	d132      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001960 <HAL_ADC_ConfigChannel+0x1e4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d125      	bne.n	800193c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d126      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800190c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b10      	cmp	r3, #16
 8001914:	d11a      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <HAL_ADC_ConfigChannel+0x1e8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a13      	ldr	r2, [pc, #76]	@ (8001968 <HAL_ADC_ConfigChannel+0x1ec>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	0c9a      	lsrs	r2, r3, #18
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800192c:	e002      	b.n	8001934 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3b01      	subs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <HAL_ADC_ConfigChannel+0x1b2>
 800193a:	e007      	b.n	800194c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	f043 0220 	orr.w	r2, r3, #32
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40012400 	.word	0x40012400
 8001964:	20000000 	.word	0x20000000
 8001968:	431bde83 	.word	0x431bde83

0800196c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d040      	beq.n	8001a0c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800199a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <ADC_Enable+0xac>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a1c <ADC_Enable+0xb0>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	0c9b      	lsrs	r3, r3, #18
 80019a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019a8:	e002      	b.n	80019b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f9      	bne.n	80019aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019b6:	f7ff fb65 	bl	8001084 <HAL_GetTick>
 80019ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019bc:	e01f      	b.n	80019fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019be:	f7ff fb61 	bl	8001084 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d918      	bls.n	80019fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d011      	beq.n	80019fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	f043 0210 	orr.w	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e007      	b.n	8001a0e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d1d8      	bne.n	80019be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d12e      	bne.n	8001a98 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a4a:	f7ff fb1b 	bl	8001084 <HAL_GetTick>
 8001a4e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a50:	e01b      	b.n	8001a8a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a52:	f7ff fb17 	bl	8001084 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d914      	bls.n	8001a8a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d10d      	bne.n	8001a8a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	f043 0210 	orr.w	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e007      	b.n	8001a9a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d0dc      	beq.n	8001a52 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADCEx_Calibration_Start+0x1e>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e097      	b.n	8001bf2 <HAL_ADCEx_Calibration_Start+0x14e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa8 	bl	8001a20 <ADC_ConversionStop_Disable>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff49 	bl	800196c <ADC_Enable>
 8001ada:	4603      	mov	r3, r0
 8001adc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 8081 	bne.w	8001be8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aee:	f023 0302 	bic.w	r3, r3, #2
 8001af2:	f043 0202 	orr.w	r2, r3, #2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001afa:	4b40      	ldr	r3, [pc, #256]	@ (8001bfc <HAL_ADCEx_Calibration_Start+0x158>)
 8001afc:	681c      	ldr	r4, [r3, #0]
 8001afe:	2002      	movs	r0, #2
 8001b00:	f001 f8c2 	bl	8002c88 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b04:	4603      	mov	r3, r0
 8001b06:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001b0a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001b0c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001b0e:	e002      	b.n	8001b16 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0208 	orr.w	r2, r2, #8
 8001b2a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b2c:	f7ff faaa 	bl	8001084 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b32:	e01b      	b.n	8001b6c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b34:	f7ff faa6 	bl	8001084 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d914      	bls.n	8001b6c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00d      	beq.n	8001b6c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b54:	f023 0312 	bic.w	r3, r3, #18
 8001b58:	f043 0210 	orr.w	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e042      	b.n	8001bf2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1dc      	bne.n	8001b34 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0204 	orr.w	r2, r2, #4
 8001b88:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b8a:	f7ff fa7b 	bl	8001084 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b90:	e01b      	b.n	8001bca <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b92:	f7ff fa77 	bl	8001084 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b0a      	cmp	r3, #10
 8001b9e:	d914      	bls.n	8001bca <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb2:	f023 0312 	bic.w	r3, r3, #18
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e013      	b.n	8001bf2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1dc      	bne.n	8001b92 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	f023 0303 	bic.w	r3, r3, #3
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd90      	pop	{r4, r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4906      	ldr	r1, [pc, #24]	@ (8001c98 <__NVIC_EnableIRQ+0x34>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	@ (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	@ (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	@ 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d78:	f7ff ff90 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff2d 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff42 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff90 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5f 	bl	8001c9c <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff35 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d008      	beq.n	8001e44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e020      	b.n	8001e86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 020e 	bic.w	r2, r2, #14
 8001e52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e051      	b.n	8001f58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 020e 	bic.w	r2, r2, #14
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a22      	ldr	r2, [pc, #136]	@ (8001f64 <HAL_DMA_Abort_IT+0xd4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d029      	beq.n	8001f32 <HAL_DMA_Abort_IT+0xa2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a21      	ldr	r2, [pc, #132]	@ (8001f68 <HAL_DMA_Abort_IT+0xd8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x9e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1f      	ldr	r2, [pc, #124]	@ (8001f6c <HAL_DMA_Abort_IT+0xdc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01a      	beq.n	8001f28 <HAL_DMA_Abort_IT+0x98>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <HAL_DMA_Abort_IT+0xe0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d012      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x92>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <HAL_DMA_Abort_IT+0xe4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00a      	beq.n	8001f1c <HAL_DMA_Abort_IT+0x8c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f78 <HAL_DMA_Abort_IT+0xe8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d102      	bne.n	8001f16 <HAL_DMA_Abort_IT+0x86>
 8001f10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f14:	e00e      	b.n	8001f34 <HAL_DMA_Abort_IT+0xa4>
 8001f16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f1a:	e00b      	b.n	8001f34 <HAL_DMA_Abort_IT+0xa4>
 8001f1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f20:	e008      	b.n	8001f34 <HAL_DMA_Abort_IT+0xa4>
 8001f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f26:	e005      	b.n	8001f34 <HAL_DMA_Abort_IT+0xa4>
 8001f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f2c:	e002      	b.n	8001f34 <HAL_DMA_Abort_IT+0xa4>
 8001f2e:	2310      	movs	r3, #16
 8001f30:	e000      	b.n	8001f34 <HAL_DMA_Abort_IT+0xa4>
 8001f32:	2301      	movs	r3, #1
 8001f34:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <HAL_DMA_Abort_IT+0xec>)
 8001f36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
    } 
  }
  return status;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40020008 	.word	0x40020008
 8001f68:	4002001c 	.word	0x4002001c
 8001f6c:	40020030 	.word	0x40020030
 8001f70:	40020044 	.word	0x40020044
 8001f74:	40020058 	.word	0x40020058
 8001f78:	4002006c 	.word	0x4002006c
 8001f7c:	40020000 	.word	0x40020000

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b08b      	sub	sp, #44	@ 0x2c
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e169      	b.n	8002268 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f94:	2201      	movs	r2, #1
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f040 8158 	bne.w	8002262 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4a9a      	ldr	r2, [pc, #616]	@ (8002220 <HAL_GPIO_Init+0x2a0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d05e      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fbc:	4a98      	ldr	r2, [pc, #608]	@ (8002220 <HAL_GPIO_Init+0x2a0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d875      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fc2:	4a98      	ldr	r2, [pc, #608]	@ (8002224 <HAL_GPIO_Init+0x2a4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d058      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fc8:	4a96      	ldr	r2, [pc, #600]	@ (8002224 <HAL_GPIO_Init+0x2a4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d86f      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fce:	4a96      	ldr	r2, [pc, #600]	@ (8002228 <HAL_GPIO_Init+0x2a8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d052      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fd4:	4a94      	ldr	r2, [pc, #592]	@ (8002228 <HAL_GPIO_Init+0x2a8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d869      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fda:	4a94      	ldr	r2, [pc, #592]	@ (800222c <HAL_GPIO_Init+0x2ac>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04c      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fe0:	4a92      	ldr	r2, [pc, #584]	@ (800222c <HAL_GPIO_Init+0x2ac>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d863      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fe6:	4a92      	ldr	r2, [pc, #584]	@ (8002230 <HAL_GPIO_Init+0x2b0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d046      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fec:	4a90      	ldr	r2, [pc, #576]	@ (8002230 <HAL_GPIO_Init+0x2b0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d85d      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d82a      	bhi.n	800204c <HAL_GPIO_Init+0xcc>
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d859      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8002000 <HAL_GPIO_Init+0x80>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	0800207b 	.word	0x0800207b
 8002004:	08002055 	.word	0x08002055
 8002008:	08002067 	.word	0x08002067
 800200c:	080020a9 	.word	0x080020a9
 8002010:	080020af 	.word	0x080020af
 8002014:	080020af 	.word	0x080020af
 8002018:	080020af 	.word	0x080020af
 800201c:	080020af 	.word	0x080020af
 8002020:	080020af 	.word	0x080020af
 8002024:	080020af 	.word	0x080020af
 8002028:	080020af 	.word	0x080020af
 800202c:	080020af 	.word	0x080020af
 8002030:	080020af 	.word	0x080020af
 8002034:	080020af 	.word	0x080020af
 8002038:	080020af 	.word	0x080020af
 800203c:	080020af 	.word	0x080020af
 8002040:	080020af 	.word	0x080020af
 8002044:	0800205d 	.word	0x0800205d
 8002048:	08002071 	.word	0x08002071
 800204c:	4a79      	ldr	r2, [pc, #484]	@ (8002234 <HAL_GPIO_Init+0x2b4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002052:	e02c      	b.n	80020ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e029      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e024      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	3308      	adds	r3, #8
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e01f      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	330c      	adds	r3, #12
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e01a      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002082:	2304      	movs	r3, #4
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e013      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	611a      	str	r2, [r3, #16]
          break;
 800209a:	e009      	b.n	80020b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	615a      	str	r2, [r3, #20]
          break;
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          break;
 80020ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	@ 0xff
 80020b4:	d801      	bhi.n	80020ba <HAL_GPIO_Init+0x13a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_Init+0x13e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2bff      	cmp	r3, #255	@ 0xff
 80020c4:	d802      	bhi.n	80020cc <HAL_GPIO_Init+0x14c>
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_Init+0x152>
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	3b08      	subs	r3, #8
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	210f      	movs	r1, #15
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80b1 	beq.w	8002262 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002100:	4b4d      	ldr	r3, [pc, #308]	@ (8002238 <HAL_GPIO_Init+0x2b8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a4c      	ldr	r2, [pc, #304]	@ (8002238 <HAL_GPIO_Init+0x2b8>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b4a      	ldr	r3, [pc, #296]	@ (8002238 <HAL_GPIO_Init+0x2b8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002118:	4a48      	ldr	r2, [pc, #288]	@ (800223c <HAL_GPIO_Init+0x2bc>)
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a40      	ldr	r2, [pc, #256]	@ (8002240 <HAL_GPIO_Init+0x2c0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_GPIO_Init+0x1ec>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3f      	ldr	r2, [pc, #252]	@ (8002244 <HAL_GPIO_Init+0x2c4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00d      	beq.n	8002168 <HAL_GPIO_Init+0x1e8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3e      	ldr	r2, [pc, #248]	@ (8002248 <HAL_GPIO_Init+0x2c8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <HAL_GPIO_Init+0x1e4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3d      	ldr	r2, [pc, #244]	@ (800224c <HAL_GPIO_Init+0x2cc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_GPIO_Init+0x1e0>
 800215c:	2303      	movs	r3, #3
 800215e:	e006      	b.n	800216e <HAL_GPIO_Init+0x1ee>
 8002160:	2304      	movs	r3, #4
 8002162:	e004      	b.n	800216e <HAL_GPIO_Init+0x1ee>
 8002164:	2302      	movs	r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x1ee>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_GPIO_Init+0x1ee>
 800216c:	2300      	movs	r3, #0
 800216e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002170:	f002 0203 	and.w	r2, r2, #3
 8002174:	0092      	lsls	r2, r2, #2
 8002176:	4093      	lsls	r3, r2
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800217e:	492f      	ldr	r1, [pc, #188]	@ (800223c <HAL_GPIO_Init+0x2bc>)
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002198:	4b2d      	ldr	r3, [pc, #180]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	492c      	ldr	r1, [pc, #176]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4928      	ldr	r1, [pc, #160]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c0:	4b23      	ldr	r3, [pc, #140]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	4922      	ldr	r1, [pc, #136]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60cb      	str	r3, [r1, #12]
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	491e      	ldr	r1, [pc, #120]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021d8:	4013      	ands	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4918      	ldr	r1, [pc, #96]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021f6:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	4914      	ldr	r1, [pc, #80]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 8002200:	4013      	ands	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d021      	beq.n	8002254 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002210:	4b0f      	ldr	r3, [pc, #60]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	490e      	ldr	r1, [pc, #56]	@ (8002250 <HAL_GPIO_Init+0x2d0>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
 800221c:	e021      	b.n	8002262 <HAL_GPIO_Init+0x2e2>
 800221e:	bf00      	nop
 8002220:	10320000 	.word	0x10320000
 8002224:	10310000 	.word	0x10310000
 8002228:	10220000 	.word	0x10220000
 800222c:	10210000 	.word	0x10210000
 8002230:	10120000 	.word	0x10120000
 8002234:	10110000 	.word	0x10110000
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000
 8002240:	40010800 	.word	0x40010800
 8002244:	40010c00 	.word	0x40010c00
 8002248:	40011000 	.word	0x40011000
 800224c:	40011400 	.word	0x40011400
 8002250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_GPIO_Init+0x304>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	43db      	mvns	r3, r3
 800225c:	4909      	ldr	r1, [pc, #36]	@ (8002284 <HAL_GPIO_Init+0x304>)
 800225e:	4013      	ands	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	3301      	adds	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	f47f ae8e 	bne.w	8001f94 <HAL_GPIO_Init+0x14>
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	372c      	adds	r7, #44	@ 0x2c
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
 8002294:	4613      	mov	r3, r2
 8002296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002298:	787b      	ldrb	r3, [r7, #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022a4:	e003      	b.n	80022ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	041a      	lsls	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	611a      	str	r2, [r3, #16]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f806 	bl	80022e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40010400 	.word	0x40010400

080022e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e272      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8087 	beq.w	800242a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800231c:	4b92      	ldr	r3, [pc, #584]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b04      	cmp	r3, #4
 8002326:	d00c      	beq.n	8002342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002328:	4b8f      	ldr	r3, [pc, #572]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d112      	bne.n	800235a <HAL_RCC_OscConfig+0x5e>
 8002334:	4b8c      	ldr	r3, [pc, #560]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002340:	d10b      	bne.n	800235a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002342:	4b89      	ldr	r3, [pc, #548]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d06c      	beq.n	8002428 <HAL_RCC_OscConfig+0x12c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d168      	bne.n	8002428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e24c      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x76>
 8002364:	4b80      	ldr	r3, [pc, #512]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a7f      	ldr	r2, [pc, #508]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	e02e      	b.n	80023d0 <HAL_RCC_OscConfig+0xd4>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b7b      	ldr	r3, [pc, #492]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7a      	ldr	r2, [pc, #488]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b78      	ldr	r3, [pc, #480]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a77      	ldr	r2, [pc, #476]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e01d      	b.n	80023d0 <HAL_RCC_OscConfig+0xd4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0xbc>
 800239e:	4b72      	ldr	r3, [pc, #456]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a71      	ldr	r2, [pc, #452]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0xd4>
 80023b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b68      	ldr	r3, [pc, #416]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a67      	ldr	r2, [pc, #412]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fe54 	bl	8001084 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7fe fe50 	bl	8001084 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e200      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0xe4>
 80023fe:	e014      	b.n	800242a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fe40 	bl	8001084 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fe3c 	bl	8001084 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	@ 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1ec      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	4b53      	ldr	r3, [pc, #332]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x10c>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d063      	beq.n	80024fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002436:	4b4c      	ldr	r3, [pc, #304]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002442:	4b49      	ldr	r3, [pc, #292]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b08      	cmp	r3, #8
 800244c:	d11c      	bne.n	8002488 <HAL_RCC_OscConfig+0x18c>
 800244e:	4b46      	ldr	r3, [pc, #280]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d116      	bne.n	8002488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	4b43      	ldr	r3, [pc, #268]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_OscConfig+0x176>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e1c0      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002472:	4b3d      	ldr	r3, [pc, #244]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4939      	ldr	r1, [pc, #228]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	e03a      	b.n	80024fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002490:	4b36      	ldr	r3, [pc, #216]	@ (800256c <HAL_RCC_OscConfig+0x270>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe fdf5 	bl	8001084 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe fdf1 	bl	8001084 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e1a1      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4927      	ldr	r1, [pc, #156]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b26      	ldr	r3, [pc, #152]	@ (800256c <HAL_RCC_OscConfig+0x270>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fdd4 	bl	8001084 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe fdd0 	bl	8001084 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e180      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d03a      	beq.n	8002580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d019      	beq.n	8002546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002512:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <HAL_RCC_OscConfig+0x274>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002518:	f7fe fdb4 	bl	8001084 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002520:	f7fe fdb0 	bl	8001084 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e160      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_RCC_OscConfig+0x26c>)
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800253e:	2001      	movs	r0, #1
 8002540:	f000 face 	bl	8002ae0 <RCC_Delay>
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002546:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCC_OscConfig+0x274>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7fe fd9a 	bl	8001084 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002552:	e00f      	b.n	8002574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002554:	f7fe fd96 	bl	8001084 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d908      	bls.n	8002574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e146      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	42420000 	.word	0x42420000
 8002570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	4b92      	ldr	r3, [pc, #584]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e9      	bne.n	8002554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a6 	beq.w	80026da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002592:	4b8b      	ldr	r3, [pc, #556]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10d      	bne.n	80025ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b88      	ldr	r3, [pc, #544]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a87      	ldr	r2, [pc, #540]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b85      	ldr	r3, [pc, #532]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b82      	ldr	r3, [pc, #520]	@ (80027c4 <HAL_RCC_OscConfig+0x4c8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d118      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c6:	4b7f      	ldr	r3, [pc, #508]	@ (80027c4 <HAL_RCC_OscConfig+0x4c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7e      	ldr	r2, [pc, #504]	@ (80027c4 <HAL_RCC_OscConfig+0x4c8>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fd57 	bl	8001084 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025da:	f7fe fd53 	bl	8001084 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b64      	cmp	r3, #100	@ 0x64
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e103      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b75      	ldr	r3, [pc, #468]	@ (80027c4 <HAL_RCC_OscConfig+0x4c8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x312>
 8002600:	4b6f      	ldr	r3, [pc, #444]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4a6e      	ldr	r2, [pc, #440]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6213      	str	r3, [r2, #32]
 800260c:	e02d      	b.n	800266a <HAL_RCC_OscConfig+0x36e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x334>
 8002616:	4b6a      	ldr	r3, [pc, #424]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a69      	ldr	r2, [pc, #420]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	4b67      	ldr	r3, [pc, #412]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a66      	ldr	r2, [pc, #408]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	e01c      	b.n	800266a <HAL_RCC_OscConfig+0x36e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b05      	cmp	r3, #5
 8002636:	d10c      	bne.n	8002652 <HAL_RCC_OscConfig+0x356>
 8002638:	4b61      	ldr	r3, [pc, #388]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4a60      	ldr	r2, [pc, #384]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	f043 0304 	orr.w	r3, r3, #4
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	4b5e      	ldr	r3, [pc, #376]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a5d      	ldr	r2, [pc, #372]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e00b      	b.n	800266a <HAL_RCC_OscConfig+0x36e>
 8002652:	4b5b      	ldr	r3, [pc, #364]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	4a5a      	ldr	r2, [pc, #360]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6213      	str	r3, [r2, #32]
 800265e:	4b58      	ldr	r3, [pc, #352]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a57      	ldr	r2, [pc, #348]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d015      	beq.n	800269e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002672:	f7fe fd07 	bl	8001084 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe fd03 	bl	8001084 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0b1      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	4b4b      	ldr	r3, [pc, #300]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ee      	beq.n	800267a <HAL_RCC_OscConfig+0x37e>
 800269c:	e014      	b.n	80026c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7fe fcf1 	bl	8001084 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe fced 	bl	8001084 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e09b      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026bc:	4b40      	ldr	r3, [pc, #256]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ee      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4b3c      	ldr	r3, [pc, #240]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a3b      	ldr	r2, [pc, #236]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8087 	beq.w	80027f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e4:	4b36      	ldr	r3, [pc, #216]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d061      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d146      	bne.n	8002786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f8:	4b33      	ldr	r3, [pc, #204]	@ (80027c8 <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fcc1 	bl	8001084 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002706:	f7fe fcbd 	bl	8001084 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e06d      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	4b29      	ldr	r3, [pc, #164]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272c:	d108      	bne.n	8002740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800272e:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4921      	ldr	r1, [pc, #132]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002740:	4b1f      	ldr	r3, [pc, #124]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a19      	ldr	r1, [r3, #32]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	430b      	orrs	r3, r1
 8002752:	491b      	ldr	r1, [pc, #108]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002758:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_RCC_OscConfig+0x4cc>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe fc91 	bl	8001084 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7fe fc8d 	bl	8001084 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e03d      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x46a>
 8002784:	e035      	b.n	80027f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <HAL_RCC_OscConfig+0x4cc>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fc7a 	bl	8001084 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fc76 	bl	8001084 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e026      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x498>
 80027b2:	e01e      	b.n	80027f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e019      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40007000 	.word	0x40007000
 80027c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCC_OscConfig+0x500>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0d0      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b67      	ldr	r3, [pc, #412]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4965      	ldr	r1, [pc, #404]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b63      	ldr	r3, [pc, #396]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	4b59      	ldr	r3, [pc, #356]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a58      	ldr	r2, [pc, #352]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002874:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800287e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b50      	ldr	r3, [pc, #320]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	494d      	ldr	r1, [pc, #308]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d040      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d115      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e073      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3d      	ldr	r3, [pc, #244]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e06b      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b39      	ldr	r3, [pc, #228]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4936      	ldr	r1, [pc, #216]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fbc8 	bl	8001084 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fbc4 	bl	8001084 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e053      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d210      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	4922      	ldr	r1, [pc, #136]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e032      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b19      	ldr	r3, [pc, #100]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4916      	ldr	r1, [pc, #88]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297a:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490e      	ldr	r1, [pc, #56]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800298e:	f000 f821 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490a      	ldr	r1, [pc, #40]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	4a09      	ldr	r2, [pc, #36]	@ (80029cc <HAL_RCC_ClockConfig+0x1cc>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_RCC_ClockConfig+0x1d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fb26 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08005558 	.word	0x08005558
 80029cc:	20000000 	.word	0x20000000
 80029d0:	20000004 	.word	0x20000004

080029d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x30>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x36>
 8002a02:	e027      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a06:	613b      	str	r3, [r7, #16]
      break;
 8002a08:	e027      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d010      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a22:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0c5b      	lsrs	r3, r3, #17
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0d      	ldr	r2, [pc, #52]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a36:	fb03 f202 	mul.w	r2, r3, r2
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e004      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a0c      	ldr	r2, [pc, #48]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	613b      	str	r3, [r7, #16]
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5a:	693b      	ldr	r3, [r7, #16]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	08005570 	.word	0x08005570
 8002a74:	08005580 	.word	0x08005580
 8002a78:	003d0900 	.word	0x003d0900

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b02      	ldr	r3, [pc, #8]	@ (8002a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000000 	.word	0x20000000

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff2 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	@ (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08005568 	.word	0x08005568

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0adb      	lsrs	r3, r3, #11
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	@ (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08005568 	.word	0x08005568

08002ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <RCC_Delay+0x34>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <RCC_Delay+0x38>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002afc:	bf00      	nop
  }
  while (Delay --);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	60fa      	str	r2, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <RCC_Delay+0x1c>
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	20000000 	.word	0x20000000
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d07d      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10d      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b4c      	ldr	r3, [pc, #304]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	61d3      	str	r3, [r2, #28]
 8002b54:	4b49      	ldr	r3, [pc, #292]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	4b46      	ldr	r3, [pc, #280]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d118      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b70:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a42      	ldr	r2, [pc, #264]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fa82 	bl	8001084 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	e008      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b84:	f7fe fa7e 	bl	8001084 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e06d      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b3a      	ldr	r3, [pc, #232]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ba2:	4b36      	ldr	r3, [pc, #216]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002baa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02e      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d027      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bca:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bd6:	4a29      	ldr	r2, [pc, #164]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe fa4d 	bl	8001084 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe fa49 	bl	8001084 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e036      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ee      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c10:	4b1a      	ldr	r3, [pc, #104]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4917      	ldr	r1, [pc, #92]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	4a13      	ldr	r2, [pc, #76]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c40:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	490b      	ldr	r1, [pc, #44]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4904      	ldr	r1, [pc, #16]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42420440 	.word	0x42420440

08002c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	f200 808a 	bhi.w	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d045      	beq.n	8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d075      	beq.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002cbe:	e082      	b.n	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002cc0:	4b46      	ldr	r3, [pc, #280]	@ (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002cc6:	4b45      	ldr	r3, [pc, #276]	@ (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d07b      	beq.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	0c9b      	lsrs	r3, r3, #18
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a41      	ldr	r2, [pc, #260]	@ (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cea:	4b3c      	ldr	r3, [pc, #240]	@ (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0c5b      	lsrs	r3, r3, #17
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	4a3b      	ldr	r2, [pc, #236]	@ (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d04:	4a38      	ldr	r2, [pc, #224]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	e004      	b.n	8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4a34      	ldr	r2, [pc, #208]	@ (8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d20:	4b2e      	ldr	r3, [pc, #184]	@ (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d2c:	d102      	bne.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	61bb      	str	r3, [r7, #24]
      break;
 8002d32:	e04a      	b.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4a2d      	ldr	r2, [pc, #180]	@ (8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]
      break;
 8002d42:	e042      	b.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d54:	d108      	bne.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e01f      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d72:	d109      	bne.n	8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002d74:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002d80:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	e00f      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d92:	d11c      	bne.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d94:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d016      	beq.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002da0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002da4:	61bb      	str	r3, [r7, #24]
      break;
 8002da6:	e012      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002da8:	e011      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002daa:	f7ff fe85 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0b9b      	lsrs	r3, r3, #14
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	61bb      	str	r3, [r7, #24]
      break;
 8002dc4:	e004      	b.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e002      	b.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dce:	bf00      	nop
    }
  }
  return (frequency);
 8002dd0:	69bb      	ldr	r3, [r7, #24]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	08005584 	.word	0x08005584
 8002de4:	08005594 	.word	0x08005594
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	003d0900 	.word	0x003d0900
 8002df0:	aaaaaaab 	.word	0xaaaaaaab

08002df4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e041      	b.n	8002e8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd ff24 	bl	8000c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f000 fab0 	bl	8003398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_TIM_PWM_Start+0x24>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e022      	b.n	8002efe <HAL_TIM_PWM_Start+0x6a>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d109      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0x3e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	e015      	b.n	8002efe <HAL_TIM_PWM_Start+0x6a>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d109      	bne.n	8002eec <HAL_TIM_PWM_Start+0x58>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e008      	b.n	8002efe <HAL_TIM_PWM_Start+0x6a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e05e      	b.n	8002fc4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d104      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x82>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f14:	e013      	b.n	8002f3e <HAL_TIM_PWM_Start+0xaa>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d104      	bne.n	8002f26 <HAL_TIM_PWM_Start+0x92>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f24:	e00b      	b.n	8002f3e <HAL_TIM_PWM_Start+0xaa>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIM_PWM_Start+0xa2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f34:	e003      	b.n	8002f3e <HAL_TIM_PWM_Start+0xaa>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fc1c 	bl	8003784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1e      	ldr	r2, [pc, #120]	@ (8002fcc <HAL_TIM_PWM_Start+0x138>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d107      	bne.n	8002f66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a18      	ldr	r2, [pc, #96]	@ (8002fcc <HAL_TIM_PWM_Start+0x138>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00e      	beq.n	8002f8e <HAL_TIM_PWM_Start+0xfa>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f78:	d009      	beq.n	8002f8e <HAL_TIM_PWM_Start+0xfa>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a14      	ldr	r2, [pc, #80]	@ (8002fd0 <HAL_TIM_PWM_Start+0x13c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d004      	beq.n	8002f8e <HAL_TIM_PWM_Start+0xfa>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a12      	ldr	r2, [pc, #72]	@ (8002fd4 <HAL_TIM_PWM_Start+0x140>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d111      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d010      	beq.n	8002fc2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb0:	e007      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800

08002fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d020      	beq.n	800303c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0202 	mvn.w	r2, #2
 800300c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f99c 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f98f 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f99e 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d020      	beq.n	8003088 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0204 	mvn.w	r2, #4
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f976 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f969 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f978 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d020      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01b      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0208 	mvn.w	r2, #8
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2204      	movs	r2, #4
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f950 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f943 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f952 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d020      	beq.n	8003120 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0210 	mvn.w	r2, #16
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2208      	movs	r2, #8
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f92a 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f91d 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f92c 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0201 	mvn.w	r2, #1
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8fc 	bl	800333c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fb99 	bl	800389a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8fc 	bl	8003384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0220 	mvn.w	r2, #32
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fb6c 	bl	8003888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0ae      	b.n	8003334 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	f200 809f 	bhi.w	8003324 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031e6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003325 	.word	0x08003325
 80031f4:	08003325 	.word	0x08003325
 80031f8:	08003325 	.word	0x08003325
 80031fc:	08003261 	.word	0x08003261
 8003200:	08003325 	.word	0x08003325
 8003204:	08003325 	.word	0x08003325
 8003208:	08003325 	.word	0x08003325
 800320c:	080032a3 	.word	0x080032a3
 8003210:	08003325 	.word	0x08003325
 8003214:	08003325 	.word	0x08003325
 8003218:	08003325 	.word	0x08003325
 800321c:	080032e3 	.word	0x080032e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f924 	bl	8003474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6999      	ldr	r1, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	619a      	str	r2, [r3, #24]
      break;
 800325e:	e064      	b.n	800332a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f96a 	bl	8003540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	021a      	lsls	r2, r3, #8
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	619a      	str	r2, [r3, #24]
      break;
 80032a0:	e043      	b.n	800332a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f9b3 	bl	8003614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0208 	orr.w	r2, r2, #8
 80032bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0204 	bic.w	r2, r2, #4
 80032cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
      break;
 80032e0:	e023      	b.n	800332a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f9fd 	bl	80036e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
      break;
 8003322:	e002      	b.n	800332a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	75fb      	strb	r3, [r7, #23]
      break;
 8003328:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
	...

08003398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003468 <TIM_Base_SetConfig+0xd0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <TIM_Base_SetConfig+0x30>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b6:	d007      	beq.n	80033c8 <TIM_Base_SetConfig+0x30>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a2c      	ldr	r2, [pc, #176]	@ (800346c <TIM_Base_SetConfig+0xd4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_Base_SetConfig+0x30>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003470 <TIM_Base_SetConfig+0xd8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d108      	bne.n	80033da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a22      	ldr	r2, [pc, #136]	@ (8003468 <TIM_Base_SetConfig+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0x62>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0x62>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	@ (800346c <TIM_Base_SetConfig+0xd4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0x62>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <TIM_Base_SetConfig+0xd8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0d      	ldr	r2, [pc, #52]	@ (8003468 <TIM_Base_SetConfig+0xd0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d103      	bne.n	8003440 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f023 0201 	bic.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	611a      	str	r2, [r3, #16]
  }
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800

08003474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f023 0201 	bic.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f023 0302 	bic.w	r3, r3, #2
 80034bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <TIM_OC1_SetConfig+0xc8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10c      	bne.n	80034ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0308 	bic.w	r3, r3, #8
 80034d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a13      	ldr	r2, [pc, #76]	@ (800353c <TIM_OC1_SetConfig+0xc8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d111      	bne.n	8003516 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00

08003540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 0210 	bic.w	r2, r3, #16
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 0320 	bic.w	r3, r3, #32
 800358a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1d      	ldr	r2, [pc, #116]	@ (8003610 <TIM_OC2_SetConfig+0xd0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10d      	bne.n	80035bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a14      	ldr	r2, [pc, #80]	@ (8003610 <TIM_OC2_SetConfig+0xd0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d113      	bne.n	80035ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00

08003614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800365c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1d      	ldr	r2, [pc, #116]	@ (80036e4 <TIM_OC3_SetConfig+0xd0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10d      	bne.n	800368e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800368c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a14      	ldr	r2, [pc, #80]	@ (80036e4 <TIM_OC3_SetConfig+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d113      	bne.n	80036be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800369c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00

080036e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800371e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	031b      	lsls	r3, r3, #12
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a0f      	ldr	r2, [pc, #60]	@ (8003780 <TIM_OC4_SetConfig+0x98>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d109      	bne.n	800375c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800374e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00

08003784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2201      	movs	r2, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1a      	ldr	r2, [r3, #32]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	401a      	ands	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e046      	b.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a16      	ldr	r2, [pc, #88]	@ (800387c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003830:	d009      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a10      	ldr	r2, [pc, #64]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10c      	bne.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800384c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4313      	orrs	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800

08003888 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e042      	b.n	8003944 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd fa1c 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	@ 0x24
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fdb7 	bl	8004464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	@ 0x28
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	d175      	bne.n	8003a58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Transmit+0x2c>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e06e      	b.n	8003a5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2221      	movs	r2, #33	@ 0x21
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398a:	f7fd fb7b 	bl	8001084 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039a4:	d108      	bne.n	80039b8 <HAL_UART_Transmit+0x6c>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	e003      	b.n	80039c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c0:	e02e      	b.n	8003a20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2180      	movs	r1, #128	@ 0x80
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fb1c 	bl	800400a <UART_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e03a      	b.n	8003a5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	3302      	adds	r3, #2
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e007      	b.n	8003a12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1cb      	bne.n	80039c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2140      	movs	r1, #64	@ 0x40
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fae8 	bl	800400a <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e006      	b.n	8003a5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d112      	bne.n	8003aa2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_UART_Receive_IT+0x26>
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e00b      	b.n	8003aa4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	461a      	mov	r2, r3
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fb0f 	bl	80040bc <UART_Start_Receive_IT>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	e000      	b.n	8003aa4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b0ba      	sub	sp, #232	@ 0xe8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_UART_IRQHandler+0x66>
 8003afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fbec 	bl	80042e8 <UART_Receive_IT>
      return;
 8003b10:	e25b      	b.n	8003fca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80de 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x22c>
 8003b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80d1 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_UART_IRQHandler+0xae>
 8003b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_UART_IRQHandler+0xd2>
 8003b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	f043 0202 	orr.w	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xf6>
 8003b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	f043 0204 	orr.w	r2, r3, #4
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d011      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x126>
 8003bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d105      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	f043 0208 	orr.w	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 81f2 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_UART_IRQHandler+0x14e>
 8003be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fb77 	bl	80042e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <HAL_UART_IRQHandler+0x17a>
 8003c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d04f      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fa81 	bl	800412e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d041      	beq.n	8003cbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3314      	adds	r3, #20
 8003c40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1d9      	bne.n	8003c3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	4a7e      	ldr	r2, [pc, #504]	@ (8003e8c <HAL_UART_IRQHandler+0x3e0>)
 8003c94:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe f8f8 	bl	8001e90 <HAL_DMA_Abort_IT>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e00e      	b.n	8003cd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f993 	bl	8003fe2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e00a      	b.n	8003cd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f98f 	bl	8003fe2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	e006      	b.n	8003cd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f98b 	bl	8003fe2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cd2:	e175      	b.n	8003fc0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd4:	bf00      	nop
    return;
 8003cd6:	e173      	b.n	8003fc0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	f040 814f 	bne.w	8003f80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8148 	beq.w	8003f80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8141 	beq.w	8003f80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80b6 	beq.w	8003e90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8145 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d42:	429a      	cmp	r2, r3
 8003d44:	f080 813e 	bcs.w	8003fc4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	f000 8088 	beq.w	8003e6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d88:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1d9      	bne.n	8003d5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003db8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dcc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e1      	bne.n	8003da8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3314      	adds	r3, #20
 8003dea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003df4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e08:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e3      	bne.n	8003de4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e3c:	f023 0310 	bic.w	r3, r3, #16
 8003e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e4e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e50:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e3      	bne.n	8003e2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd ffd7 	bl	8001e1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8b6 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e88:	e09c      	b.n	8003fc4 <HAL_UART_IRQHandler+0x518>
 8003e8a:	bf00      	nop
 8003e8c:	080041f3 	.word	0x080041f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 808e 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003eac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8089 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003eda:	647a      	str	r2, [r7, #68]	@ 0x44
 8003edc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ee0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e3      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3314      	adds	r3, #20
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	623b      	str	r3, [r7, #32]
   return(result);
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f12:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e3      	bne.n	8003eee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f58:	61fa      	str	r2, [r7, #28]
 8003f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	617b      	str	r3, [r7, #20]
   return(result);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e3      	bne.n	8003f34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f83b 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f7e:	e023      	b.n	8003fc8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x4f4>
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f93e 	bl	800421a <UART_Transmit_IT>
    return;
 8003f9e:	e014      	b.n	8003fca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00e      	beq.n	8003fca <HAL_UART_IRQHandler+0x51e>
 8003fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f97d 	bl	80042b8 <UART_EndTransmit_IT>
    return;
 8003fbe:	e004      	b.n	8003fca <HAL_UART_IRQHandler+0x51e>
    return;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <HAL_UART_IRQHandler+0x51e>
      return;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_UART_IRQHandler+0x51e>
      return;
 8003fc8:	bf00      	nop
  }
}
 8003fca:	37e8      	adds	r7, #232	@ 0xe8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401a:	e03b      	b.n	8004094 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004022:	d037      	beq.n	8004094 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004024:	f7fd f82e 	bl	8001084 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <UART_WaitOnFlagUntilTimeout+0x30>
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e03a      	b.n	80040b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d023      	beq.n	8004094 <UART_WaitOnFlagUntilTimeout+0x8a>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b80      	cmp	r3, #128	@ 0x80
 8004050:	d020      	beq.n	8004094 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b40      	cmp	r3, #64	@ 0x40
 8004056:	d01d      	beq.n	8004094 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b08      	cmp	r3, #8
 8004064:	d116      	bne.n	8004094 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f856 	bl	800412e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2208      	movs	r2, #8
 8004086:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e00f      	b.n	80040b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d0b4      	beq.n	800401c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	88fa      	ldrh	r2, [r7, #6]
 80040da:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2222      	movs	r2, #34	@ 0x22
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004100:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0220 	orr.w	r2, r2, #32
 8004120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800412e:	b480      	push	{r7}
 8004130:	b095      	sub	sp, #84	@ 0x54
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800414c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004156:	643a      	str	r2, [r7, #64]	@ 0x40
 8004158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800415c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	61fb      	str	r3, [r7, #28]
   return(result);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800418a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e5      	bne.n	800416a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d119      	bne.n	80041da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0310 	bic.w	r3, r3, #16
 80041bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c6:	61ba      	str	r2, [r7, #24]
 80041c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6979      	ldr	r1, [r7, #20]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	613b      	str	r3, [r7, #16]
   return(result);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041e8:	bf00      	nop
 80041ea:	3754      	adds	r7, #84	@ 0x54
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7ff fee8 	bl	8003fe2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b21      	cmp	r3, #33	@ 0x21
 800422c:	d13e      	bne.n	80042ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004236:	d114      	bne.n	8004262 <UART_Transmit_IT+0x48>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d110      	bne.n	8004262 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004254:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]
 8004260:	e008      	b.n	8004274 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	1c59      	adds	r1, r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6211      	str	r1, [r2, #32]
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29b      	uxth	r3, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4619      	mov	r1, r3
 8004282:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fe79 	bl	8003fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	@ 0x30
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b22      	cmp	r3, #34	@ 0x22
 80042fa:	f040 80ae 	bne.w	800445a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004306:	d117      	bne.n	8004338 <UART_Receive_IT+0x50>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d113      	bne.n	8004338 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	b29a      	uxth	r2, r3
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	629a      	str	r2, [r3, #40]	@ 0x28
 8004336:	e026      	b.n	8004386 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434a:	d007      	beq.n	800435c <UART_Receive_IT+0x74>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <UART_Receive_IT+0x82>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e008      	b.n	800437c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004376:	b2da      	uxtb	r2, r3
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004396:	2b00      	cmp	r3, #0
 8004398:	d15d      	bne.n	8004456 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0220 	bic.w	r2, r2, #32
 80043a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d135      	bne.n	800444c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	613b      	str	r3, [r7, #16]
   return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004406:	623a      	str	r2, [r7, #32]
 8004408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	61bb      	str	r3, [r7, #24]
   return(result);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e5      	bne.n	80043e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d10a      	bne.n	800443e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fdd5 	bl	8003ff4 <HAL_UARTEx_RxEventCallback>
 800444a:	e002      	b.n	8004452 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fc f87d 	bl	800054c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e002      	b.n	800445c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3730      	adds	r7, #48	@ 0x30
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800449e:	f023 030c 	bic.w	r3, r3, #12
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004578 <UART_SetConfig+0x114>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe faf4 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	e002      	b.n	80044da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe fadc 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 80044d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009a      	lsls	r2, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	4a22      	ldr	r2, [pc, #136]	@ (800457c <UART_SetConfig+0x118>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	0119      	lsls	r1, r3, #4
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009a      	lsls	r2, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004510:	4b1a      	ldr	r3, [pc, #104]	@ (800457c <UART_SetConfig+0x118>)
 8004512:	fba3 0302 	umull	r0, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2064      	movs	r0, #100	@ 0x64
 800451a:	fb00 f303 	mul.w	r3, r0, r3
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	3332      	adds	r3, #50	@ 0x32
 8004524:	4a15      	ldr	r2, [pc, #84]	@ (800457c <UART_SetConfig+0x118>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004530:	4419      	add	r1, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009a      	lsls	r2, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	fbb2 f2f3 	udiv	r2, r2, r3
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <UART_SetConfig+0x118>)
 800454a:	fba3 0302 	umull	r0, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2064      	movs	r0, #100	@ 0x64
 8004552:	fb00 f303 	mul.w	r3, r0, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	@ 0x32
 800455c:	4a07      	ldr	r2, [pc, #28]	@ (800457c <UART_SetConfig+0x118>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	440a      	add	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40013800 	.word	0x40013800
 800457c:	51eb851f 	.word	0x51eb851f

08004580 <atoi>:
 8004580:	220a      	movs	r2, #10
 8004582:	2100      	movs	r1, #0
 8004584:	f000 b91e 	b.w	80047c4 <strtol>

08004588 <std>:
 8004588:	2300      	movs	r3, #0
 800458a:	b510      	push	{r4, lr}
 800458c:	4604      	mov	r4, r0
 800458e:	e9c0 3300 	strd	r3, r3, [r0]
 8004592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004596:	6083      	str	r3, [r0, #8]
 8004598:	8181      	strh	r1, [r0, #12]
 800459a:	6643      	str	r3, [r0, #100]	@ 0x64
 800459c:	81c2      	strh	r2, [r0, #14]
 800459e:	6183      	str	r3, [r0, #24]
 80045a0:	4619      	mov	r1, r3
 80045a2:	2208      	movs	r2, #8
 80045a4:	305c      	adds	r0, #92	@ 0x5c
 80045a6:	f000 f947 	bl	8004838 <memset>
 80045aa:	4b0d      	ldr	r3, [pc, #52]	@ (80045e0 <std+0x58>)
 80045ac:	6224      	str	r4, [r4, #32]
 80045ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80045b0:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <std+0x5c>)
 80045b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <std+0x60>)
 80045b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045b8:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <std+0x64>)
 80045ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <std+0x68>)
 80045be:	429c      	cmp	r4, r3
 80045c0:	d006      	beq.n	80045d0 <std+0x48>
 80045c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045c6:	4294      	cmp	r4, r2
 80045c8:	d002      	beq.n	80045d0 <std+0x48>
 80045ca:	33d0      	adds	r3, #208	@ 0xd0
 80045cc:	429c      	cmp	r4, r3
 80045ce:	d105      	bne.n	80045dc <std+0x54>
 80045d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f000 b960 	b.w	800489c <__retarget_lock_init_recursive>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	bf00      	nop
 80045e0:	080050ed 	.word	0x080050ed
 80045e4:	0800510f 	.word	0x0800510f
 80045e8:	08005147 	.word	0x08005147
 80045ec:	0800516b 	.word	0x0800516b
 80045f0:	2000016c 	.word	0x2000016c

080045f4 <stdio_exit_handler>:
 80045f4:	4a02      	ldr	r2, [pc, #8]	@ (8004600 <stdio_exit_handler+0xc>)
 80045f6:	4903      	ldr	r1, [pc, #12]	@ (8004604 <stdio_exit_handler+0x10>)
 80045f8:	4803      	ldr	r0, [pc, #12]	@ (8004608 <stdio_exit_handler+0x14>)
 80045fa:	f000 b8ed 	b.w	80047d8 <_fwalk_sglue>
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c
 8004604:	08005085 	.word	0x08005085
 8004608:	2000001c 	.word	0x2000001c

0800460c <cleanup_stdio>:
 800460c:	6841      	ldr	r1, [r0, #4]
 800460e:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <cleanup_stdio+0x34>)
 8004610:	b510      	push	{r4, lr}
 8004612:	4299      	cmp	r1, r3
 8004614:	4604      	mov	r4, r0
 8004616:	d001      	beq.n	800461c <cleanup_stdio+0x10>
 8004618:	f000 fd34 	bl	8005084 <_fflush_r>
 800461c:	68a1      	ldr	r1, [r4, #8]
 800461e:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <cleanup_stdio+0x38>)
 8004620:	4299      	cmp	r1, r3
 8004622:	d002      	beq.n	800462a <cleanup_stdio+0x1e>
 8004624:	4620      	mov	r0, r4
 8004626:	f000 fd2d 	bl	8005084 <_fflush_r>
 800462a:	68e1      	ldr	r1, [r4, #12]
 800462c:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <cleanup_stdio+0x3c>)
 800462e:	4299      	cmp	r1, r3
 8004630:	d004      	beq.n	800463c <cleanup_stdio+0x30>
 8004632:	4620      	mov	r0, r4
 8004634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004638:	f000 bd24 	b.w	8005084 <_fflush_r>
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	2000016c 	.word	0x2000016c
 8004644:	200001d4 	.word	0x200001d4
 8004648:	2000023c 	.word	0x2000023c

0800464c <global_stdio_init.part.0>:
 800464c:	b510      	push	{r4, lr}
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <global_stdio_init.part.0+0x30>)
 8004650:	4c0b      	ldr	r4, [pc, #44]	@ (8004680 <global_stdio_init.part.0+0x34>)
 8004652:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <global_stdio_init.part.0+0x38>)
 8004654:	4620      	mov	r0, r4
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	2104      	movs	r1, #4
 800465a:	2200      	movs	r2, #0
 800465c:	f7ff ff94 	bl	8004588 <std>
 8004660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004664:	2201      	movs	r2, #1
 8004666:	2109      	movs	r1, #9
 8004668:	f7ff ff8e 	bl	8004588 <std>
 800466c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004670:	2202      	movs	r2, #2
 8004672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004676:	2112      	movs	r1, #18
 8004678:	f7ff bf86 	b.w	8004588 <std>
 800467c:	200002a4 	.word	0x200002a4
 8004680:	2000016c 	.word	0x2000016c
 8004684:	080045f5 	.word	0x080045f5

08004688 <__sfp_lock_acquire>:
 8004688:	4801      	ldr	r0, [pc, #4]	@ (8004690 <__sfp_lock_acquire+0x8>)
 800468a:	f000 b908 	b.w	800489e <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	200002a9 	.word	0x200002a9

08004694 <__sfp_lock_release>:
 8004694:	4801      	ldr	r0, [pc, #4]	@ (800469c <__sfp_lock_release+0x8>)
 8004696:	f000 b903 	b.w	80048a0 <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	200002a9 	.word	0x200002a9

080046a0 <__sinit>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	4604      	mov	r4, r0
 80046a4:	f7ff fff0 	bl	8004688 <__sfp_lock_acquire>
 80046a8:	6a23      	ldr	r3, [r4, #32]
 80046aa:	b11b      	cbz	r3, 80046b4 <__sinit+0x14>
 80046ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b0:	f7ff bff0 	b.w	8004694 <__sfp_lock_release>
 80046b4:	4b04      	ldr	r3, [pc, #16]	@ (80046c8 <__sinit+0x28>)
 80046b6:	6223      	str	r3, [r4, #32]
 80046b8:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <__sinit+0x2c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f5      	bne.n	80046ac <__sinit+0xc>
 80046c0:	f7ff ffc4 	bl	800464c <global_stdio_init.part.0>
 80046c4:	e7f2      	b.n	80046ac <__sinit+0xc>
 80046c6:	bf00      	nop
 80046c8:	0800460d 	.word	0x0800460d
 80046cc:	200002a4 	.word	0x200002a4

080046d0 <_strtol_l.isra.0>:
 80046d0:	2b24      	cmp	r3, #36	@ 0x24
 80046d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d6:	4686      	mov	lr, r0
 80046d8:	4690      	mov	r8, r2
 80046da:	d801      	bhi.n	80046e0 <_strtol_l.isra.0+0x10>
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d106      	bne.n	80046ee <_strtol_l.isra.0+0x1e>
 80046e0:	f000 f8b2 	bl	8004848 <__errno>
 80046e4:	2316      	movs	r3, #22
 80046e6:	6003      	str	r3, [r0, #0]
 80046e8:	2000      	movs	r0, #0
 80046ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ee:	460d      	mov	r5, r1
 80046f0:	4833      	ldr	r0, [pc, #204]	@ (80047c0 <_strtol_l.isra.0+0xf0>)
 80046f2:	462a      	mov	r2, r5
 80046f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046f8:	5d06      	ldrb	r6, [r0, r4]
 80046fa:	f016 0608 	ands.w	r6, r6, #8
 80046fe:	d1f8      	bne.n	80046f2 <_strtol_l.isra.0+0x22>
 8004700:	2c2d      	cmp	r4, #45	@ 0x2d
 8004702:	d110      	bne.n	8004726 <_strtol_l.isra.0+0x56>
 8004704:	2601      	movs	r6, #1
 8004706:	782c      	ldrb	r4, [r5, #0]
 8004708:	1c95      	adds	r5, r2, #2
 800470a:	f033 0210 	bics.w	r2, r3, #16
 800470e:	d115      	bne.n	800473c <_strtol_l.isra.0+0x6c>
 8004710:	2c30      	cmp	r4, #48	@ 0x30
 8004712:	d10d      	bne.n	8004730 <_strtol_l.isra.0+0x60>
 8004714:	782a      	ldrb	r2, [r5, #0]
 8004716:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800471a:	2a58      	cmp	r2, #88	@ 0x58
 800471c:	d108      	bne.n	8004730 <_strtol_l.isra.0+0x60>
 800471e:	786c      	ldrb	r4, [r5, #1]
 8004720:	3502      	adds	r5, #2
 8004722:	2310      	movs	r3, #16
 8004724:	e00a      	b.n	800473c <_strtol_l.isra.0+0x6c>
 8004726:	2c2b      	cmp	r4, #43	@ 0x2b
 8004728:	bf04      	itt	eq
 800472a:	782c      	ldrbeq	r4, [r5, #0]
 800472c:	1c95      	addeq	r5, r2, #2
 800472e:	e7ec      	b.n	800470a <_strtol_l.isra.0+0x3a>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f6      	bne.n	8004722 <_strtol_l.isra.0+0x52>
 8004734:	2c30      	cmp	r4, #48	@ 0x30
 8004736:	bf14      	ite	ne
 8004738:	230a      	movne	r3, #10
 800473a:	2308      	moveq	r3, #8
 800473c:	2200      	movs	r2, #0
 800473e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004742:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004746:	fbbc f9f3 	udiv	r9, ip, r3
 800474a:	4610      	mov	r0, r2
 800474c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004750:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004754:	2f09      	cmp	r7, #9
 8004756:	d80f      	bhi.n	8004778 <_strtol_l.isra.0+0xa8>
 8004758:	463c      	mov	r4, r7
 800475a:	42a3      	cmp	r3, r4
 800475c:	dd1b      	ble.n	8004796 <_strtol_l.isra.0+0xc6>
 800475e:	1c57      	adds	r7, r2, #1
 8004760:	d007      	beq.n	8004772 <_strtol_l.isra.0+0xa2>
 8004762:	4581      	cmp	r9, r0
 8004764:	d314      	bcc.n	8004790 <_strtol_l.isra.0+0xc0>
 8004766:	d101      	bne.n	800476c <_strtol_l.isra.0+0x9c>
 8004768:	45a2      	cmp	sl, r4
 800476a:	db11      	blt.n	8004790 <_strtol_l.isra.0+0xc0>
 800476c:	2201      	movs	r2, #1
 800476e:	fb00 4003 	mla	r0, r0, r3, r4
 8004772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004776:	e7eb      	b.n	8004750 <_strtol_l.isra.0+0x80>
 8004778:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800477c:	2f19      	cmp	r7, #25
 800477e:	d801      	bhi.n	8004784 <_strtol_l.isra.0+0xb4>
 8004780:	3c37      	subs	r4, #55	@ 0x37
 8004782:	e7ea      	b.n	800475a <_strtol_l.isra.0+0x8a>
 8004784:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004788:	2f19      	cmp	r7, #25
 800478a:	d804      	bhi.n	8004796 <_strtol_l.isra.0+0xc6>
 800478c:	3c57      	subs	r4, #87	@ 0x57
 800478e:	e7e4      	b.n	800475a <_strtol_l.isra.0+0x8a>
 8004790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004794:	e7ed      	b.n	8004772 <_strtol_l.isra.0+0xa2>
 8004796:	1c53      	adds	r3, r2, #1
 8004798:	d108      	bne.n	80047ac <_strtol_l.isra.0+0xdc>
 800479a:	2322      	movs	r3, #34	@ 0x22
 800479c:	4660      	mov	r0, ip
 800479e:	f8ce 3000 	str.w	r3, [lr]
 80047a2:	f1b8 0f00 	cmp.w	r8, #0
 80047a6:	d0a0      	beq.n	80046ea <_strtol_l.isra.0+0x1a>
 80047a8:	1e69      	subs	r1, r5, #1
 80047aa:	e006      	b.n	80047ba <_strtol_l.isra.0+0xea>
 80047ac:	b106      	cbz	r6, 80047b0 <_strtol_l.isra.0+0xe0>
 80047ae:	4240      	negs	r0, r0
 80047b0:	f1b8 0f00 	cmp.w	r8, #0
 80047b4:	d099      	beq.n	80046ea <_strtol_l.isra.0+0x1a>
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	d1f6      	bne.n	80047a8 <_strtol_l.isra.0+0xd8>
 80047ba:	f8c8 1000 	str.w	r1, [r8]
 80047be:	e794      	b.n	80046ea <_strtol_l.isra.0+0x1a>
 80047c0:	08005597 	.word	0x08005597

080047c4 <strtol>:
 80047c4:	4613      	mov	r3, r2
 80047c6:	460a      	mov	r2, r1
 80047c8:	4601      	mov	r1, r0
 80047ca:	4802      	ldr	r0, [pc, #8]	@ (80047d4 <strtol+0x10>)
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f7ff bf7f 	b.w	80046d0 <_strtol_l.isra.0>
 80047d2:	bf00      	nop
 80047d4:	20000018 	.word	0x20000018

080047d8 <_fwalk_sglue>:
 80047d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047dc:	4607      	mov	r7, r0
 80047de:	4688      	mov	r8, r1
 80047e0:	4614      	mov	r4, r2
 80047e2:	2600      	movs	r6, #0
 80047e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047e8:	f1b9 0901 	subs.w	r9, r9, #1
 80047ec:	d505      	bpl.n	80047fa <_fwalk_sglue+0x22>
 80047ee:	6824      	ldr	r4, [r4, #0]
 80047f0:	2c00      	cmp	r4, #0
 80047f2:	d1f7      	bne.n	80047e4 <_fwalk_sglue+0xc>
 80047f4:	4630      	mov	r0, r6
 80047f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047fa:	89ab      	ldrh	r3, [r5, #12]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d907      	bls.n	8004810 <_fwalk_sglue+0x38>
 8004800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004804:	3301      	adds	r3, #1
 8004806:	d003      	beq.n	8004810 <_fwalk_sglue+0x38>
 8004808:	4629      	mov	r1, r5
 800480a:	4638      	mov	r0, r7
 800480c:	47c0      	blx	r8
 800480e:	4306      	orrs	r6, r0
 8004810:	3568      	adds	r5, #104	@ 0x68
 8004812:	e7e9      	b.n	80047e8 <_fwalk_sglue+0x10>

08004814 <iprintf>:
 8004814:	b40f      	push	{r0, r1, r2, r3}
 8004816:	b507      	push	{r0, r1, r2, lr}
 8004818:	4906      	ldr	r1, [pc, #24]	@ (8004834 <iprintf+0x20>)
 800481a:	ab04      	add	r3, sp, #16
 800481c:	6808      	ldr	r0, [r1, #0]
 800481e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004822:	6881      	ldr	r1, [r0, #8]
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	f000 f863 	bl	80048f0 <_vfiprintf_r>
 800482a:	b003      	add	sp, #12
 800482c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004830:	b004      	add	sp, #16
 8004832:	4770      	bx	lr
 8004834:	20000018 	.word	0x20000018

08004838 <memset>:
 8004838:	4603      	mov	r3, r0
 800483a:	4402      	add	r2, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <__errno>:
 8004848:	4b01      	ldr	r3, [pc, #4]	@ (8004850 <__errno+0x8>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000018 	.word	0x20000018

08004854 <__libc_init_array>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	2600      	movs	r6, #0
 8004858:	4d0c      	ldr	r5, [pc, #48]	@ (800488c <__libc_init_array+0x38>)
 800485a:	4c0d      	ldr	r4, [pc, #52]	@ (8004890 <__libc_init_array+0x3c>)
 800485c:	1b64      	subs	r4, r4, r5
 800485e:	10a4      	asrs	r4, r4, #2
 8004860:	42a6      	cmp	r6, r4
 8004862:	d109      	bne.n	8004878 <__libc_init_array+0x24>
 8004864:	f000 fe4a 	bl	80054fc <_init>
 8004868:	2600      	movs	r6, #0
 800486a:	4d0a      	ldr	r5, [pc, #40]	@ (8004894 <__libc_init_array+0x40>)
 800486c:	4c0a      	ldr	r4, [pc, #40]	@ (8004898 <__libc_init_array+0x44>)
 800486e:	1b64      	subs	r4, r4, r5
 8004870:	10a4      	asrs	r4, r4, #2
 8004872:	42a6      	cmp	r6, r4
 8004874:	d105      	bne.n	8004882 <__libc_init_array+0x2e>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	f855 3b04 	ldr.w	r3, [r5], #4
 800487c:	4798      	blx	r3
 800487e:	3601      	adds	r6, #1
 8004880:	e7ee      	b.n	8004860 <__libc_init_array+0xc>
 8004882:	f855 3b04 	ldr.w	r3, [r5], #4
 8004886:	4798      	blx	r3
 8004888:	3601      	adds	r6, #1
 800488a:	e7f2      	b.n	8004872 <__libc_init_array+0x1e>
 800488c:	080056cc 	.word	0x080056cc
 8004890:	080056cc 	.word	0x080056cc
 8004894:	080056cc 	.word	0x080056cc
 8004898:	080056d0 	.word	0x080056d0

0800489c <__retarget_lock_init_recursive>:
 800489c:	4770      	bx	lr

0800489e <__retarget_lock_acquire_recursive>:
 800489e:	4770      	bx	lr

080048a0 <__retarget_lock_release_recursive>:
 80048a0:	4770      	bx	lr

080048a2 <__sfputc_r>:
 80048a2:	6893      	ldr	r3, [r2, #8]
 80048a4:	b410      	push	{r4}
 80048a6:	3b01      	subs	r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	6093      	str	r3, [r2, #8]
 80048ac:	da07      	bge.n	80048be <__sfputc_r+0x1c>
 80048ae:	6994      	ldr	r4, [r2, #24]
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	db01      	blt.n	80048b8 <__sfputc_r+0x16>
 80048b4:	290a      	cmp	r1, #10
 80048b6:	d102      	bne.n	80048be <__sfputc_r+0x1c>
 80048b8:	bc10      	pop	{r4}
 80048ba:	f000 bc5a 	b.w	8005172 <__swbuf_r>
 80048be:	6813      	ldr	r3, [r2, #0]
 80048c0:	1c58      	adds	r0, r3, #1
 80048c2:	6010      	str	r0, [r2, #0]
 80048c4:	7019      	strb	r1, [r3, #0]
 80048c6:	4608      	mov	r0, r1
 80048c8:	bc10      	pop	{r4}
 80048ca:	4770      	bx	lr

080048cc <__sfputs_r>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	4606      	mov	r6, r0
 80048d0:	460f      	mov	r7, r1
 80048d2:	4614      	mov	r4, r2
 80048d4:	18d5      	adds	r5, r2, r3
 80048d6:	42ac      	cmp	r4, r5
 80048d8:	d101      	bne.n	80048de <__sfputs_r+0x12>
 80048da:	2000      	movs	r0, #0
 80048dc:	e007      	b.n	80048ee <__sfputs_r+0x22>
 80048de:	463a      	mov	r2, r7
 80048e0:	4630      	mov	r0, r6
 80048e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e6:	f7ff ffdc 	bl	80048a2 <__sfputc_r>
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	d1f3      	bne.n	80048d6 <__sfputs_r+0xa>
 80048ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048f0 <_vfiprintf_r>:
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	460d      	mov	r5, r1
 80048f6:	4614      	mov	r4, r2
 80048f8:	4698      	mov	r8, r3
 80048fa:	4606      	mov	r6, r0
 80048fc:	b09d      	sub	sp, #116	@ 0x74
 80048fe:	b118      	cbz	r0, 8004908 <_vfiprintf_r+0x18>
 8004900:	6a03      	ldr	r3, [r0, #32]
 8004902:	b90b      	cbnz	r3, 8004908 <_vfiprintf_r+0x18>
 8004904:	f7ff fecc 	bl	80046a0 <__sinit>
 8004908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800490a:	07d9      	lsls	r1, r3, #31
 800490c:	d405      	bmi.n	800491a <_vfiprintf_r+0x2a>
 800490e:	89ab      	ldrh	r3, [r5, #12]
 8004910:	059a      	lsls	r2, r3, #22
 8004912:	d402      	bmi.n	800491a <_vfiprintf_r+0x2a>
 8004914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004916:	f7ff ffc2 	bl	800489e <__retarget_lock_acquire_recursive>
 800491a:	89ab      	ldrh	r3, [r5, #12]
 800491c:	071b      	lsls	r3, r3, #28
 800491e:	d501      	bpl.n	8004924 <_vfiprintf_r+0x34>
 8004920:	692b      	ldr	r3, [r5, #16]
 8004922:	b99b      	cbnz	r3, 800494c <_vfiprintf_r+0x5c>
 8004924:	4629      	mov	r1, r5
 8004926:	4630      	mov	r0, r6
 8004928:	f000 fc62 	bl	80051f0 <__swsetup_r>
 800492c:	b170      	cbz	r0, 800494c <_vfiprintf_r+0x5c>
 800492e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004930:	07dc      	lsls	r4, r3, #31
 8004932:	d504      	bpl.n	800493e <_vfiprintf_r+0x4e>
 8004934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004938:	b01d      	add	sp, #116	@ 0x74
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493e:	89ab      	ldrh	r3, [r5, #12]
 8004940:	0598      	lsls	r0, r3, #22
 8004942:	d4f7      	bmi.n	8004934 <_vfiprintf_r+0x44>
 8004944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004946:	f7ff ffab 	bl	80048a0 <__retarget_lock_release_recursive>
 800494a:	e7f3      	b.n	8004934 <_vfiprintf_r+0x44>
 800494c:	2300      	movs	r3, #0
 800494e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004950:	2320      	movs	r3, #32
 8004952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004956:	2330      	movs	r3, #48	@ 0x30
 8004958:	f04f 0901 	mov.w	r9, #1
 800495c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004960:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004b0c <_vfiprintf_r+0x21c>
 8004964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004968:	4623      	mov	r3, r4
 800496a:	469a      	mov	sl, r3
 800496c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004970:	b10a      	cbz	r2, 8004976 <_vfiprintf_r+0x86>
 8004972:	2a25      	cmp	r2, #37	@ 0x25
 8004974:	d1f9      	bne.n	800496a <_vfiprintf_r+0x7a>
 8004976:	ebba 0b04 	subs.w	fp, sl, r4
 800497a:	d00b      	beq.n	8004994 <_vfiprintf_r+0xa4>
 800497c:	465b      	mov	r3, fp
 800497e:	4622      	mov	r2, r4
 8004980:	4629      	mov	r1, r5
 8004982:	4630      	mov	r0, r6
 8004984:	f7ff ffa2 	bl	80048cc <__sfputs_r>
 8004988:	3001      	adds	r0, #1
 800498a:	f000 80a7 	beq.w	8004adc <_vfiprintf_r+0x1ec>
 800498e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004990:	445a      	add	r2, fp
 8004992:	9209      	str	r2, [sp, #36]	@ 0x24
 8004994:	f89a 3000 	ldrb.w	r3, [sl]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 809f 	beq.w	8004adc <_vfiprintf_r+0x1ec>
 800499e:	2300      	movs	r3, #0
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a8:	f10a 0a01 	add.w	sl, sl, #1
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	9307      	str	r3, [sp, #28]
 80049b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80049b6:	4654      	mov	r4, sl
 80049b8:	2205      	movs	r2, #5
 80049ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049be:	4853      	ldr	r0, [pc, #332]	@ (8004b0c <_vfiprintf_r+0x21c>)
 80049c0:	f000 fd46 	bl	8005450 <memchr>
 80049c4:	9a04      	ldr	r2, [sp, #16]
 80049c6:	b9d8      	cbnz	r0, 8004a00 <_vfiprintf_r+0x110>
 80049c8:	06d1      	lsls	r1, r2, #27
 80049ca:	bf44      	itt	mi
 80049cc:	2320      	movmi	r3, #32
 80049ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049d2:	0713      	lsls	r3, r2, #28
 80049d4:	bf44      	itt	mi
 80049d6:	232b      	movmi	r3, #43	@ 0x2b
 80049d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049dc:	f89a 3000 	ldrb.w	r3, [sl]
 80049e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049e2:	d015      	beq.n	8004a10 <_vfiprintf_r+0x120>
 80049e4:	4654      	mov	r4, sl
 80049e6:	2000      	movs	r0, #0
 80049e8:	f04f 0c0a 	mov.w	ip, #10
 80049ec:	9a07      	ldr	r2, [sp, #28]
 80049ee:	4621      	mov	r1, r4
 80049f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049f4:	3b30      	subs	r3, #48	@ 0x30
 80049f6:	2b09      	cmp	r3, #9
 80049f8:	d94b      	bls.n	8004a92 <_vfiprintf_r+0x1a2>
 80049fa:	b1b0      	cbz	r0, 8004a2a <_vfiprintf_r+0x13a>
 80049fc:	9207      	str	r2, [sp, #28]
 80049fe:	e014      	b.n	8004a2a <_vfiprintf_r+0x13a>
 8004a00:	eba0 0308 	sub.w	r3, r0, r8
 8004a04:	fa09 f303 	lsl.w	r3, r9, r3
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	46a2      	mov	sl, r4
 8004a0c:	9304      	str	r3, [sp, #16]
 8004a0e:	e7d2      	b.n	80049b6 <_vfiprintf_r+0xc6>
 8004a10:	9b03      	ldr	r3, [sp, #12]
 8004a12:	1d19      	adds	r1, r3, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	9103      	str	r1, [sp, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bfbb      	ittet	lt
 8004a1c:	425b      	neglt	r3, r3
 8004a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8004a22:	9307      	strge	r3, [sp, #28]
 8004a24:	9307      	strlt	r3, [sp, #28]
 8004a26:	bfb8      	it	lt
 8004a28:	9204      	strlt	r2, [sp, #16]
 8004a2a:	7823      	ldrb	r3, [r4, #0]
 8004a2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a2e:	d10a      	bne.n	8004a46 <_vfiprintf_r+0x156>
 8004a30:	7863      	ldrb	r3, [r4, #1]
 8004a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a34:	d132      	bne.n	8004a9c <_vfiprintf_r+0x1ac>
 8004a36:	9b03      	ldr	r3, [sp, #12]
 8004a38:	3402      	adds	r4, #2
 8004a3a:	1d1a      	adds	r2, r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	9203      	str	r2, [sp, #12]
 8004a40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a44:	9305      	str	r3, [sp, #20]
 8004a46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004b10 <_vfiprintf_r+0x220>
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	7821      	ldrb	r1, [r4, #0]
 8004a50:	f000 fcfe 	bl	8005450 <memchr>
 8004a54:	b138      	cbz	r0, 8004a66 <_vfiprintf_r+0x176>
 8004a56:	2240      	movs	r2, #64	@ 0x40
 8004a58:	9b04      	ldr	r3, [sp, #16]
 8004a5a:	eba0 000a 	sub.w	r0, r0, sl
 8004a5e:	4082      	lsls	r2, r0
 8004a60:	4313      	orrs	r3, r2
 8004a62:	3401      	adds	r4, #1
 8004a64:	9304      	str	r3, [sp, #16]
 8004a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a6a:	2206      	movs	r2, #6
 8004a6c:	4829      	ldr	r0, [pc, #164]	@ (8004b14 <_vfiprintf_r+0x224>)
 8004a6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a72:	f000 fced 	bl	8005450 <memchr>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d03f      	beq.n	8004afa <_vfiprintf_r+0x20a>
 8004a7a:	4b27      	ldr	r3, [pc, #156]	@ (8004b18 <_vfiprintf_r+0x228>)
 8004a7c:	bb1b      	cbnz	r3, 8004ac6 <_vfiprintf_r+0x1d6>
 8004a7e:	9b03      	ldr	r3, [sp, #12]
 8004a80:	3307      	adds	r3, #7
 8004a82:	f023 0307 	bic.w	r3, r3, #7
 8004a86:	3308      	adds	r3, #8
 8004a88:	9303      	str	r3, [sp, #12]
 8004a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a8c:	443b      	add	r3, r7
 8004a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a90:	e76a      	b.n	8004968 <_vfiprintf_r+0x78>
 8004a92:	460c      	mov	r4, r1
 8004a94:	2001      	movs	r0, #1
 8004a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a9a:	e7a8      	b.n	80049ee <_vfiprintf_r+0xfe>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f04f 0c0a 	mov.w	ip, #10
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	3401      	adds	r4, #1
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aae:	3a30      	subs	r2, #48	@ 0x30
 8004ab0:	2a09      	cmp	r2, #9
 8004ab2:	d903      	bls.n	8004abc <_vfiprintf_r+0x1cc>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0c6      	beq.n	8004a46 <_vfiprintf_r+0x156>
 8004ab8:	9105      	str	r1, [sp, #20]
 8004aba:	e7c4      	b.n	8004a46 <_vfiprintf_r+0x156>
 8004abc:	4604      	mov	r4, r0
 8004abe:	2301      	movs	r3, #1
 8004ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ac4:	e7f0      	b.n	8004aa8 <_vfiprintf_r+0x1b8>
 8004ac6:	ab03      	add	r3, sp, #12
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	462a      	mov	r2, r5
 8004acc:	4630      	mov	r0, r6
 8004ace:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <_vfiprintf_r+0x22c>)
 8004ad0:	a904      	add	r1, sp, #16
 8004ad2:	f3af 8000 	nop.w
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	1c78      	adds	r0, r7, #1
 8004ada:	d1d6      	bne.n	8004a8a <_vfiprintf_r+0x19a>
 8004adc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ade:	07d9      	lsls	r1, r3, #31
 8004ae0:	d405      	bmi.n	8004aee <_vfiprintf_r+0x1fe>
 8004ae2:	89ab      	ldrh	r3, [r5, #12]
 8004ae4:	059a      	lsls	r2, r3, #22
 8004ae6:	d402      	bmi.n	8004aee <_vfiprintf_r+0x1fe>
 8004ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aea:	f7ff fed9 	bl	80048a0 <__retarget_lock_release_recursive>
 8004aee:	89ab      	ldrh	r3, [r5, #12]
 8004af0:	065b      	lsls	r3, r3, #25
 8004af2:	f53f af1f 	bmi.w	8004934 <_vfiprintf_r+0x44>
 8004af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004af8:	e71e      	b.n	8004938 <_vfiprintf_r+0x48>
 8004afa:	ab03      	add	r3, sp, #12
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	462a      	mov	r2, r5
 8004b00:	4630      	mov	r0, r6
 8004b02:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <_vfiprintf_r+0x22c>)
 8004b04:	a904      	add	r1, sp, #16
 8004b06:	f000 f91f 	bl	8004d48 <_printf_i>
 8004b0a:	e7e4      	b.n	8004ad6 <_vfiprintf_r+0x1e6>
 8004b0c:	08005697 	.word	0x08005697
 8004b10:	0800569d 	.word	0x0800569d
 8004b14:	080056a1 	.word	0x080056a1
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	080048cd 	.word	0x080048cd

08004b20 <sbrk_aligned>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4e0f      	ldr	r6, [pc, #60]	@ (8004b60 <sbrk_aligned+0x40>)
 8004b24:	460c      	mov	r4, r1
 8004b26:	6831      	ldr	r1, [r6, #0]
 8004b28:	4605      	mov	r5, r0
 8004b2a:	b911      	cbnz	r1, 8004b32 <sbrk_aligned+0x12>
 8004b2c:	f000 fc4c 	bl	80053c8 <_sbrk_r>
 8004b30:	6030      	str	r0, [r6, #0]
 8004b32:	4621      	mov	r1, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 fc47 	bl	80053c8 <_sbrk_r>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d103      	bne.n	8004b46 <sbrk_aligned+0x26>
 8004b3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b42:	4620      	mov	r0, r4
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	1cc4      	adds	r4, r0, #3
 8004b48:	f024 0403 	bic.w	r4, r4, #3
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d0f8      	beq.n	8004b42 <sbrk_aligned+0x22>
 8004b50:	1a21      	subs	r1, r4, r0
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 fc38 	bl	80053c8 <_sbrk_r>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d1f2      	bne.n	8004b42 <sbrk_aligned+0x22>
 8004b5c:	e7ef      	b.n	8004b3e <sbrk_aligned+0x1e>
 8004b5e:	bf00      	nop
 8004b60:	200002ac 	.word	0x200002ac

08004b64 <_malloc_r>:
 8004b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b68:	1ccd      	adds	r5, r1, #3
 8004b6a:	f025 0503 	bic.w	r5, r5, #3
 8004b6e:	3508      	adds	r5, #8
 8004b70:	2d0c      	cmp	r5, #12
 8004b72:	bf38      	it	cc
 8004b74:	250c      	movcc	r5, #12
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	4606      	mov	r6, r0
 8004b7a:	db01      	blt.n	8004b80 <_malloc_r+0x1c>
 8004b7c:	42a9      	cmp	r1, r5
 8004b7e:	d904      	bls.n	8004b8a <_malloc_r+0x26>
 8004b80:	230c      	movs	r3, #12
 8004b82:	6033      	str	r3, [r6, #0]
 8004b84:	2000      	movs	r0, #0
 8004b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c60 <_malloc_r+0xfc>
 8004b8e:	f000 faa1 	bl	80050d4 <__malloc_lock>
 8004b92:	f8d8 3000 	ldr.w	r3, [r8]
 8004b96:	461c      	mov	r4, r3
 8004b98:	bb44      	cbnz	r4, 8004bec <_malloc_r+0x88>
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	f7ff ffbf 	bl	8004b20 <sbrk_aligned>
 8004ba2:	1c43      	adds	r3, r0, #1
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	d158      	bne.n	8004c5a <_malloc_r+0xf6>
 8004ba8:	f8d8 4000 	ldr.w	r4, [r8]
 8004bac:	4627      	mov	r7, r4
 8004bae:	2f00      	cmp	r7, #0
 8004bb0:	d143      	bne.n	8004c3a <_malloc_r+0xd6>
 8004bb2:	2c00      	cmp	r4, #0
 8004bb4:	d04b      	beq.n	8004c4e <_malloc_r+0xea>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	4639      	mov	r1, r7
 8004bba:	4630      	mov	r0, r6
 8004bbc:	eb04 0903 	add.w	r9, r4, r3
 8004bc0:	f000 fc02 	bl	80053c8 <_sbrk_r>
 8004bc4:	4581      	cmp	r9, r0
 8004bc6:	d142      	bne.n	8004c4e <_malloc_r+0xea>
 8004bc8:	6821      	ldr	r1, [r4, #0]
 8004bca:	4630      	mov	r0, r6
 8004bcc:	1a6d      	subs	r5, r5, r1
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f7ff ffa6 	bl	8004b20 <sbrk_aligned>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d03a      	beq.n	8004c4e <_malloc_r+0xea>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	442b      	add	r3, r5
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	f8d8 3000 	ldr.w	r3, [r8]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	bb62      	cbnz	r2, 8004c40 <_malloc_r+0xdc>
 8004be6:	f8c8 7000 	str.w	r7, [r8]
 8004bea:	e00f      	b.n	8004c0c <_malloc_r+0xa8>
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	1b52      	subs	r2, r2, r5
 8004bf0:	d420      	bmi.n	8004c34 <_malloc_r+0xd0>
 8004bf2:	2a0b      	cmp	r2, #11
 8004bf4:	d917      	bls.n	8004c26 <_malloc_r+0xc2>
 8004bf6:	1961      	adds	r1, r4, r5
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	6025      	str	r5, [r4, #0]
 8004bfc:	bf18      	it	ne
 8004bfe:	6059      	strne	r1, [r3, #4]
 8004c00:	6863      	ldr	r3, [r4, #4]
 8004c02:	bf08      	it	eq
 8004c04:	f8c8 1000 	streq.w	r1, [r8]
 8004c08:	5162      	str	r2, [r4, r5]
 8004c0a:	604b      	str	r3, [r1, #4]
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f000 fa67 	bl	80050e0 <__malloc_unlock>
 8004c12:	f104 000b 	add.w	r0, r4, #11
 8004c16:	1d23      	adds	r3, r4, #4
 8004c18:	f020 0007 	bic.w	r0, r0, #7
 8004c1c:	1ac2      	subs	r2, r0, r3
 8004c1e:	bf1c      	itt	ne
 8004c20:	1a1b      	subne	r3, r3, r0
 8004c22:	50a3      	strne	r3, [r4, r2]
 8004c24:	e7af      	b.n	8004b86 <_malloc_r+0x22>
 8004c26:	6862      	ldr	r2, [r4, #4]
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	bf0c      	ite	eq
 8004c2c:	f8c8 2000 	streq.w	r2, [r8]
 8004c30:	605a      	strne	r2, [r3, #4]
 8004c32:	e7eb      	b.n	8004c0c <_malloc_r+0xa8>
 8004c34:	4623      	mov	r3, r4
 8004c36:	6864      	ldr	r4, [r4, #4]
 8004c38:	e7ae      	b.n	8004b98 <_malloc_r+0x34>
 8004c3a:	463c      	mov	r4, r7
 8004c3c:	687f      	ldr	r7, [r7, #4]
 8004c3e:	e7b6      	b.n	8004bae <_malloc_r+0x4a>
 8004c40:	461a      	mov	r2, r3
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	42a3      	cmp	r3, r4
 8004c46:	d1fb      	bne.n	8004c40 <_malloc_r+0xdc>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6053      	str	r3, [r2, #4]
 8004c4c:	e7de      	b.n	8004c0c <_malloc_r+0xa8>
 8004c4e:	230c      	movs	r3, #12
 8004c50:	4630      	mov	r0, r6
 8004c52:	6033      	str	r3, [r6, #0]
 8004c54:	f000 fa44 	bl	80050e0 <__malloc_unlock>
 8004c58:	e794      	b.n	8004b84 <_malloc_r+0x20>
 8004c5a:	6005      	str	r5, [r0, #0]
 8004c5c:	e7d6      	b.n	8004c0c <_malloc_r+0xa8>
 8004c5e:	bf00      	nop
 8004c60:	200002b0 	.word	0x200002b0

08004c64 <_printf_common>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	4616      	mov	r6, r2
 8004c6a:	4698      	mov	r8, r3
 8004c6c:	688a      	ldr	r2, [r1, #8]
 8004c6e:	690b      	ldr	r3, [r1, #16]
 8004c70:	4607      	mov	r7, r0
 8004c72:	4293      	cmp	r3, r2
 8004c74:	bfb8      	it	lt
 8004c76:	4613      	movlt	r3, r2
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c7e:	460c      	mov	r4, r1
 8004c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c84:	b10a      	cbz	r2, 8004c8a <_printf_common+0x26>
 8004c86:	3301      	adds	r3, #1
 8004c88:	6033      	str	r3, [r6, #0]
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	0699      	lsls	r1, r3, #26
 8004c8e:	bf42      	ittt	mi
 8004c90:	6833      	ldrmi	r3, [r6, #0]
 8004c92:	3302      	addmi	r3, #2
 8004c94:	6033      	strmi	r3, [r6, #0]
 8004c96:	6825      	ldr	r5, [r4, #0]
 8004c98:	f015 0506 	ands.w	r5, r5, #6
 8004c9c:	d106      	bne.n	8004cac <_printf_common+0x48>
 8004c9e:	f104 0a19 	add.w	sl, r4, #25
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	6832      	ldr	r2, [r6, #0]
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	42ab      	cmp	r3, r5
 8004caa:	dc2b      	bgt.n	8004d04 <_printf_common+0xa0>
 8004cac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	3b00      	subs	r3, #0
 8004cb4:	bf18      	it	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	0692      	lsls	r2, r2, #26
 8004cba:	d430      	bmi.n	8004d1e <_printf_common+0xba>
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cc4:	47c8      	blx	r9
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d023      	beq.n	8004d12 <_printf_common+0xae>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	6922      	ldr	r2, [r4, #16]
 8004cce:	f003 0306 	and.w	r3, r3, #6
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	bf14      	ite	ne
 8004cd6:	2500      	movne	r5, #0
 8004cd8:	6833      	ldreq	r3, [r6, #0]
 8004cda:	f04f 0600 	mov.w	r6, #0
 8004cde:	bf08      	it	eq
 8004ce0:	68e5      	ldreq	r5, [r4, #12]
 8004ce2:	f104 041a 	add.w	r4, r4, #26
 8004ce6:	bf08      	it	eq
 8004ce8:	1aed      	subeq	r5, r5, r3
 8004cea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cee:	bf08      	it	eq
 8004cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	bfc4      	itt	gt
 8004cf8:	1a9b      	subgt	r3, r3, r2
 8004cfa:	18ed      	addgt	r5, r5, r3
 8004cfc:	42b5      	cmp	r5, r6
 8004cfe:	d11a      	bne.n	8004d36 <_printf_common+0xd2>
 8004d00:	2000      	movs	r0, #0
 8004d02:	e008      	b.n	8004d16 <_printf_common+0xb2>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4652      	mov	r2, sl
 8004d08:	4641      	mov	r1, r8
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	47c8      	blx	r9
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d103      	bne.n	8004d1a <_printf_common+0xb6>
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1a:	3501      	adds	r5, #1
 8004d1c:	e7c1      	b.n	8004ca2 <_printf_common+0x3e>
 8004d1e:	2030      	movs	r0, #48	@ 0x30
 8004d20:	18e1      	adds	r1, r4, r3
 8004d22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d2c:	4422      	add	r2, r4
 8004d2e:	3302      	adds	r3, #2
 8004d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d34:	e7c2      	b.n	8004cbc <_printf_common+0x58>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	47c8      	blx	r9
 8004d40:	3001      	adds	r0, #1
 8004d42:	d0e6      	beq.n	8004d12 <_printf_common+0xae>
 8004d44:	3601      	adds	r6, #1
 8004d46:	e7d9      	b.n	8004cfc <_printf_common+0x98>

08004d48 <_printf_i>:
 8004d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4c:	7e0f      	ldrb	r7, [r1, #24]
 8004d4e:	4691      	mov	r9, r2
 8004d50:	2f78      	cmp	r7, #120	@ 0x78
 8004d52:	4680      	mov	r8, r0
 8004d54:	460c      	mov	r4, r1
 8004d56:	469a      	mov	sl, r3
 8004d58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d5e:	d807      	bhi.n	8004d70 <_printf_i+0x28>
 8004d60:	2f62      	cmp	r7, #98	@ 0x62
 8004d62:	d80a      	bhi.n	8004d7a <_printf_i+0x32>
 8004d64:	2f00      	cmp	r7, #0
 8004d66:	f000 80d1 	beq.w	8004f0c <_printf_i+0x1c4>
 8004d6a:	2f58      	cmp	r7, #88	@ 0x58
 8004d6c:	f000 80b8 	beq.w	8004ee0 <_printf_i+0x198>
 8004d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d78:	e03a      	b.n	8004df0 <_printf_i+0xa8>
 8004d7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d7e:	2b15      	cmp	r3, #21
 8004d80:	d8f6      	bhi.n	8004d70 <_printf_i+0x28>
 8004d82:	a101      	add	r1, pc, #4	@ (adr r1, 8004d88 <_printf_i+0x40>)
 8004d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d88:	08004de1 	.word	0x08004de1
 8004d8c:	08004df5 	.word	0x08004df5
 8004d90:	08004d71 	.word	0x08004d71
 8004d94:	08004d71 	.word	0x08004d71
 8004d98:	08004d71 	.word	0x08004d71
 8004d9c:	08004d71 	.word	0x08004d71
 8004da0:	08004df5 	.word	0x08004df5
 8004da4:	08004d71 	.word	0x08004d71
 8004da8:	08004d71 	.word	0x08004d71
 8004dac:	08004d71 	.word	0x08004d71
 8004db0:	08004d71 	.word	0x08004d71
 8004db4:	08004ef3 	.word	0x08004ef3
 8004db8:	08004e1f 	.word	0x08004e1f
 8004dbc:	08004ead 	.word	0x08004ead
 8004dc0:	08004d71 	.word	0x08004d71
 8004dc4:	08004d71 	.word	0x08004d71
 8004dc8:	08004f15 	.word	0x08004f15
 8004dcc:	08004d71 	.word	0x08004d71
 8004dd0:	08004e1f 	.word	0x08004e1f
 8004dd4:	08004d71 	.word	0x08004d71
 8004dd8:	08004d71 	.word	0x08004d71
 8004ddc:	08004eb5 	.word	0x08004eb5
 8004de0:	6833      	ldr	r3, [r6, #0]
 8004de2:	1d1a      	adds	r2, r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6032      	str	r2, [r6, #0]
 8004de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004df0:	2301      	movs	r3, #1
 8004df2:	e09c      	b.n	8004f2e <_printf_i+0x1e6>
 8004df4:	6833      	ldr	r3, [r6, #0]
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	1d19      	adds	r1, r3, #4
 8004dfa:	6031      	str	r1, [r6, #0]
 8004dfc:	0606      	lsls	r6, r0, #24
 8004dfe:	d501      	bpl.n	8004e04 <_printf_i+0xbc>
 8004e00:	681d      	ldr	r5, [r3, #0]
 8004e02:	e003      	b.n	8004e0c <_printf_i+0xc4>
 8004e04:	0645      	lsls	r5, r0, #25
 8004e06:	d5fb      	bpl.n	8004e00 <_printf_i+0xb8>
 8004e08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e0c:	2d00      	cmp	r5, #0
 8004e0e:	da03      	bge.n	8004e18 <_printf_i+0xd0>
 8004e10:	232d      	movs	r3, #45	@ 0x2d
 8004e12:	426d      	negs	r5, r5
 8004e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e18:	230a      	movs	r3, #10
 8004e1a:	4858      	ldr	r0, [pc, #352]	@ (8004f7c <_printf_i+0x234>)
 8004e1c:	e011      	b.n	8004e42 <_printf_i+0xfa>
 8004e1e:	6821      	ldr	r1, [r4, #0]
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	0608      	lsls	r0, r1, #24
 8004e24:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e28:	d402      	bmi.n	8004e30 <_printf_i+0xe8>
 8004e2a:	0649      	lsls	r1, r1, #25
 8004e2c:	bf48      	it	mi
 8004e2e:	b2ad      	uxthmi	r5, r5
 8004e30:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e32:	6033      	str	r3, [r6, #0]
 8004e34:	bf14      	ite	ne
 8004e36:	230a      	movne	r3, #10
 8004e38:	2308      	moveq	r3, #8
 8004e3a:	4850      	ldr	r0, [pc, #320]	@ (8004f7c <_printf_i+0x234>)
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e42:	6866      	ldr	r6, [r4, #4]
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	60a6      	str	r6, [r4, #8]
 8004e48:	db05      	blt.n	8004e56 <_printf_i+0x10e>
 8004e4a:	6821      	ldr	r1, [r4, #0]
 8004e4c:	432e      	orrs	r6, r5
 8004e4e:	f021 0104 	bic.w	r1, r1, #4
 8004e52:	6021      	str	r1, [r4, #0]
 8004e54:	d04b      	beq.n	8004eee <_printf_i+0x1a6>
 8004e56:	4616      	mov	r6, r2
 8004e58:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e5c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e60:	5dc7      	ldrb	r7, [r0, r7]
 8004e62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e66:	462f      	mov	r7, r5
 8004e68:	42bb      	cmp	r3, r7
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	d9f4      	bls.n	8004e58 <_printf_i+0x110>
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d10b      	bne.n	8004e8a <_printf_i+0x142>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	07df      	lsls	r7, r3, #31
 8004e76:	d508      	bpl.n	8004e8a <_printf_i+0x142>
 8004e78:	6923      	ldr	r3, [r4, #16]
 8004e7a:	6861      	ldr	r1, [r4, #4]
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	bfde      	ittt	le
 8004e80:	2330      	movle	r3, #48	@ 0x30
 8004e82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e86:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e8a:	1b92      	subs	r2, r2, r6
 8004e8c:	6122      	str	r2, [r4, #16]
 8004e8e:	464b      	mov	r3, r9
 8004e90:	4621      	mov	r1, r4
 8004e92:	4640      	mov	r0, r8
 8004e94:	f8cd a000 	str.w	sl, [sp]
 8004e98:	aa03      	add	r2, sp, #12
 8004e9a:	f7ff fee3 	bl	8004c64 <_printf_common>
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d14a      	bne.n	8004f38 <_printf_i+0x1f0>
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ea6:	b004      	add	sp, #16
 8004ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	f043 0320 	orr.w	r3, r3, #32
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	2778      	movs	r7, #120	@ 0x78
 8004eb6:	4832      	ldr	r0, [pc, #200]	@ (8004f80 <_printf_i+0x238>)
 8004eb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	6831      	ldr	r1, [r6, #0]
 8004ec0:	061f      	lsls	r7, r3, #24
 8004ec2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ec6:	d402      	bmi.n	8004ece <_printf_i+0x186>
 8004ec8:	065f      	lsls	r7, r3, #25
 8004eca:	bf48      	it	mi
 8004ecc:	b2ad      	uxthmi	r5, r5
 8004ece:	6031      	str	r1, [r6, #0]
 8004ed0:	07d9      	lsls	r1, r3, #31
 8004ed2:	bf44      	itt	mi
 8004ed4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ed8:	6023      	strmi	r3, [r4, #0]
 8004eda:	b11d      	cbz	r5, 8004ee4 <_printf_i+0x19c>
 8004edc:	2310      	movs	r3, #16
 8004ede:	e7ad      	b.n	8004e3c <_printf_i+0xf4>
 8004ee0:	4826      	ldr	r0, [pc, #152]	@ (8004f7c <_printf_i+0x234>)
 8004ee2:	e7e9      	b.n	8004eb8 <_printf_i+0x170>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	f023 0320 	bic.w	r3, r3, #32
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	e7f6      	b.n	8004edc <_printf_i+0x194>
 8004eee:	4616      	mov	r6, r2
 8004ef0:	e7bd      	b.n	8004e6e <_printf_i+0x126>
 8004ef2:	6833      	ldr	r3, [r6, #0]
 8004ef4:	6825      	ldr	r5, [r4, #0]
 8004ef6:	1d18      	adds	r0, r3, #4
 8004ef8:	6961      	ldr	r1, [r4, #20]
 8004efa:	6030      	str	r0, [r6, #0]
 8004efc:	062e      	lsls	r6, r5, #24
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	d501      	bpl.n	8004f06 <_printf_i+0x1be>
 8004f02:	6019      	str	r1, [r3, #0]
 8004f04:	e002      	b.n	8004f0c <_printf_i+0x1c4>
 8004f06:	0668      	lsls	r0, r5, #25
 8004f08:	d5fb      	bpl.n	8004f02 <_printf_i+0x1ba>
 8004f0a:	8019      	strh	r1, [r3, #0]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4616      	mov	r6, r2
 8004f10:	6123      	str	r3, [r4, #16]
 8004f12:	e7bc      	b.n	8004e8e <_printf_i+0x146>
 8004f14:	6833      	ldr	r3, [r6, #0]
 8004f16:	2100      	movs	r1, #0
 8004f18:	1d1a      	adds	r2, r3, #4
 8004f1a:	6032      	str	r2, [r6, #0]
 8004f1c:	681e      	ldr	r6, [r3, #0]
 8004f1e:	6862      	ldr	r2, [r4, #4]
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 fa95 	bl	8005450 <memchr>
 8004f26:	b108      	cbz	r0, 8004f2c <_printf_i+0x1e4>
 8004f28:	1b80      	subs	r0, r0, r6
 8004f2a:	6060      	str	r0, [r4, #4]
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	2300      	movs	r3, #0
 8004f32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f36:	e7aa      	b.n	8004e8e <_printf_i+0x146>
 8004f38:	4632      	mov	r2, r6
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	47d0      	blx	sl
 8004f42:	3001      	adds	r0, #1
 8004f44:	d0ad      	beq.n	8004ea2 <_printf_i+0x15a>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	079b      	lsls	r3, r3, #30
 8004f4a:	d413      	bmi.n	8004f74 <_printf_i+0x22c>
 8004f4c:	68e0      	ldr	r0, [r4, #12]
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	4298      	cmp	r0, r3
 8004f52:	bfb8      	it	lt
 8004f54:	4618      	movlt	r0, r3
 8004f56:	e7a6      	b.n	8004ea6 <_printf_i+0x15e>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4640      	mov	r0, r8
 8004f60:	47d0      	blx	sl
 8004f62:	3001      	adds	r0, #1
 8004f64:	d09d      	beq.n	8004ea2 <_printf_i+0x15a>
 8004f66:	3501      	adds	r5, #1
 8004f68:	68e3      	ldr	r3, [r4, #12]
 8004f6a:	9903      	ldr	r1, [sp, #12]
 8004f6c:	1a5b      	subs	r3, r3, r1
 8004f6e:	42ab      	cmp	r3, r5
 8004f70:	dcf2      	bgt.n	8004f58 <_printf_i+0x210>
 8004f72:	e7eb      	b.n	8004f4c <_printf_i+0x204>
 8004f74:	2500      	movs	r5, #0
 8004f76:	f104 0619 	add.w	r6, r4, #25
 8004f7a:	e7f5      	b.n	8004f68 <_printf_i+0x220>
 8004f7c:	080056a8 	.word	0x080056a8
 8004f80:	080056b9 	.word	0x080056b9

08004f84 <__sflush_r>:
 8004f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	0716      	lsls	r6, r2, #28
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	d454      	bmi.n	800503c <__sflush_r+0xb8>
 8004f92:	684b      	ldr	r3, [r1, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	dc02      	bgt.n	8004f9e <__sflush_r+0x1a>
 8004f98:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dd48      	ble.n	8005030 <__sflush_r+0xac>
 8004f9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fa0:	2e00      	cmp	r6, #0
 8004fa2:	d045      	beq.n	8005030 <__sflush_r+0xac>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004faa:	682f      	ldr	r7, [r5, #0]
 8004fac:	6a21      	ldr	r1, [r4, #32]
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	d030      	beq.n	8005014 <__sflush_r+0x90>
 8004fb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	0759      	lsls	r1, r3, #29
 8004fb8:	d505      	bpl.n	8004fc6 <__sflush_r+0x42>
 8004fba:	6863      	ldr	r3, [r4, #4]
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fc0:	b10b      	cbz	r3, 8004fc6 <__sflush_r+0x42>
 8004fc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4628      	mov	r0, r5
 8004fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fcc:	6a21      	ldr	r1, [r4, #32]
 8004fce:	47b0      	blx	r6
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	d106      	bne.n	8004fe4 <__sflush_r+0x60>
 8004fd6:	6829      	ldr	r1, [r5, #0]
 8004fd8:	291d      	cmp	r1, #29
 8004fda:	d82b      	bhi.n	8005034 <__sflush_r+0xb0>
 8004fdc:	4a28      	ldr	r2, [pc, #160]	@ (8005080 <__sflush_r+0xfc>)
 8004fde:	40ca      	lsrs	r2, r1
 8004fe0:	07d6      	lsls	r6, r2, #31
 8004fe2:	d527      	bpl.n	8005034 <__sflush_r+0xb0>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	6062      	str	r2, [r4, #4]
 8004fe8:	6922      	ldr	r2, [r4, #16]
 8004fea:	04d9      	lsls	r1, r3, #19
 8004fec:	6022      	str	r2, [r4, #0]
 8004fee:	d504      	bpl.n	8004ffa <__sflush_r+0x76>
 8004ff0:	1c42      	adds	r2, r0, #1
 8004ff2:	d101      	bne.n	8004ff8 <__sflush_r+0x74>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b903      	cbnz	r3, 8004ffa <__sflush_r+0x76>
 8004ff8:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ffa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ffc:	602f      	str	r7, [r5, #0]
 8004ffe:	b1b9      	cbz	r1, 8005030 <__sflush_r+0xac>
 8005000:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005004:	4299      	cmp	r1, r3
 8005006:	d002      	beq.n	800500e <__sflush_r+0x8a>
 8005008:	4628      	mov	r0, r5
 800500a:	f000 fa2f 	bl	800546c <_free_r>
 800500e:	2300      	movs	r3, #0
 8005010:	6363      	str	r3, [r4, #52]	@ 0x34
 8005012:	e00d      	b.n	8005030 <__sflush_r+0xac>
 8005014:	2301      	movs	r3, #1
 8005016:	4628      	mov	r0, r5
 8005018:	47b0      	blx	r6
 800501a:	4602      	mov	r2, r0
 800501c:	1c50      	adds	r0, r2, #1
 800501e:	d1c9      	bne.n	8004fb4 <__sflush_r+0x30>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0c6      	beq.n	8004fb4 <__sflush_r+0x30>
 8005026:	2b1d      	cmp	r3, #29
 8005028:	d001      	beq.n	800502e <__sflush_r+0xaa>
 800502a:	2b16      	cmp	r3, #22
 800502c:	d11d      	bne.n	800506a <__sflush_r+0xe6>
 800502e:	602f      	str	r7, [r5, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	e021      	b.n	8005078 <__sflush_r+0xf4>
 8005034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005038:	b21b      	sxth	r3, r3
 800503a:	e01a      	b.n	8005072 <__sflush_r+0xee>
 800503c:	690f      	ldr	r7, [r1, #16]
 800503e:	2f00      	cmp	r7, #0
 8005040:	d0f6      	beq.n	8005030 <__sflush_r+0xac>
 8005042:	0793      	lsls	r3, r2, #30
 8005044:	bf18      	it	ne
 8005046:	2300      	movne	r3, #0
 8005048:	680e      	ldr	r6, [r1, #0]
 800504a:	bf08      	it	eq
 800504c:	694b      	ldreq	r3, [r1, #20]
 800504e:	1bf6      	subs	r6, r6, r7
 8005050:	600f      	str	r7, [r1, #0]
 8005052:	608b      	str	r3, [r1, #8]
 8005054:	2e00      	cmp	r6, #0
 8005056:	ddeb      	ble.n	8005030 <__sflush_r+0xac>
 8005058:	4633      	mov	r3, r6
 800505a:	463a      	mov	r2, r7
 800505c:	4628      	mov	r0, r5
 800505e:	6a21      	ldr	r1, [r4, #32]
 8005060:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005064:	47e0      	blx	ip
 8005066:	2800      	cmp	r0, #0
 8005068:	dc07      	bgt.n	800507a <__sflush_r+0xf6>
 800506a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507a:	4407      	add	r7, r0
 800507c:	1a36      	subs	r6, r6, r0
 800507e:	e7e9      	b.n	8005054 <__sflush_r+0xd0>
 8005080:	20400001 	.word	0x20400001

08005084 <_fflush_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	690b      	ldr	r3, [r1, #16]
 8005088:	4605      	mov	r5, r0
 800508a:	460c      	mov	r4, r1
 800508c:	b913      	cbnz	r3, 8005094 <_fflush_r+0x10>
 800508e:	2500      	movs	r5, #0
 8005090:	4628      	mov	r0, r5
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	b118      	cbz	r0, 800509e <_fflush_r+0x1a>
 8005096:	6a03      	ldr	r3, [r0, #32]
 8005098:	b90b      	cbnz	r3, 800509e <_fflush_r+0x1a>
 800509a:	f7ff fb01 	bl	80046a0 <__sinit>
 800509e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f3      	beq.n	800508e <_fflush_r+0xa>
 80050a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050a8:	07d0      	lsls	r0, r2, #31
 80050aa:	d404      	bmi.n	80050b6 <_fflush_r+0x32>
 80050ac:	0599      	lsls	r1, r3, #22
 80050ae:	d402      	bmi.n	80050b6 <_fflush_r+0x32>
 80050b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050b2:	f7ff fbf4 	bl	800489e <__retarget_lock_acquire_recursive>
 80050b6:	4628      	mov	r0, r5
 80050b8:	4621      	mov	r1, r4
 80050ba:	f7ff ff63 	bl	8004f84 <__sflush_r>
 80050be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050c0:	4605      	mov	r5, r0
 80050c2:	07da      	lsls	r2, r3, #31
 80050c4:	d4e4      	bmi.n	8005090 <_fflush_r+0xc>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	059b      	lsls	r3, r3, #22
 80050ca:	d4e1      	bmi.n	8005090 <_fflush_r+0xc>
 80050cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ce:	f7ff fbe7 	bl	80048a0 <__retarget_lock_release_recursive>
 80050d2:	e7dd      	b.n	8005090 <_fflush_r+0xc>

080050d4 <__malloc_lock>:
 80050d4:	4801      	ldr	r0, [pc, #4]	@ (80050dc <__malloc_lock+0x8>)
 80050d6:	f7ff bbe2 	b.w	800489e <__retarget_lock_acquire_recursive>
 80050da:	bf00      	nop
 80050dc:	200002a8 	.word	0x200002a8

080050e0 <__malloc_unlock>:
 80050e0:	4801      	ldr	r0, [pc, #4]	@ (80050e8 <__malloc_unlock+0x8>)
 80050e2:	f7ff bbdd 	b.w	80048a0 <__retarget_lock_release_recursive>
 80050e6:	bf00      	nop
 80050e8:	200002a8 	.word	0x200002a8

080050ec <__sread>:
 80050ec:	b510      	push	{r4, lr}
 80050ee:	460c      	mov	r4, r1
 80050f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f4:	f000 f956 	bl	80053a4 <_read_r>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	bfab      	itete	ge
 80050fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005100:	181b      	addge	r3, r3, r0
 8005102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005106:	bfac      	ite	ge
 8005108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800510a:	81a3      	strhlt	r3, [r4, #12]
 800510c:	bd10      	pop	{r4, pc}

0800510e <__swrite>:
 800510e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005112:	461f      	mov	r7, r3
 8005114:	898b      	ldrh	r3, [r1, #12]
 8005116:	4605      	mov	r5, r0
 8005118:	05db      	lsls	r3, r3, #23
 800511a:	460c      	mov	r4, r1
 800511c:	4616      	mov	r6, r2
 800511e:	d505      	bpl.n	800512c <__swrite+0x1e>
 8005120:	2302      	movs	r3, #2
 8005122:	2200      	movs	r2, #0
 8005124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005128:	f000 f92a 	bl	8005380 <_lseek_r>
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	4632      	mov	r2, r6
 8005130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005134:	81a3      	strh	r3, [r4, #12]
 8005136:	4628      	mov	r0, r5
 8005138:	463b      	mov	r3, r7
 800513a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800513e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005142:	f000 b951 	b.w	80053e8 <_write_r>

08005146 <__sseek>:
 8005146:	b510      	push	{r4, lr}
 8005148:	460c      	mov	r4, r1
 800514a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514e:	f000 f917 	bl	8005380 <_lseek_r>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	bf15      	itete	ne
 8005158:	6560      	strne	r0, [r4, #84]	@ 0x54
 800515a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800515e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005162:	81a3      	strheq	r3, [r4, #12]
 8005164:	bf18      	it	ne
 8005166:	81a3      	strhne	r3, [r4, #12]
 8005168:	bd10      	pop	{r4, pc}

0800516a <__sclose>:
 800516a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516e:	f000 b94d 	b.w	800540c <_close_r>

08005172 <__swbuf_r>:
 8005172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005174:	460e      	mov	r6, r1
 8005176:	4614      	mov	r4, r2
 8005178:	4605      	mov	r5, r0
 800517a:	b118      	cbz	r0, 8005184 <__swbuf_r+0x12>
 800517c:	6a03      	ldr	r3, [r0, #32]
 800517e:	b90b      	cbnz	r3, 8005184 <__swbuf_r+0x12>
 8005180:	f7ff fa8e 	bl	80046a0 <__sinit>
 8005184:	69a3      	ldr	r3, [r4, #24]
 8005186:	60a3      	str	r3, [r4, #8]
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	071a      	lsls	r2, r3, #28
 800518c:	d501      	bpl.n	8005192 <__swbuf_r+0x20>
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	b943      	cbnz	r3, 80051a4 <__swbuf_r+0x32>
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	f000 f82b 	bl	80051f0 <__swsetup_r>
 800519a:	b118      	cbz	r0, 80051a4 <__swbuf_r+0x32>
 800519c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80051a0:	4638      	mov	r0, r7
 80051a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	6922      	ldr	r2, [r4, #16]
 80051a8:	b2f6      	uxtb	r6, r6
 80051aa:	1a98      	subs	r0, r3, r2
 80051ac:	6963      	ldr	r3, [r4, #20]
 80051ae:	4637      	mov	r7, r6
 80051b0:	4283      	cmp	r3, r0
 80051b2:	dc05      	bgt.n	80051c0 <__swbuf_r+0x4e>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	f7ff ff64 	bl	8005084 <_fflush_r>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d1ed      	bne.n	800519c <__swbuf_r+0x2a>
 80051c0:	68a3      	ldr	r3, [r4, #8]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	60a3      	str	r3, [r4, #8]
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	6022      	str	r2, [r4, #0]
 80051cc:	701e      	strb	r6, [r3, #0]
 80051ce:	6962      	ldr	r2, [r4, #20]
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d004      	beq.n	80051e0 <__swbuf_r+0x6e>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	07db      	lsls	r3, r3, #31
 80051da:	d5e1      	bpl.n	80051a0 <__swbuf_r+0x2e>
 80051dc:	2e0a      	cmp	r6, #10
 80051de:	d1df      	bne.n	80051a0 <__swbuf_r+0x2e>
 80051e0:	4621      	mov	r1, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	f7ff ff4e 	bl	8005084 <_fflush_r>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d0d9      	beq.n	80051a0 <__swbuf_r+0x2e>
 80051ec:	e7d6      	b.n	800519c <__swbuf_r+0x2a>
	...

080051f0 <__swsetup_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4b29      	ldr	r3, [pc, #164]	@ (8005298 <__swsetup_r+0xa8>)
 80051f4:	4605      	mov	r5, r0
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	460c      	mov	r4, r1
 80051fa:	b118      	cbz	r0, 8005204 <__swsetup_r+0x14>
 80051fc:	6a03      	ldr	r3, [r0, #32]
 80051fe:	b90b      	cbnz	r3, 8005204 <__swsetup_r+0x14>
 8005200:	f7ff fa4e 	bl	80046a0 <__sinit>
 8005204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005208:	0719      	lsls	r1, r3, #28
 800520a:	d422      	bmi.n	8005252 <__swsetup_r+0x62>
 800520c:	06da      	lsls	r2, r3, #27
 800520e:	d407      	bmi.n	8005220 <__swsetup_r+0x30>
 8005210:	2209      	movs	r2, #9
 8005212:	602a      	str	r2, [r5, #0]
 8005214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	e033      	b.n	8005288 <__swsetup_r+0x98>
 8005220:	0758      	lsls	r0, r3, #29
 8005222:	d512      	bpl.n	800524a <__swsetup_r+0x5a>
 8005224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005226:	b141      	cbz	r1, 800523a <__swsetup_r+0x4a>
 8005228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800522c:	4299      	cmp	r1, r3
 800522e:	d002      	beq.n	8005236 <__swsetup_r+0x46>
 8005230:	4628      	mov	r0, r5
 8005232:	f000 f91b 	bl	800546c <_free_r>
 8005236:	2300      	movs	r3, #0
 8005238:	6363      	str	r3, [r4, #52]	@ 0x34
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	2300      	movs	r3, #0
 8005244:	6063      	str	r3, [r4, #4]
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f043 0308 	orr.w	r3, r3, #8
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	b94b      	cbnz	r3, 800526a <__swsetup_r+0x7a>
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800525c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005260:	d003      	beq.n	800526a <__swsetup_r+0x7a>
 8005262:	4621      	mov	r1, r4
 8005264:	4628      	mov	r0, r5
 8005266:	f000 f83e 	bl	80052e6 <__smakebuf_r>
 800526a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526e:	f013 0201 	ands.w	r2, r3, #1
 8005272:	d00a      	beq.n	800528a <__swsetup_r+0x9a>
 8005274:	2200      	movs	r2, #0
 8005276:	60a2      	str	r2, [r4, #8]
 8005278:	6962      	ldr	r2, [r4, #20]
 800527a:	4252      	negs	r2, r2
 800527c:	61a2      	str	r2, [r4, #24]
 800527e:	6922      	ldr	r2, [r4, #16]
 8005280:	b942      	cbnz	r2, 8005294 <__swsetup_r+0xa4>
 8005282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005286:	d1c5      	bne.n	8005214 <__swsetup_r+0x24>
 8005288:	bd38      	pop	{r3, r4, r5, pc}
 800528a:	0799      	lsls	r1, r3, #30
 800528c:	bf58      	it	pl
 800528e:	6962      	ldrpl	r2, [r4, #20]
 8005290:	60a2      	str	r2, [r4, #8]
 8005292:	e7f4      	b.n	800527e <__swsetup_r+0x8e>
 8005294:	2000      	movs	r0, #0
 8005296:	e7f7      	b.n	8005288 <__swsetup_r+0x98>
 8005298:	20000018 	.word	0x20000018

0800529c <__swhatbuf_r>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	460c      	mov	r4, r1
 80052a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a4:	4615      	mov	r5, r2
 80052a6:	2900      	cmp	r1, #0
 80052a8:	461e      	mov	r6, r3
 80052aa:	b096      	sub	sp, #88	@ 0x58
 80052ac:	da0c      	bge.n	80052c8 <__swhatbuf_r+0x2c>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	2100      	movs	r1, #0
 80052b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052b6:	bf14      	ite	ne
 80052b8:	2340      	movne	r3, #64	@ 0x40
 80052ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052be:	2000      	movs	r0, #0
 80052c0:	6031      	str	r1, [r6, #0]
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	b016      	add	sp, #88	@ 0x58
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	466a      	mov	r2, sp
 80052ca:	f000 f8af 	bl	800542c <_fstat_r>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	dbed      	blt.n	80052ae <__swhatbuf_r+0x12>
 80052d2:	9901      	ldr	r1, [sp, #4]
 80052d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052dc:	4259      	negs	r1, r3
 80052de:	4159      	adcs	r1, r3
 80052e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052e4:	e7eb      	b.n	80052be <__swhatbuf_r+0x22>

080052e6 <__smakebuf_r>:
 80052e6:	898b      	ldrh	r3, [r1, #12]
 80052e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ea:	079d      	lsls	r5, r3, #30
 80052ec:	4606      	mov	r6, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	d507      	bpl.n	8005302 <__smakebuf_r+0x1c>
 80052f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	2301      	movs	r3, #1
 80052fc:	6163      	str	r3, [r4, #20]
 80052fe:	b003      	add	sp, #12
 8005300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005302:	466a      	mov	r2, sp
 8005304:	ab01      	add	r3, sp, #4
 8005306:	f7ff ffc9 	bl	800529c <__swhatbuf_r>
 800530a:	9f00      	ldr	r7, [sp, #0]
 800530c:	4605      	mov	r5, r0
 800530e:	4639      	mov	r1, r7
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff fc27 	bl	8004b64 <_malloc_r>
 8005316:	b948      	cbnz	r0, 800532c <__smakebuf_r+0x46>
 8005318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531c:	059a      	lsls	r2, r3, #22
 800531e:	d4ee      	bmi.n	80052fe <__smakebuf_r+0x18>
 8005320:	f023 0303 	bic.w	r3, r3, #3
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	e7e2      	b.n	80052f2 <__smakebuf_r+0xc>
 800532c:	89a3      	ldrh	r3, [r4, #12]
 800532e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005336:	81a3      	strh	r3, [r4, #12]
 8005338:	9b01      	ldr	r3, [sp, #4]
 800533a:	6020      	str	r0, [r4, #0]
 800533c:	b15b      	cbz	r3, 8005356 <__smakebuf_r+0x70>
 800533e:	4630      	mov	r0, r6
 8005340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005344:	f000 f80c 	bl	8005360 <_isatty_r>
 8005348:	b128      	cbz	r0, 8005356 <__smakebuf_r+0x70>
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	f023 0303 	bic.w	r3, r3, #3
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	81a3      	strh	r3, [r4, #12]
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	431d      	orrs	r5, r3
 800535a:	81a5      	strh	r5, [r4, #12]
 800535c:	e7cf      	b.n	80052fe <__smakebuf_r+0x18>
	...

08005360 <_isatty_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	2300      	movs	r3, #0
 8005364:	4d05      	ldr	r5, [pc, #20]	@ (800537c <_isatty_r+0x1c>)
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	f7fb fdb9 	bl	8000ee2 <_isatty>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_isatty_r+0x1a>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_isatty_r+0x1a>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	200002b4 	.word	0x200002b4

08005380 <_lseek_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	2200      	movs	r2, #0
 800538a:	4d05      	ldr	r5, [pc, #20]	@ (80053a0 <_lseek_r+0x20>)
 800538c:	602a      	str	r2, [r5, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fb fdb1 	bl	8000ef6 <_lseek>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_lseek_r+0x1e>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_lseek_r+0x1e>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	200002b4 	.word	0x200002b4

080053a4 <_read_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	2200      	movs	r2, #0
 80053ae:	4d05      	ldr	r5, [pc, #20]	@ (80053c4 <_read_r+0x20>)
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fb fd42 	bl	8000e3c <_read>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_read_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_read_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	200002b4 	.word	0x200002b4

080053c8 <_sbrk_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	2300      	movs	r3, #0
 80053cc:	4d05      	ldr	r5, [pc, #20]	@ (80053e4 <_sbrk_r+0x1c>)
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	f7fb fd9c 	bl	8000f10 <_sbrk>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_sbrk_r+0x1a>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_sbrk_r+0x1a>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200002b4 	.word	0x200002b4

080053e8 <_write_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	2200      	movs	r2, #0
 80053f2:	4d05      	ldr	r5, [pc, #20]	@ (8005408 <_write_r+0x20>)
 80053f4:	602a      	str	r2, [r5, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7fb fd3d 	bl	8000e76 <_write>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_write_r+0x1e>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_write_r+0x1e>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	200002b4 	.word	0x200002b4

0800540c <_close_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	2300      	movs	r3, #0
 8005410:	4d05      	ldr	r5, [pc, #20]	@ (8005428 <_close_r+0x1c>)
 8005412:	4604      	mov	r4, r0
 8005414:	4608      	mov	r0, r1
 8005416:	602b      	str	r3, [r5, #0]
 8005418:	f7fb fd49 	bl	8000eae <_close>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_close_r+0x1a>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_close_r+0x1a>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	200002b4 	.word	0x200002b4

0800542c <_fstat_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	2300      	movs	r3, #0
 8005430:	4d06      	ldr	r5, [pc, #24]	@ (800544c <_fstat_r+0x20>)
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	4611      	mov	r1, r2
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	f7fb fd43 	bl	8000ec4 <_fstat>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	d102      	bne.n	8005448 <_fstat_r+0x1c>
 8005442:	682b      	ldr	r3, [r5, #0]
 8005444:	b103      	cbz	r3, 8005448 <_fstat_r+0x1c>
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	bf00      	nop
 800544c:	200002b4 	.word	0x200002b4

08005450 <memchr>:
 8005450:	4603      	mov	r3, r0
 8005452:	b510      	push	{r4, lr}
 8005454:	b2c9      	uxtb	r1, r1
 8005456:	4402      	add	r2, r0
 8005458:	4293      	cmp	r3, r2
 800545a:	4618      	mov	r0, r3
 800545c:	d101      	bne.n	8005462 <memchr+0x12>
 800545e:	2000      	movs	r0, #0
 8005460:	e003      	b.n	800546a <memchr+0x1a>
 8005462:	7804      	ldrb	r4, [r0, #0]
 8005464:	3301      	adds	r3, #1
 8005466:	428c      	cmp	r4, r1
 8005468:	d1f6      	bne.n	8005458 <memchr+0x8>
 800546a:	bd10      	pop	{r4, pc}

0800546c <_free_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4605      	mov	r5, r0
 8005470:	2900      	cmp	r1, #0
 8005472:	d040      	beq.n	80054f6 <_free_r+0x8a>
 8005474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005478:	1f0c      	subs	r4, r1, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	bfb8      	it	lt
 800547e:	18e4      	addlt	r4, r4, r3
 8005480:	f7ff fe28 	bl	80050d4 <__malloc_lock>
 8005484:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <_free_r+0x8c>)
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	b933      	cbnz	r3, 8005498 <_free_r+0x2c>
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6014      	str	r4, [r2, #0]
 800548e:	4628      	mov	r0, r5
 8005490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005494:	f7ff be24 	b.w	80050e0 <__malloc_unlock>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d908      	bls.n	80054ae <_free_r+0x42>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	1821      	adds	r1, r4, r0
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf01      	itttt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	1809      	addeq	r1, r1, r0
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	e7ed      	b.n	800548a <_free_r+0x1e>
 80054ae:	461a      	mov	r2, r3
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b10b      	cbz	r3, 80054b8 <_free_r+0x4c>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d9fa      	bls.n	80054ae <_free_r+0x42>
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	1850      	adds	r0, r2, r1
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d10b      	bne.n	80054d8 <_free_r+0x6c>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	4401      	add	r1, r0
 80054c4:	1850      	adds	r0, r2, r1
 80054c6:	4283      	cmp	r3, r0
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	d1e0      	bne.n	800548e <_free_r+0x22>
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4408      	add	r0, r1
 80054d2:	6010      	str	r0, [r2, #0]
 80054d4:	6053      	str	r3, [r2, #4]
 80054d6:	e7da      	b.n	800548e <_free_r+0x22>
 80054d8:	d902      	bls.n	80054e0 <_free_r+0x74>
 80054da:	230c      	movs	r3, #12
 80054dc:	602b      	str	r3, [r5, #0]
 80054de:	e7d6      	b.n	800548e <_free_r+0x22>
 80054e0:	6820      	ldr	r0, [r4, #0]
 80054e2:	1821      	adds	r1, r4, r0
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf01      	itttt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	1809      	addeq	r1, r1, r0
 80054ee:	6021      	streq	r1, [r4, #0]
 80054f0:	6063      	str	r3, [r4, #4]
 80054f2:	6054      	str	r4, [r2, #4]
 80054f4:	e7cb      	b.n	800548e <_free_r+0x22>
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	200002b0 	.word	0x200002b0

080054fc <_init>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	bf00      	nop
 8005500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005502:	bc08      	pop	{r3}
 8005504:	469e      	mov	lr, r3
 8005506:	4770      	bx	lr

08005508 <_fini>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	bf00      	nop
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr
