
echo20250614-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000454c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004658  08004658  00005658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b4  080047b4  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080047b4  080047b4  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080047b4  080047b4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  2000005c  08004818  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004818  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e247  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221d  00000000  00000000  000142cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000164f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af0  00000000  00000000  000172e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184b5  00000000  00000000  00017dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f429  00000000  00000000  00030285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f794  00000000  00000000  0003f6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cee42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca0  00000000  00000000  000cee88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d2b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004640 	.word	0x08004640

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004640 	.word	0x08004640

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_UART_RxCpltCallback>:
  * @brief  UART 수신 완료 시 호출되는 콜백 함수
  * @param  huart: UART 핸들
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a53      	ldr	r2, [pc, #332]	@ (800066c <HAL_UART_RxCpltCallback+0x15c>)
 800051e:	4293      	cmp	r3, r2
 8000520:	f040 80a0 	bne.w	8000664 <HAL_UART_RxCpltCallback+0x154>
    {
        if (rx_data == '\n' || rx_data == '\r')
 8000524:	4b52      	ldr	r3, [pc, #328]	@ (8000670 <HAL_UART_RxCpltCallback+0x160>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b0a      	cmp	r3, #10
 800052a:	d004      	beq.n	8000536 <HAL_UART_RxCpltCallback+0x26>
 800052c:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <HAL_UART_RxCpltCallback+0x160>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b0d      	cmp	r3, #13
 8000532:	f040 8083 	bne.w	800063c <HAL_UART_RxCpltCallback+0x12c>
        {
            rx_buffer[rx_index] = '\0';
 8000536:	4b4f      	ldr	r3, [pc, #316]	@ (8000674 <HAL_UART_RxCpltCallback+0x164>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	4b4e      	ldr	r3, [pc, #312]	@ (8000678 <HAL_UART_RxCpltCallback+0x168>)
 800053e:	2100      	movs	r1, #0
 8000540:	5499      	strb	r1, [r3, r2]

            // --- 단일 명령 (예: "s") ---
            if (rx_index == 1 && rx_buffer[0] == 's')
 8000542:	4b4c      	ldr	r3, [pc, #304]	@ (8000674 <HAL_UART_RxCpltCallback+0x164>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d10d      	bne.n	8000566 <HAL_UART_RxCpltCallback+0x56>
 800054a:	4b4b      	ldr	r3, [pc, #300]	@ (8000678 <HAL_UART_RxCpltCallback+0x168>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b73      	cmp	r3, #115	@ 0x73
 8000550:	d109      	bne.n	8000566 <HAL_UART_RxCpltCallback+0x56>
            {
                Stop_Motor();
 8000552:	f000 f901 	bl	8000758 <Stop_Motor>
                HAL_UART_Transmit(&huart2,
 8000556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800055a:	2213      	movs	r2, #19
 800055c:	4947      	ldr	r1, [pc, #284]	@ (800067c <HAL_UART_RxCpltCallback+0x16c>)
 800055e:	4848      	ldr	r0, [pc, #288]	@ (8000680 <HAL_UART_RxCpltCallback+0x170>)
 8000560:	f003 f99a 	bl	8003898 <HAL_UART_Transmit>
            {
 8000564:	e061      	b.n	800062a <HAL_UART_RxCpltCallback+0x11a>
                    (uint8_t*)"Stop CMD received\r\n", 19, HAL_MAX_DELAY);
            }
            // --- 일반 모터 명령 (예: "l f 3") ---
            else if (rx_index >= 5)
 8000566:	4b43      	ldr	r3, [pc, #268]	@ (8000674 <HAL_UART_RxCpltCallback+0x164>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b04      	cmp	r3, #4
 800056c:	d95d      	bls.n	800062a <HAL_UART_RxCpltCallback+0x11a>
            {
                char motor = rx_buffer[0];   // 'l' or 'r'
 800056e:	4b42      	ldr	r3, [pc, #264]	@ (8000678 <HAL_UART_RxCpltCallback+0x168>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	75fb      	strb	r3, [r7, #23]
                char dir   = rx_buffer[2];   // 'f' or 'b'
 8000574:	4b40      	ldr	r3, [pc, #256]	@ (8000678 <HAL_UART_RxCpltCallback+0x168>)
 8000576:	789b      	ldrb	r3, [r3, #2]
 8000578:	75bb      	strb	r3, [r7, #22]
                int speed  = atoi(&rx_buffer[4]); // duty (0~9)
 800057a:	4842      	ldr	r0, [pc, #264]	@ (8000684 <HAL_UART_RxCpltCallback+0x174>)
 800057c:	f003 ffa6 	bl	80044cc <atoi>
 8000580:	6138      	str	r0, [r7, #16]

                if ((motor == 'l' || motor == 'r') &&
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	2b6c      	cmp	r3, #108	@ 0x6c
 8000586:	d002      	beq.n	800058e <HAL_UART_RxCpltCallback+0x7e>
 8000588:	7dfb      	ldrb	r3, [r7, #23]
 800058a:	2b72      	cmp	r3, #114	@ 0x72
 800058c:	d146      	bne.n	800061c <HAL_UART_RxCpltCallback+0x10c>
 800058e:	7dbb      	ldrb	r3, [r7, #22]
 8000590:	2b66      	cmp	r3, #102	@ 0x66
 8000592:	d002      	beq.n	800059a <HAL_UART_RxCpltCallback+0x8a>
                    (dir == 'f' || dir == 'b') &&
 8000594:	7dbb      	ldrb	r3, [r7, #22]
 8000596:	2b62      	cmp	r3, #98	@ 0x62
 8000598:	d140      	bne.n	800061c <HAL_UART_RxCpltCallback+0x10c>
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	2b00      	cmp	r3, #0
 800059e:	db3d      	blt.n	800061c <HAL_UART_RxCpltCallback+0x10c>
                    (speed >= 0 && speed <= 9))
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	2b09      	cmp	r3, #9
 80005a4:	dc3a      	bgt.n	800061c <HAL_UART_RxCpltCallback+0x10c>
                {
                    uint16_t duty = speed * PWM_DUTY_SCALE;
 80005a6:	6938      	ldr	r0, [r7, #16]
 80005a8:	f7ff ff3e 	bl	8000428 <__aeabi_i2f>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4936      	ldr	r1, [pc, #216]	@ (8000688 <HAL_UART_RxCpltCallback+0x178>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fdcb 	bl	800014c <__aeabi_fmul>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff89 	bl	80004d0 <__aeabi_f2uiz>
 80005be:	4603      	mov	r3, r0
 80005c0:	81fb      	strh	r3, [r7, #14]

                    if (motor == 'l')  // Left Motor
 80005c2:	7dfb      	ldrb	r3, [r7, #23]
 80005c4:	2b6c      	cmp	r3, #108	@ 0x6c
 80005c6:	d10f      	bne.n	80005e8 <HAL_UART_RxCpltCallback+0xd8>
                    {
                        target_pwm_left = duty;
 80005c8:	4a30      	ldr	r2, [pc, #192]	@ (800068c <HAL_UART_RxCpltCallback+0x17c>)
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	8013      	strh	r3, [r2, #0]
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,
 80005ce:	7dbb      	ldrb	r3, [r7, #22]
 80005d0:	2b66      	cmp	r3, #102	@ 0x66
 80005d2:	bf14      	ite	ne
 80005d4:	2301      	movne	r3, #1
 80005d6:	2300      	moveq	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e0:	482b      	ldr	r0, [pc, #172]	@ (8000690 <HAL_UART_RxCpltCallback+0x180>)
 80005e2:	f001 fcb7 	bl	8001f54 <HAL_GPIO_WritePin>
 80005e6:	e011      	b.n	800060c <HAL_UART_RxCpltCallback+0xfc>
                            (dir == 'f') ? GPIO_PIN_RESET : GPIO_PIN_SET);

                    }
                    else if (motor == 'r') // Right Motor
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	2b72      	cmp	r3, #114	@ 0x72
 80005ec:	d10e      	bne.n	800060c <HAL_UART_RxCpltCallback+0xfc>
                    {
                        target_pwm_right = duty;
 80005ee:	4a29      	ldr	r2, [pc, #164]	@ (8000694 <HAL_UART_RxCpltCallback+0x184>)
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	8013      	strh	r3, [r2, #0]
                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,
 80005f4:	7dbb      	ldrb	r3, [r7, #22]
 80005f6:	2b66      	cmp	r3, #102	@ 0x66
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461a      	mov	r2, r3
 8000602:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000606:	4824      	ldr	r0, [pc, #144]	@ (8000698 <HAL_UART_RxCpltCallback+0x188>)
 8000608:	f001 fca4 	bl	8001f54 <HAL_GPIO_WritePin>
                            (dir == 'f') ? GPIO_PIN_RESET : GPIO_PIN_SET);
                    }
                    HAL_UART_Transmit(&huart2,(uint8_t*)"debug\r\n", 7, HAL_MAX_DELAY);
 800060c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000610:	2207      	movs	r2, #7
 8000612:	4922      	ldr	r1, [pc, #136]	@ (800069c <HAL_UART_RxCpltCallback+0x18c>)
 8000614:	481a      	ldr	r0, [pc, #104]	@ (8000680 <HAL_UART_RxCpltCallback+0x170>)
 8000616:	f003 f93f 	bl	8003898 <HAL_UART_Transmit>
                {
 800061a:	e006      	b.n	800062a <HAL_UART_RxCpltCallback+0x11a>
                }
                else
                {
                    HAL_UART_Transmit(&huart2,
 800061c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000620:	220d      	movs	r2, #13
 8000622:	491f      	ldr	r1, [pc, #124]	@ (80006a0 <HAL_UART_RxCpltCallback+0x190>)
 8000624:	4816      	ldr	r0, [pc, #88]	@ (8000680 <HAL_UART_RxCpltCallback+0x170>)
 8000626:	f003 f937 	bl	8003898 <HAL_UART_Transmit>
                        (uint8_t*)"Invalid CMD\r\n", 13, HAL_MAX_DELAY);
                }
            }

            // 버퍼 초기화
            rx_index = 0;
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_UART_RxCpltCallback+0x164>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8000630:	2214      	movs	r2, #20
 8000632:	2100      	movs	r1, #0
 8000634:	4810      	ldr	r0, [pc, #64]	@ (8000678 <HAL_UART_RxCpltCallback+0x168>)
 8000636:	f003 ffd1 	bl	80045dc <memset>
 800063a:	e00e      	b.n	800065a <HAL_UART_RxCpltCallback+0x14a>
        }
        else
        {
            if (rx_index < sizeof(rx_buffer) - 1)
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <HAL_UART_RxCpltCallback+0x164>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b12      	cmp	r3, #18
 8000642:	d80a      	bhi.n	800065a <HAL_UART_RxCpltCallback+0x14a>
                rx_buffer[rx_index++] = rx_data;
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <HAL_UART_RxCpltCallback+0x164>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	b2d1      	uxtb	r1, r2
 800064c:	4a09      	ldr	r2, [pc, #36]	@ (8000674 <HAL_UART_RxCpltCallback+0x164>)
 800064e:	7011      	strb	r1, [r2, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <HAL_UART_RxCpltCallback+0x160>)
 8000654:	7819      	ldrb	r1, [r3, #0]
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <HAL_UART_RxCpltCallback+0x168>)
 8000658:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	4904      	ldr	r1, [pc, #16]	@ (8000670 <HAL_UART_RxCpltCallback+0x160>)
 800065e:	4808      	ldr	r0, [pc, #32]	@ (8000680 <HAL_UART_RxCpltCallback+0x170>)
 8000660:	f003 f9a5 	bl	80039ae <HAL_UART_Receive_IT>
    }
}
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40004400 	.word	0x40004400
 8000670:	20000195 	.word	0x20000195
 8000674:	20000194 	.word	0x20000194
 8000678:	20000180 	.word	0x20000180
 800067c:	0800465c 	.word	0x0800465c
 8000680:	20000138 	.word	0x20000138
 8000684:	20000184 	.word	0x20000184
 8000688:	409ccccd 	.word	0x409ccccd
 800068c:	20000196 	.word	0x20000196
 8000690:	40010800 	.word	0x40010800
 8000694:	20000198 	.word	0x20000198
 8000698:	40010c00 	.word	0x40010c00
 800069c:	08004670 	.word	0x08004670
 80006a0:	08004678 	.word	0x08004678

080006a4 <Transform_PWM>:

/**
  * @brief  목표 PWM 값에 도달할 때까지 현재 PWM 값을 점진적으로 변경
  * @retval None
  */
void Transform_PWM(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	// 왼쪽 모터 PWM 제어
	if (current_pwm_left < target_pwm_left){
 80006a8:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <Transform_PWM+0xa0>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <Transform_PWM+0xa4>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d207      	bcs.n	80006c8 <Transform_PWM+0x24>
		current_pwm_left++;
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <Transform_PWM+0xa0>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <Transform_PWM+0xa0>)
 80006c4:	801a      	strh	r2, [r3, #0]
 80006c6:	e00e      	b.n	80006e6 <Transform_PWM+0x42>
	}
	else if (current_pwm_left > target_pwm_left){
 80006c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <Transform_PWM+0xa0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <Transform_PWM+0xa4>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d906      	bls.n	80006e6 <Transform_PWM+0x42>
		current_pwm_left--;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <Transform_PWM+0xa0>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3b01      	subs	r3, #1
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <Transform_PWM+0xa0>)
 80006e4:	801a      	strh	r2, [r3, #0]
	}

	// 오른쪽 모터 PWM 제어
	if (current_pwm_right < target_pwm_right){
 80006e6:	4b19      	ldr	r3, [pc, #100]	@ (800074c <Transform_PWM+0xa8>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <Transform_PWM+0xac>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d207      	bcs.n	8000706 <Transform_PWM+0x62>
		current_pwm_right++;
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <Transform_PWM+0xa8>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	3301      	adds	r3, #1
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <Transform_PWM+0xa8>)
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	e00e      	b.n	8000724 <Transform_PWM+0x80>
	}
	else if (current_pwm_right > target_pwm_right){
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <Transform_PWM+0xa8>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <Transform_PWM+0xac>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	b29b      	uxth	r3, r3
 8000712:	429a      	cmp	r2, r3
 8000714:	d906      	bls.n	8000724 <Transform_PWM+0x80>
		current_pwm_right--;
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <Transform_PWM+0xa8>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	b29b      	uxth	r3, r3
 800071c:	3b01      	subs	r3, #1
 800071e:	b29a      	uxth	r2, r3
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <Transform_PWM+0xa8>)
 8000722:	801a      	strh	r2, [r3, #0]
	}

	// 계산된 PWM 값을 각 모터 채널에 적용
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, current_pwm_left);
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <Transform_PWM+0xa0>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <Transform_PWM+0xb0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, current_pwm_right);
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <Transform_PWM+0xa8>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <Transform_PWM+0xb0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	2000019a 	.word	0x2000019a
 8000748:	20000196 	.word	0x20000196
 800074c:	2000019c 	.word	0x2000019c
 8000750:	20000198 	.word	0x20000198
 8000754:	200000a8 	.word	0x200000a8

08000758 <Stop_Motor>:
/**
  * @brief  모든 모터를 즉시 정지
  * @retval None
  */
void Stop_Motor(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  // 양쪽 모터의 PWM을 0으로 설정하여 정지
	target_pwm_right = 0;
 800075c:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <Stop_Motor+0x18>)
 800075e:	2200      	movs	r2, #0
 8000760:	801a      	strh	r2, [r3, #0]
	target_pwm_left = 0;
 8000762:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <Stop_Motor+0x1c>)
 8000764:	2200      	movs	r2, #0
 8000766:	801a      	strh	r2, [r3, #0]

  // 필요 시 후속 처리 (예: 방향핀 LOW, 브레이크)
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000198 	.word	0x20000198
 8000774:	20000196 	.word	0x20000196

08000778 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a08      	ldr	r2, [pc, #32]	@ (80007a8 <HAL_ADC_ConvCpltCallback+0x30>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d10a      	bne.n	80007a0 <HAL_ADC_ConvCpltCallback+0x28>
    {
        uint32_t adc_value = HAL_ADC_GetValue(hadc);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 fe2e 	bl	80013ec <HAL_ADC_GetValue>
 8000790:	60f8      	str	r0, [r7, #12]
//        printf("ADC = %lu\n", adc_value);
        if(adc_value < 4095){
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000798:	4293      	cmp	r3, r2
 800079a:	d801      	bhi.n	80007a0 <HAL_ADC_ConvCpltCallback+0x28>
        	Stop_Motor();
 800079c:	f7ff ffdc 	bl	8000758 <Stop_Motor>
        }
    }
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40012400 	.word	0x40012400

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fc08 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f836 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f9a8 	bl	8000b0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007bc:	f000 f97c 	bl	8000ab8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007c0:	f000 f8ca 	bl	8000958 <MX_TIM2_Init>
  MX_ADC1_Init();
 80007c4:	f000 f88a 	bl	80008dc <MX_ADC1_Init>
  MX_TIM3_Init();
 80007c8:	f000 f928 	bl	8000a1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // 왼쪽, 오른쪽 모터 PWM 채널 시작
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Left Motor PWM
 80007cc:	2100      	movs	r1, #0
 80007ce:	4810      	ldr	r0, [pc, #64]	@ (8000810 <main+0x64>)
 80007d0:	f002 f9aa 	bl	8002b28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Right Motor PWM
 80007d4:	2104      	movs	r1, #4
 80007d6:	480e      	ldr	r0, [pc, #56]	@ (8000810 <main+0x64>)
 80007d8:	f002 f9a6 	bl	8002b28 <HAL_TIM_PWM_Start>

  // UART 수신 인터럽트 시작 (1바이트씩 수신)
  HAL_UART_Receive_IT(&huart2, &rx_data, 1); // UART Receive 1 byte
 80007dc:	2201      	movs	r2, #1
 80007de:	490d      	ldr	r1, [pc, #52]	@ (8000814 <main+0x68>)
 80007e0:	480d      	ldr	r0, [pc, #52]	@ (8000818 <main+0x6c>)
 80007e2:	f003 f8e4 	bl	80039ae <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 80007e6:	480d      	ldr	r0, [pc, #52]	@ (800081c <main+0x70>)
 80007e8:	f000 fd4a 	bl	8001280 <HAL_ADC_Start_IT>
  // TIM3 시작 필요
  HAL_TIM_Base_Start(&htim3);
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <main+0x74>)
 80007ee:	f002 f901 	bl	80029f4 <HAL_TIM_Base_Start>

  // 엔코더 입력을 위한 타이머 입력 캡처 시작

  // 초기 PWM 값을 0으로 설정
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <main+0x64>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <main+0x64>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2200      	movs	r2, #0
 8000800:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Transform_PWM();
 8000802:	f7ff ff4f 	bl	80006a4 <Transform_PWM>
	  HAL_Delay(10); // 딜레이를 줘서 천천히 변경 (5ms 조절 가능)
 8000806:	200a      	movs	r0, #10
 8000808:	f000 fc3e 	bl	8001088 <HAL_Delay>
	  Transform_PWM();
 800080c:	bf00      	nop
 800080e:	e7f8      	b.n	8000802 <main+0x56>
 8000810:	200000a8 	.word	0x200000a8
 8000814:	20000195 	.word	0x20000195
 8000818:	20000138 	.word	0x20000138
 800081c:	20000078 	.word	0x20000078
 8000820:	200000f0 	.word	0x200000f0

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082e:	2228      	movs	r2, #40	@ 0x28
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fed2 	bl	80045dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000854:	2301      	movs	r3, #1
 8000856:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000858:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000870:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fba4 	bl	8001fc8 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000886:	f000 f9d1 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2102      	movs	r1, #2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fe10 	bl	80024cc <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008b2:	f000 f9bb 	bl	8000c2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b6:	2302      	movs	r3, #2
 80008b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 ff90 	bl	80027e8 <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008ce:	f000 f9ad 	bl	8000c2c <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	@ 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_ADC1_Init+0x74>)
 80008ee:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <MX_ADC1_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_ADC1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_ADC1_Init+0x74>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_ADC1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_ADC1_Init+0x74>)
 8000906:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800090a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090c:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_ADC1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_ADC1_Init+0x74>)
 8000914:	2201      	movs	r2, #1
 8000916:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000918:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_ADC1_Init+0x74>)
 800091a:	f000 fbd9 	bl	80010d0 <HAL_ADC_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f982 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000928:	2306      	movs	r3, #6
 800092a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092c:	2301      	movs	r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000930:	2307      	movs	r3, #7
 8000932:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_ADC1_Init+0x74>)
 800093a:	f000 fe2b 	bl	8001594 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000944:	f000 f972 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000078 	.word	0x20000078
 8000954:	40012400 	.word	0x40012400

08000958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 800097c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000982:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 8000984:	2247      	movs	r2, #71	@ 0x47
 8000986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 8000990:	2231      	movs	r2, #49	@ 0x31
 8000992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009a0:	481d      	ldr	r0, [pc, #116]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 80009a2:	f002 f871 	bl	8002a88 <HAL_TIM_PWM_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 f93e 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4619      	mov	r1, r3
 80009be:	4816      	ldr	r0, [pc, #88]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 80009c0:	f002 feaa 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80009ca:	f000 f92f 	bl	8000c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ce:	2360      	movs	r3, #96	@ 0x60
 80009d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 80009e6:	f002 fa31 	bl	8002e4c <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80009f0:	f000 f91c 	bl	8000c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2204      	movs	r2, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 80009fc:	f002 fa26 	bl	8002e4c <HAL_TIM_PWM_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a06:	f000 f911 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a0a:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <MX_TIM2_Init+0xc0>)
 8000a0c:	f000 f9d4 	bl	8000db8 <HAL_TIM_MspPostInit>

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000a8 	.word	0x200000a8

08000a1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab4 <MX_TIM3_Init+0x98>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7122;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a40:	f641 32d2 	movw	r2, #7122	@ 0x1bd2
 8000a44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a4e:	2209      	movs	r2, #9
 8000a50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a5e:	4814      	ldr	r0, [pc, #80]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a60:	f001 ff78 	bl	8002954 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 f8df 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a7c:	f002 faa8 	bl	8002fd0 <HAL_TIM_ConfigClockSource>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 f8d1 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <MX_TIM3_Init+0x94>)
 8000a98:	f002 fe3e 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000aa2:	f000 f8c3 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000f0 	.word	0x200000f0
 8000ab4:	40000400 	.word	0x40000400

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <MX_USART2_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f002 fe82 	bl	80037f8 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f897 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000138 	.word	0x20000138
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	4b3d      	ldr	r3, [pc, #244]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a3c      	ldr	r2, [pc, #240]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b38:	4b37      	ldr	r3, [pc, #220]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a36      	ldr	r2, [pc, #216]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b34      	ldr	r3, [pc, #208]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a30      	ldr	r2, [pc, #192]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <MX_GPIO_Init+0x10c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|moter_left_dir_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8000b86:	4825      	ldr	r0, [pc, #148]	@ (8000c1c <MX_GPIO_Init+0x110>)
 8000b88:	f001 f9e4 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(moter_right_dir_GPIO_Port, moter_right_dir_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b92:	4823      	ldr	r0, [pc, #140]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000b94:	f001 f9de 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin IR_Pin */
  GPIO_InitStruct.Pin = B1_Pin|IR_Pin;
 8000b98:	f242 0301 	movw	r3, #8193	@ 0x2001
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <MX_GPIO_Init+0x118>)
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4619      	mov	r1, r3
 8000bac:	481e      	ldr	r0, [pc, #120]	@ (8000c28 <MX_GPIO_Init+0x11c>)
 8000bae:	f001 f84d 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin moter_left_dir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|moter_left_dir_Pin;
 8000bb2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4814      	ldr	r0, [pc, #80]	@ (8000c1c <MX_GPIO_Init+0x110>)
 8000bcc:	f001 f83e 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : moter_right_dir_Pin */
  GPIO_InitStruct.Pin = moter_right_dir_Pin;
 8000bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(moter_right_dir_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <MX_GPIO_Init+0x114>)
 8000bea:	f001 f82f 	bl	8001c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2006      	movs	r0, #6
 8000bf4:	f000 ff41 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f000 ff5a 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2028      	movs	r0, #40	@ 0x28
 8000c04:	f000 ff39 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c08:	2028      	movs	r0, #40	@ 0x28
 8000c0a:	f000 ff52 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	10110000 	.word	0x10110000
 8000c28:	40011000 	.word	0x40011000

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	61d3      	str	r3, [r2, #28]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_MspInit+0x60>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_MspInit+0x60>)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <HAL_ADC_MspInit+0x7c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d129      	bne.n	8000d10 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a16      	ldr	r2, [pc, #88]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a10      	ldr	r2, [pc, #64]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cec:	2340      	movs	r3, #64	@ 0x40
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <HAL_ADC_MspInit+0x84>)
 8000cfc:	f000 ffa6 	bl	8001c4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2012      	movs	r0, #18
 8000d06:	f000 feb8 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d0a:	2012      	movs	r0, #18
 8000d0c:	f000 fed1 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40012400 	.word	0x40012400
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010800 	.word	0x40010800

08000d24 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d34:	d113      	bne.n	8000d5e <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <HAL_TIM_PWM_MspInit+0x44>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d68 <HAL_TIM_PWM_MspInit+0x44>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <HAL_TIM_PWM_MspInit+0x44>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	201c      	movs	r0, #28
 8000d54:	f000 fe91 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d58:	201c      	movs	r0, #28
 8000d5a:	f000 feaa 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <HAL_TIM_Base_MspInit+0x44>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d113      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	201d      	movs	r0, #29
 8000d9c:	f000 fe6d 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000da0:	201d      	movs	r0, #29
 8000da2:	f000 fe86 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40000400 	.word	0x40000400
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd6:	d117      	bne.n	8000e08 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <HAL_TIM_MspPostInit+0x58>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e10 <HAL_TIM_MspPostInit+0x58>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_TIM_MspPostInit+0x58>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = moter_left_Pin|moter_right_Pin;
 8000df0:	2303      	movs	r3, #3
 8000df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4619      	mov	r1, r3
 8000e02:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <HAL_TIM_MspPostInit+0x5c>)
 8000e04:	f000 ff22 	bl	8001c4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010800 	.word	0x40010800

08000e18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_UART_MspInit+0x80>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d12b      	bne.n	8000e90 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e38:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_UART_MspInit+0x84>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <HAL_UART_MspInit+0x84>)
 8000e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e42:	61d3      	str	r3, [r2, #28]
 8000e44:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_UART_MspInit+0x84>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_UART_MspInit+0x84>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a11      	ldr	r2, [pc, #68]	@ (8000e9c <HAL_UART_MspInit+0x84>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_UART_MspInit+0x84>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e7c:	f000 fee6 	bl	8001c4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2026      	movs	r0, #38	@ 0x26
 8000e86:	f000 fdf8 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e8a:	2026      	movs	r0, #38	@ 0x26
 8000e8c:	f000 fe11 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f8ac 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f001 f83f 	bl	8001f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <ADC1_2_IRQHandler+0x10>)
 8000f12:	f000 fa77 	bl	8001404 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000078 	.word	0x20000078

08000f20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <TIM2_IRQHandler+0x10>)
 8000f26:	f001 fea1 	bl	8002c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000a8 	.word	0x200000a8

08000f34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <TIM3_IRQHandler+0x10>)
 8000f3a:	f001 fe97 	bl	8002c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000f0 	.word	0x200000f0

08000f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <USART2_IRQHandler+0x10>)
 8000f4e:	f002 fd53 	bl	80039f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000138 	.word	0x20000138

08000f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f64:	f001 f80e 	bl	8001f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff fff8 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480b      	ldr	r0, [pc, #44]	@ (8000fac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f7e:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f80:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f94:	4c09      	ldr	r4, [pc, #36]	@ (8000fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f003 fb29 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa6:	f7ff fc01 	bl	80007ac <main>
  bx lr
 8000faa:	4770      	bx	lr
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fb4:	080047bc 	.word	0x080047bc
  ldr r2, =_sbss
 8000fb8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fbc:	200002dc 	.word	0x200002dc

08000fc0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <CAN1_RX1_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_Init+0x28>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <HAL_Init+0x28>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 fd45 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe2a 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40022000 	.word	0x40022000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fd5d 	bl	8001ace <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800102c:	f000 fd25 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	@ (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <HAL_IncTick+0x1c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_IncTick+0x20>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a03      	ldr	r2, [pc, #12]	@ (8001070 <HAL_IncTick+0x20>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000008 	.word	0x20000008
 8001070:	200001a0 	.word	0x200001a0

08001074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b02      	ldr	r3, [pc, #8]	@ (8001084 <HAL_GetTick+0x10>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	200001a0 	.word	0x200001a0

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff fff0 	bl	8001074 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffe0 	bl	8001074 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0be      	b.n	8001270 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d109      	bne.n	8001114 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fdc4 	bl	8000c9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fb8f 	bl	8001838 <ADC_ConversionStop_Disable>
 800111a:	4603      	mov	r3, r0
 800111c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 8099 	bne.w	800125e <HAL_ADC_Init+0x18e>
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 8095 	bne.w	800125e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001138:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800113c:	f023 0302 	bic.w	r3, r3, #2
 8001140:	f043 0202 	orr.w	r2, r3, #2
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001150:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7b1b      	ldrb	r3, [r3, #12]
 8001156:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001158:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4313      	orrs	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001168:	d003      	beq.n	8001172 <HAL_ADC_Init+0xa2>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d102      	bne.n	8001178 <HAL_ADC_Init+0xa8>
 8001172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001176:	e000      	b.n	800117a <HAL_ADC_Init+0xaa>
 8001178:	2300      	movs	r3, #0
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7d1b      	ldrb	r3, [r3, #20]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d119      	bne.n	80011bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7b1b      	ldrb	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d109      	bne.n	80011a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	3b01      	subs	r3, #1
 8001196:	035a      	lsls	r2, r3, #13
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	e00b      	b.n	80011bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a8:	f043 0220 	orr.w	r2, r3, #32
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <HAL_ADC_Init+0x1a8>)
 80011d8:	4013      	ands	r3, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011ec:	d003      	beq.n	80011f6 <HAL_ADC_Init+0x126>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d104      	bne.n	8001200 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	051b      	lsls	r3, r3, #20
 80011fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	430a      	orrs	r2, r1
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_ADC_Init+0x1ac>)
 800121c:	4013      	ands	r3, r2
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	429a      	cmp	r2, r3
 8001222:	d10b      	bne.n	800123c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800123a:	e018      	b.n	800126e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001240:	f023 0312 	bic.w	r3, r3, #18
 8001244:	f043 0210 	orr.w	r2, r3, #16
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800125c:	e007      	b.n	800126e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001262:	f043 0210 	orr.w	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800126e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	ffe1f7fd 	.word	0xffe1f7fd
 800127c:	ff1f0efe 	.word	0xff1f0efe

08001280 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_ADC_Start_IT+0x1a>
 8001296:	2302      	movs	r3, #2
 8001298:	e0a0      	b.n	80013dc <HAL_ADC_Start_IT+0x15c>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fa6e 	bl	8001784 <ADC_Enable>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f040 808f 	bne.w	80013d2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a45      	ldr	r2, [pc, #276]	@ (80013e4 <HAL_ADC_Start_IT+0x164>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d105      	bne.n	80012de <HAL_ADC_Start_IT+0x5e>
 80012d2:	4b45      	ldr	r3, [pc, #276]	@ (80013e8 <HAL_ADC_Start_IT+0x168>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d115      	bne.n	800130a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d026      	beq.n	8001346 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001300:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001308:	e01d      	b.n	8001346 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a33      	ldr	r2, [pc, #204]	@ (80013e8 <HAL_ADC_Start_IT+0x168>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d004      	beq.n	800132a <HAL_ADC_Start_IT+0xaa>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2f      	ldr	r2, [pc, #188]	@ (80013e4 <HAL_ADC_Start_IT+0x164>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10d      	bne.n	8001346 <HAL_ADC_Start_IT+0xc6>
 800132a:	4b2f      	ldr	r3, [pc, #188]	@ (80013e8 <HAL_ADC_Start_IT+0x168>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800133e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001356:	f023 0206 	bic.w	r2, r3, #6
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800135e:	e002      	b.n	8001366 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f06f 0202 	mvn.w	r2, #2
 8001376:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001392:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001396:	d113      	bne.n	80013c0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800139c:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <HAL_ADC_Start_IT+0x164>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d105      	bne.n	80013ae <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <HAL_ADC_Start_IT+0x168>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	e00c      	b.n	80013da <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e003      	b.n	80013da <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40012800 	.word	0x40012800
 80013e8:	40012400 	.word	0x40012400

080013ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03e      	beq.n	80014a4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d039      	beq.n	80014a4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001440:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001452:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001456:	d11d      	bne.n	8001494 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800145c:	2b00      	cmp	r3, #0
 800145e:	d119      	bne.n	8001494 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0220 	bic.w	r2, r2, #32
 800146e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d105      	bne.n	8001494 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff f96f 	bl	8000778 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f06f 0212 	mvn.w	r2, #18
 80014a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d04d      	beq.n	800154a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d048      	beq.n	800154a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80014da:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80014de:	d012      	beq.n	8001506 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d125      	bne.n	800153a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014f8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80014fc:	d11d      	bne.n	800153a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d119      	bne.n	800153a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001514:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f9bd 	bl	80018ba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 020c 	mvn.w	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001550:	2b00      	cmp	r3, #0
 8001552:	d012      	beq.n	800157a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00d      	beq.n	800157a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f809 	bl	8001582 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f06f 0201 	mvn.w	r2, #1
 8001578:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x20>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e0dc      	b.n	800176e <HAL_ADC_ConfigChannel+0x1da>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b06      	cmp	r3, #6
 80015c2:	d81c      	bhi.n	80015fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	3b05      	subs	r3, #5
 80015d6:	221f      	movs	r2, #31
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	4019      	ands	r1, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	3b05      	subs	r3, #5
 80015f0:	fa00 f203 	lsl.w	r2, r0, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80015fc:	e03c      	b.n	8001678 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d81c      	bhi.n	8001640 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	3b23      	subs	r3, #35	@ 0x23
 8001618:	221f      	movs	r2, #31
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	4019      	ands	r1, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b23      	subs	r3, #35	@ 0x23
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	@ 0x30
 800163e:	e01b      	b.n	8001678 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b41      	subs	r3, #65	@ 0x41
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	4019      	ands	r1, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b41      	subs	r3, #65	@ 0x41
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d91c      	bls.n	80016ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68d9      	ldr	r1, [r3, #12]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	3b1e      	subs	r3, #30
 8001692:	2207      	movs	r2, #7
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	4019      	ands	r1, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	6898      	ldr	r0, [r3, #8]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	3b1e      	subs	r3, #30
 80016ac:	fa00 f203 	lsl.w	r2, r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	e019      	b.n	80016ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6919      	ldr	r1, [r3, #16]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	2207      	movs	r2, #7
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4019      	ands	r1, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6898      	ldr	r0, [r3, #8]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d003      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016fa:	2b11      	cmp	r3, #17
 80016fc:	d132      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <HAL_ADC_ConfigChannel+0x1e4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d125      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d126      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001724:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b10      	cmp	r3, #16
 800172c:	d11a      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_ADC_ConfigChannel+0x1e8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a13      	ldr	r2, [pc, #76]	@ (8001780 <HAL_ADC_ConfigChannel+0x1ec>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	0c9a      	lsrs	r2, r3, #18
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001744:	e002      	b.n	800174c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3b01      	subs	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x1b2>
 8001752:	e007      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	f043 0220 	orr.w	r2, r3, #32
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40012400 	.word	0x40012400
 800177c:	20000000 	.word	0x20000000
 8001780:	431bde83 	.word	0x431bde83

08001784 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d040      	beq.n	8001824 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <ADC_Enable+0xac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001834 <ADC_Enable+0xb0>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	0c9b      	lsrs	r3, r3, #18
 80017be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017c0:	e002      	b.n	80017c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ce:	f7ff fc51 	bl	8001074 <HAL_GetTick>
 80017d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017d4:	e01f      	b.n	8001816 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017d6:	f7ff fc4d 	bl	8001074 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d918      	bls.n	8001816 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d011      	beq.n	8001816 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	f043 0210 	orr.w	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e007      	b.n	8001826 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d1d8      	bne.n	80017d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000
 8001834:	431bde83 	.word	0x431bde83

08001838 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d12e      	bne.n	80018b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001862:	f7ff fc07 	bl	8001074 <HAL_GetTick>
 8001866:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001868:	e01b      	b.n	80018a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800186a:	f7ff fc03 	bl	8001074 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d914      	bls.n	80018a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10d      	bne.n	80018a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	f043 0210 	orr.w	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e007      	b.n	80018b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d0dc      	beq.n	800186a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4906      	ldr	r1, [pc, #24]	@ (8001964 <__NVIC_EnableIRQ+0x34>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	@ (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	@ (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	@ 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	@ 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a44:	f7ff ff90 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff2d 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff42 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff90 	bl	80019bc <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5f 	bl	8001968 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff35 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d008      	beq.n	8001b10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2204      	movs	r2, #4
 8001b02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e020      	b.n	8001b52 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 020e 	bic.w	r2, r2, #14
 8001b1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d005      	beq.n	8001b80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2204      	movs	r2, #4
 8001b78:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e051      	b.n	8001c24 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 020e 	bic.w	r2, r2, #14
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <HAL_DMA_Abort_IT+0xd4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d029      	beq.n	8001bfe <HAL_DMA_Abort_IT+0xa2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <HAL_DMA_Abort_IT+0xd8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d022      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x9e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c38 <HAL_DMA_Abort_IT+0xdc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01a      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0x98>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c3c <HAL_DMA_Abort_IT+0xe0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d012      	beq.n	8001bee <HAL_DMA_Abort_IT+0x92>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <HAL_DMA_Abort_IT+0xe4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00a      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x8c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_DMA_Abort_IT+0xe8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d102      	bne.n	8001be2 <HAL_DMA_Abort_IT+0x86>
 8001bdc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001be0:	e00e      	b.n	8001c00 <HAL_DMA_Abort_IT+0xa4>
 8001be2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001be6:	e00b      	b.n	8001c00 <HAL_DMA_Abort_IT+0xa4>
 8001be8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bec:	e008      	b.n	8001c00 <HAL_DMA_Abort_IT+0xa4>
 8001bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf2:	e005      	b.n	8001c00 <HAL_DMA_Abort_IT+0xa4>
 8001bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bf8:	e002      	b.n	8001c00 <HAL_DMA_Abort_IT+0xa4>
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	e000      	b.n	8001c00 <HAL_DMA_Abort_IT+0xa4>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	4a11      	ldr	r2, [pc, #68]	@ (8001c48 <HAL_DMA_Abort_IT+0xec>)
 8001c02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
    } 
  }
  return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40020008 	.word	0x40020008
 8001c34:	4002001c 	.word	0x4002001c
 8001c38:	40020030 	.word	0x40020030
 8001c3c:	40020044 	.word	0x40020044
 8001c40:	40020058 	.word	0x40020058
 8001c44:	4002006c 	.word	0x4002006c
 8001c48:	40020000 	.word	0x40020000

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b08b      	sub	sp, #44	@ 0x2c
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	e169      	b.n	8001f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c60:	2201      	movs	r2, #1
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8158 	bne.w	8001f2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a9a      	ldr	r2, [pc, #616]	@ (8001eec <HAL_GPIO_Init+0x2a0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d05e      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001c88:	4a98      	ldr	r2, [pc, #608]	@ (8001eec <HAL_GPIO_Init+0x2a0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d875      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001c8e:	4a98      	ldr	r2, [pc, #608]	@ (8001ef0 <HAL_GPIO_Init+0x2a4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d058      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001c94:	4a96      	ldr	r2, [pc, #600]	@ (8001ef0 <HAL_GPIO_Init+0x2a4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d86f      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001c9a:	4a96      	ldr	r2, [pc, #600]	@ (8001ef4 <HAL_GPIO_Init+0x2a8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d052      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001ca0:	4a94      	ldr	r2, [pc, #592]	@ (8001ef4 <HAL_GPIO_Init+0x2a8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d869      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001ca6:	4a94      	ldr	r2, [pc, #592]	@ (8001ef8 <HAL_GPIO_Init+0x2ac>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d04c      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001cac:	4a92      	ldr	r2, [pc, #584]	@ (8001ef8 <HAL_GPIO_Init+0x2ac>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d863      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cb2:	4a92      	ldr	r2, [pc, #584]	@ (8001efc <HAL_GPIO_Init+0x2b0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d046      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001cb8:	4a90      	ldr	r2, [pc, #576]	@ (8001efc <HAL_GPIO_Init+0x2b0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d85d      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d82a      	bhi.n	8001d18 <HAL_GPIO_Init+0xcc>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d859      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ccc <HAL_GPIO_Init+0x80>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001d47 	.word	0x08001d47
 8001cd0:	08001d21 	.word	0x08001d21
 8001cd4:	08001d33 	.word	0x08001d33
 8001cd8:	08001d75 	.word	0x08001d75
 8001cdc:	08001d7b 	.word	0x08001d7b
 8001ce0:	08001d7b 	.word	0x08001d7b
 8001ce4:	08001d7b 	.word	0x08001d7b
 8001ce8:	08001d7b 	.word	0x08001d7b
 8001cec:	08001d7b 	.word	0x08001d7b
 8001cf0:	08001d7b 	.word	0x08001d7b
 8001cf4:	08001d7b 	.word	0x08001d7b
 8001cf8:	08001d7b 	.word	0x08001d7b
 8001cfc:	08001d7b 	.word	0x08001d7b
 8001d00:	08001d7b 	.word	0x08001d7b
 8001d04:	08001d7b 	.word	0x08001d7b
 8001d08:	08001d7b 	.word	0x08001d7b
 8001d0c:	08001d7b 	.word	0x08001d7b
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d3d 	.word	0x08001d3d
 8001d18:	4a79      	ldr	r2, [pc, #484]	@ (8001f00 <HAL_GPIO_Init+0x2b4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d1e:	e02c      	b.n	8001d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	623b      	str	r3, [r7, #32]
          break;
 8001d26:	e029      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e024      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	3308      	adds	r3, #8
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e01f      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	330c      	adds	r3, #12
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e01a      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e013      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	611a      	str	r2, [r3, #16]
          break;
 8001d66:	e009      	b.n	8001d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	615a      	str	r2, [r3, #20]
          break;
 8001d72:	e003      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          break;
 8001d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2bff      	cmp	r3, #255	@ 0xff
 8001d80:	d801      	bhi.n	8001d86 <HAL_GPIO_Init+0x13a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_Init+0x13e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2bff      	cmp	r3, #255	@ 0xff
 8001d90:	d802      	bhi.n	8001d98 <HAL_GPIO_Init+0x14c>
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x152>
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	210f      	movs	r1, #15
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	401a      	ands	r2, r3
 8001db0:	6a39      	ldr	r1, [r7, #32]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80b1 	beq.w	8001f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8001f04 <HAL_GPIO_Init+0x2b8>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001f04 <HAL_GPIO_Init+0x2b8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8001f04 <HAL_GPIO_Init+0x2b8>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de4:	4a48      	ldr	r2, [pc, #288]	@ (8001f08 <HAL_GPIO_Init+0x2bc>)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a40      	ldr	r2, [pc, #256]	@ (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <HAL_GPIO_Init+0x1ec>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3f      	ldr	r2, [pc, #252]	@ (8001f10 <HAL_GPIO_Init+0x2c4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00d      	beq.n	8001e34 <HAL_GPIO_Init+0x1e8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f14 <HAL_GPIO_Init+0x2c8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <HAL_GPIO_Init+0x1e4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3d      	ldr	r2, [pc, #244]	@ (8001f18 <HAL_GPIO_Init+0x2cc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_GPIO_Init+0x1e0>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e006      	b.n	8001e3a <HAL_GPIO_Init+0x1ee>
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	e004      	b.n	8001e3a <HAL_GPIO_Init+0x1ee>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x1ee>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_GPIO_Init+0x1ee>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e3c:	f002 0203 	and.w	r2, r2, #3
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	4093      	lsls	r3, r2
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e4a:	492f      	ldr	r1, [pc, #188]	@ (8001f08 <HAL_GPIO_Init+0x2bc>)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e64:	4b2d      	ldr	r3, [pc, #180]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	492c      	ldr	r1, [pc, #176]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e72:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4928      	ldr	r1, [pc, #160]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e8c:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4922      	ldr	r1, [pc, #136]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	491e      	ldr	r1, [pc, #120]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb4:	4b19      	ldr	r3, [pc, #100]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	4918      	ldr	r1, [pc, #96]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ec2:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4914      	ldr	r1, [pc, #80]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d021      	beq.n	8001f20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	490e      	ldr	r1, [pc, #56]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
 8001ee8:	e021      	b.n	8001f2e <HAL_GPIO_Init+0x2e2>
 8001eea:	bf00      	nop
 8001eec:	10320000 	.word	0x10320000
 8001ef0:	10310000 	.word	0x10310000
 8001ef4:	10220000 	.word	0x10220000
 8001ef8:	10210000 	.word	0x10210000
 8001efc:	10120000 	.word	0x10120000
 8001f00:	10110000 	.word	0x10110000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40010800 	.word	0x40010800
 8001f10:	40010c00 	.word	0x40010c00
 8001f14:	40011000 	.word	0x40011000
 8001f18:	40011400 	.word	0x40011400
 8001f1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_GPIO_Init+0x304>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	4909      	ldr	r1, [pc, #36]	@ (8001f50 <HAL_GPIO_Init+0x304>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f47f ae8e 	bne.w	8001c60 <HAL_GPIO_Init+0x14>
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	372c      	adds	r7, #44	@ 0x2c
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40010400 	.word	0x40010400

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	611a      	str	r2, [r3, #16]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f9a:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f806 	bl	8001fb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e272      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	4b92      	ldr	r3, [pc, #584]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff4:	4b8f      	ldr	r3, [pc, #572]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d112      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
 8002000:	4b8c      	ldr	r3, [pc, #560]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b89      	ldr	r3, [pc, #548]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d06c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x12c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d168      	bne.n	80020f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e24c      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x76>
 8002030:	4b80      	ldr	r3, [pc, #512]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a7f      	ldr	r2, [pc, #508]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e02e      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x98>
 8002046:	4b7b      	ldr	r3, [pc, #492]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7a      	ldr	r2, [pc, #488]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b78      	ldr	r3, [pc, #480]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a77      	ldr	r2, [pc, #476]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0xbc>
 800206a:	4b72      	ldr	r3, [pc, #456]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a71      	ldr	r2, [pc, #452]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b6f      	ldr	r3, [pc, #444]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6e      	ldr	r2, [pc, #440]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002084:	4b6b      	ldr	r3, [pc, #428]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6a      	ldr	r2, [pc, #424]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b68      	ldr	r3, [pc, #416]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a67      	ldr	r2, [pc, #412]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe ffe6 	bl	8001074 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7fe ffe2 	bl	8001074 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e200      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b5d      	ldr	r3, [pc, #372]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xe4>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffd2 	bl	8001074 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe ffce 	bl	8001074 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	@ 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1ec      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x10c>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d063      	beq.n	80021ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002102:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210e:	4b49      	ldr	r3, [pc, #292]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
 800211a:	4b46      	ldr	r3, [pc, #280]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b43      	ldr	r3, [pc, #268]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1c0      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b3d      	ldr	r3, [pc, #244]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4939      	ldr	r1, [pc, #228]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e03a      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe ff87 	bl	8001074 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7fe ff83 	bl	8001074 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1a1      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4927      	ldr	r1, [pc, #156]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe ff66 	bl	8001074 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7fe ff62 	bl	8001074 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e180      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03a      	beq.n	800224c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d019      	beq.n	8002212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021de:	4b17      	ldr	r3, [pc, #92]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7fe ff46 	bl	8001074 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe ff42 	bl	8001074 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e160      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 face 	bl	80027ac <RCC_Delay>
 8002210:	e01c      	b.n	800224c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7fe ff2c 	bl	8001074 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221e:	e00f      	b.n	8002240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7fe ff28 	bl	8001074 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d908      	bls.n	8002240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e146      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	42420000 	.word	0x42420000
 800223c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b92      	ldr	r3, [pc, #584]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e9      	bne.n	8002220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a6 	beq.w	80023a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b8b      	ldr	r3, [pc, #556]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b88      	ldr	r3, [pc, #544]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a87      	ldr	r2, [pc, #540]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b85      	ldr	r3, [pc, #532]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b82      	ldr	r3, [pc, #520]	@ (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b7f      	ldr	r3, [pc, #508]	@ (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7e      	ldr	r2, [pc, #504]	@ (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7fe fee9 	bl	8001074 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7fe fee5 	bl	8001074 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	@ 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e103      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b75      	ldr	r3, [pc, #468]	@ (8002490 <HAL_RCC_OscConfig+0x4c8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x312>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x334>
 80022e2:	4b6a      	ldr	r3, [pc, #424]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a69      	ldr	r2, [pc, #420]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4b67      	ldr	r3, [pc, #412]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a66      	ldr	r2, [pc, #408]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	e01c      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x356>
 8002304:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4a60      	ldr	r2, [pc, #384]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6213      	str	r3, [r2, #32]
 8002310:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 800231e:	4b5b      	ldr	r3, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a5a      	ldr	r2, [pc, #360]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4b58      	ldr	r3, [pc, #352]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a57      	ldr	r2, [pc, #348]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d015      	beq.n	800236a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7fe fe99 	bl	8001074 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe fe95 	bl	8001074 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0b1      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ee      	beq.n	8002346 <HAL_RCC_OscConfig+0x37e>
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7fe fe83 	bl	8001074 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe fe7f 	bl	8001074 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e09b      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	4b40      	ldr	r3, [pc, #256]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ee      	bne.n	8002372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a3b      	ldr	r2, [pc, #236]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b0:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d061      	beq.n	8002480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d146      	bne.n	8002452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe fe53 	bl	8001074 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fe4f 	bl	8001074 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e06d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e4:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023fa:	4b24      	ldr	r3, [pc, #144]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4921      	ldr	r1, [pc, #132]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240c:	4b1f      	ldr	r3, [pc, #124]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a19      	ldr	r1, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	430b      	orrs	r3, r1
 800241e:	491b      	ldr	r1, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe fe23 	bl	8001074 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fe1f 	bl	8001074 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e03d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x46a>
 8002450:	e035      	b.n	80024be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <HAL_RCC_OscConfig+0x4cc>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fe0c 	bl	8001074 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fe08 	bl	8001074 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e026      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x498>
 800247e:	e01e      	b.n	80024be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e019      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_RCC_OscConfig+0x500>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d0      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b6a      	ldr	r3, [pc, #424]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b67      	ldr	r3, [pc, #412]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	4965      	ldr	r1, [pc, #404]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a58      	ldr	r2, [pc, #352]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a52      	ldr	r2, [pc, #328]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800254a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d040      	beq.n	80025ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e073      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4936      	ldr	r1, [pc, #216]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025bc:	f7fe fd5a 	bl	8001074 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7fe fd56 	bl	8001074 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e053      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0207 	bic.w	r2, r3, #7
 8002602:	4922      	ldr	r1, [pc, #136]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	@ (8002694 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x1cc>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x1d0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fcb8 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000
 8002690:	40021000 	.word	0x40021000
 8002694:	08004688 	.word	0x08004688
 8002698:	20000000 	.word	0x20000000
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x94>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d002      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x30>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d003      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0x36>
 80026ce:	e027      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 80026d2:	613b      	str	r3, [r7, #16]
      break;
 80026d4:	e027      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0c9b      	lsrs	r3, r3, #18
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	4a17      	ldr	r2, [pc, #92]	@ (800273c <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d010      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x94>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0c5b      	lsrs	r3, r3, #17
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 8002702:	fb03 f202 	mul.w	r2, r3, r2
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e004      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0c      	ldr	r2, [pc, #48]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	613b      	str	r3, [r7, #16]
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 8002722:	613b      	str	r3, [r7, #16]
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	693b      	ldr	r3, [r7, #16]
}
 8002728:	4618      	mov	r0, r3
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	007a1200 	.word	0x007a1200
 800273c:	080046a0 	.word	0x080046a0
 8002740:	080046b0 	.word	0x080046b0
 8002744:	003d0900 	.word	0x003d0900

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b02      	ldr	r3, [pc, #8]	@ (8002758 <HAL_RCC_GetHCLKFreq+0x10>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	20000000 	.word	0x20000000

0800275c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002760:	f7ff fff2 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4903      	ldr	r1, [pc, #12]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	08004698 	.word	0x08004698

08002784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002788:	f7ff ffde 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0adb      	lsrs	r3, r3, #11
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08004698 	.word	0x08004698

080027ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b4:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <RCC_Delay+0x34>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <RCC_Delay+0x38>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0a5b      	lsrs	r3, r3, #9
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c8:	bf00      	nop
  }
  while (Delay --);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	60fa      	str	r2, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f9      	bne.n	80027c8 <RCC_Delay+0x1c>
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000000 	.word	0x20000000
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d07d      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002808:	4b4f      	ldr	r3, [pc, #316]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10d      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	4b4c      	ldr	r3, [pc, #304]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	4a4b      	ldr	r2, [pc, #300]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800281e:	61d3      	str	r3, [r2, #28]
 8002820:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282c:	2301      	movs	r3, #1
 800282e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b46      	ldr	r3, [pc, #280]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d118      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283c:	4b43      	ldr	r3, [pc, #268]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a42      	ldr	r2, [pc, #264]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002848:	f7fe fc14 	bl	8001074 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	e008      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002850:	f7fe fc10 	bl	8001074 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	@ 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e06d      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b3a      	ldr	r3, [pc, #232]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800286e:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002876:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d02e      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d027      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800288c:	4b2e      	ldr	r3, [pc, #184]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002894:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002896:	4b2e      	ldr	r3, [pc, #184]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289c:	4b2c      	ldr	r3, [pc, #176]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028a2:	4a29      	ldr	r2, [pc, #164]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d014      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe fbdf 	bl	8001074 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe fbdb 	bl	8001074 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e036      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ee      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4917      	ldr	r1, [pc, #92]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d105      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f4:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	4a13      	ldr	r2, [pc, #76]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	490b      	ldr	r1, [pc, #44]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800292a:	4b07      	ldr	r3, [pc, #28]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4904      	ldr	r1, [pc, #16]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	40007000 	.word	0x40007000
 8002950:	42420440 	.word	0x42420440

08002954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e041      	b.n	80029ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe f9f6 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 fc10 	bl	80031b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d001      	beq.n	8002a0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <HAL_TIM_Base_Start+0x88>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00e      	beq.n	8002a3c <HAL_TIM_Base_Start+0x48>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a26:	d009      	beq.n	8002a3c <HAL_TIM_Base_Start+0x48>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a14      	ldr	r2, [pc, #80]	@ (8002a80 <HAL_TIM_Base_Start+0x8c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <HAL_TIM_Base_Start+0x48>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a13      	ldr	r2, [pc, #76]	@ (8002a84 <HAL_TIM_Base_Start+0x90>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d111      	bne.n	8002a60 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d010      	beq.n	8002a70 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	e007      	b.n	8002a70 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800

08002a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e041      	b.n	8002b1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe f938 	bl	8000d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f000 fb76 	bl	80031b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <HAL_TIM_PWM_Start+0x24>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e022      	b.n	8002b92 <HAL_TIM_PWM_Start+0x6a>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d109      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x3e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e015      	b.n	8002b92 <HAL_TIM_PWM_Start+0x6a>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d109      	bne.n	8002b80 <HAL_TIM_PWM_Start+0x58>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e008      	b.n	8002b92 <HAL_TIM_PWM_Start+0x6a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e05e      	b.n	8002c58 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_PWM_Start+0x82>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba8:	e013      	b.n	8002bd2 <HAL_TIM_PWM_Start+0xaa>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d104      	bne.n	8002bba <HAL_TIM_PWM_Start+0x92>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bb8:	e00b      	b.n	8002bd2 <HAL_TIM_PWM_Start+0xaa>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d104      	bne.n	8002bca <HAL_TIM_PWM_Start+0xa2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bc8:	e003      	b.n	8002bd2 <HAL_TIM_PWM_Start+0xaa>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	6839      	ldr	r1, [r7, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fd78 	bl	80036d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <HAL_TIM_PWM_Start+0x138>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d107      	bne.n	8002bfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_TIM_PWM_Start+0x138>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_TIM_PWM_Start+0xfa>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0c:	d009      	beq.n	8002c22 <HAL_TIM_PWM_Start+0xfa>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <HAL_TIM_PWM_Start+0x13c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_TIM_PWM_Start+0xfa>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a12      	ldr	r2, [pc, #72]	@ (8002c68 <HAL_TIM_PWM_Start+0x140>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d111      	bne.n	8002c46 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d010      	beq.n	8002c56 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c44:	e007      	b.n	8002c56 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800

08002c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d020      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01b      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0202 	mvn.w	r2, #2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa63 	bl	8003182 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa56 	bl	8003170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fa65 	bl	8003194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d020      	beq.n	8002d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01b      	beq.n	8002d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0204 	mvn.w	r2, #4
 8002cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa3d 	bl	8003182 <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa30 	bl	8003170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fa3f 	bl	8003194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d020      	beq.n	8002d68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01b      	beq.n	8002d68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0208 	mvn.w	r2, #8
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa17 	bl	8003182 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa0a 	bl	8003170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fa19 	bl	8003194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d020      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01b      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0210 	mvn.w	r2, #16
 8002d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f9f1 	bl	8003182 <HAL_TIM_IC_CaptureCallback>
 8002da0:	e005      	b.n	8002dae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9e4 	bl	8003170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f9f3 	bl	8003194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0201 	mvn.w	r2, #1
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9c3 	bl	800315e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fcf5 	bl	80037e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f9c3 	bl	80031a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0220 	mvn.w	r2, #32
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fcc8 	bl	80037d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0ae      	b.n	8002fc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	f200 809f 	bhi.w	8002fb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002eb5 	.word	0x08002eb5
 8002e84:	08002fb9 	.word	0x08002fb9
 8002e88:	08002fb9 	.word	0x08002fb9
 8002e8c:	08002fb9 	.word	0x08002fb9
 8002e90:	08002ef5 	.word	0x08002ef5
 8002e94:	08002fb9 	.word	0x08002fb9
 8002e98:	08002fb9 	.word	0x08002fb9
 8002e9c:	08002fb9 	.word	0x08002fb9
 8002ea0:	08002f37 	.word	0x08002f37
 8002ea4:	08002fb9 	.word	0x08002fb9
 8002ea8:	08002fb9 	.word	0x08002fb9
 8002eac:	08002fb9 	.word	0x08002fb9
 8002eb0:	08002f77 	.word	0x08002f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f9ea 	bl	8003294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0204 	bic.w	r2, r2, #4
 8002ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6999      	ldr	r1, [r3, #24]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	619a      	str	r2, [r3, #24]
      break;
 8002ef2:	e064      	b.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fa30 	bl	8003360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	619a      	str	r2, [r3, #24]
      break;
 8002f34:	e043      	b.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fa79 	bl	8003434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0208 	orr.w	r2, r2, #8
 8002f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0204 	bic.w	r2, r2, #4
 8002f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	61da      	str	r2, [r3, #28]
      break;
 8002f74:	e023      	b.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fac3 	bl	8003508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69d9      	ldr	r1, [r3, #28]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	021a      	lsls	r2, r3, #8
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	61da      	str	r2, [r3, #28]
      break;
 8002fb6:	e002      	b.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
      break;
 8002fbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_TIM_ConfigClockSource+0x1c>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0b4      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x186>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800300a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003024:	d03e      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800302a:	f200 8087 	bhi.w	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003032:	f000 8086 	beq.w	8003142 <HAL_TIM_ConfigClockSource+0x172>
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303a:	d87f      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b70      	cmp	r3, #112	@ 0x70
 800303e:	d01a      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xa6>
 8003040:	2b70      	cmp	r3, #112	@ 0x70
 8003042:	d87b      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003044:	2b60      	cmp	r3, #96	@ 0x60
 8003046:	d050      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x11a>
 8003048:	2b60      	cmp	r3, #96	@ 0x60
 800304a:	d877      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b50      	cmp	r3, #80	@ 0x50
 800304e:	d03c      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xfa>
 8003050:	2b50      	cmp	r3, #80	@ 0x50
 8003052:	d873      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b40      	cmp	r3, #64	@ 0x40
 8003056:	d058      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x13a>
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d86f      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b30      	cmp	r3, #48	@ 0x30
 800305e:	d064      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003060:	2b30      	cmp	r3, #48	@ 0x30
 8003062:	d86b      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d060      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003068:	2b20      	cmp	r3, #32
 800306a:	d867      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05c      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003070:	2b10      	cmp	r3, #16
 8003072:	d05a      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	e062      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003086:	f000 fb04 	bl	8003692 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	609a      	str	r2, [r3, #8]
      break;
 80030a2:	e04f      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030b4:	f000 faed 	bl	8003692 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c6:	609a      	str	r2, [r3, #8]
      break;
 80030c8:	e03c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 fa64 	bl	80035a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2150      	movs	r1, #80	@ 0x50
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fabb 	bl	800365e <TIM_ITRx_SetConfig>
      break;
 80030e8:	e02c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 fa82 	bl	8003600 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2160      	movs	r1, #96	@ 0x60
 8003102:	4618      	mov	r0, r3
 8003104:	f000 faab 	bl	800365e <TIM_ITRx_SetConfig>
      break;
 8003108:	e01c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003116:	461a      	mov	r2, r3
 8003118:	f000 fa44 	bl	80035a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2140      	movs	r1, #64	@ 0x40
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fa9b 	bl	800365e <TIM_ITRx_SetConfig>
      break;
 8003128:	e00c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f000 fa92 	bl	800365e <TIM_ITRx_SetConfig>
      break;
 800313a:	e003      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      break;
 8003140:	e000      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003288 <TIM_Base_SetConfig+0xd0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <TIM_Base_SetConfig+0x30>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d6:	d007      	beq.n	80031e8 <TIM_Base_SetConfig+0x30>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a2c      	ldr	r2, [pc, #176]	@ (800328c <TIM_Base_SetConfig+0xd4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_Base_SetConfig+0x30>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003290 <TIM_Base_SetConfig+0xd8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d108      	bne.n	80031fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <TIM_Base_SetConfig+0xd0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00b      	beq.n	800321a <TIM_Base_SetConfig+0x62>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003208:	d007      	beq.n	800321a <TIM_Base_SetConfig+0x62>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a1f      	ldr	r2, [pc, #124]	@ (800328c <TIM_Base_SetConfig+0xd4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d003      	beq.n	800321a <TIM_Base_SetConfig+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1e      	ldr	r2, [pc, #120]	@ (8003290 <TIM_Base_SetConfig+0xd8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d108      	bne.n	800322c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a0d      	ldr	r2, [pc, #52]	@ (8003288 <TIM_Base_SetConfig+0xd0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d103      	bne.n	8003260 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]
  }
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800

08003294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f023 0201 	bic.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 0302 	bic.w	r3, r3, #2
 80032dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a1c      	ldr	r2, [pc, #112]	@ (800335c <TIM_OC1_SetConfig+0xc8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10c      	bne.n	800330a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0308 	bic.w	r3, r3, #8
 80032f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a13      	ldr	r2, [pc, #76]	@ (800335c <TIM_OC1_SetConfig+0xc8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	621a      	str	r2, [r3, #32]
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00

08003360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f023 0210 	bic.w	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800338e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0320 	bic.w	r3, r3, #32
 80033aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003430 <TIM_OC2_SetConfig+0xd0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10d      	bne.n	80033dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a14      	ldr	r2, [pc, #80]	@ (8003430 <TIM_OC2_SetConfig+0xd0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d113      	bne.n	800340c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	621a      	str	r2, [r3, #32]
}
 8003426:	bf00      	nop
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40012c00 	.word	0x40012c00

08003434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800347c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a1d      	ldr	r2, [pc, #116]	@ (8003504 <TIM_OC3_SetConfig+0xd0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d10d      	bne.n	80034ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a14      	ldr	r2, [pc, #80]	@ (8003504 <TIM_OC3_SetConfig+0xd0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d113      	bne.n	80034de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	621a      	str	r2, [r3, #32]
}
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40012c00 	.word	0x40012c00

08003508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a0f      	ldr	r2, [pc, #60]	@ (80035a0 <TIM_OC4_SetConfig+0x98>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d109      	bne.n	800357c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800356e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40012c00 	.word	0x40012c00

080035a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 0201 	bic.w	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 030a 	bic.w	r3, r3, #10
 80035e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f023 0210 	bic.w	r2, r3, #16
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800362a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	031b      	lsls	r3, r3, #12
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800363c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	621a      	str	r2, [r3, #32]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	f043 0307 	orr.w	r3, r3, #7
 8003680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003692:	b480      	push	{r7}
 8003694:	b087      	sub	sp, #28
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	021a      	lsls	r2, r3, #8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	609a      	str	r2, [r3, #8]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	2201      	movs	r2, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	401a      	ands	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e046      	b.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a16      	ldr	r2, [pc, #88]	@ (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d009      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10c      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	40012c00 	.word	0x40012c00
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800

080037d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e042      	b.n	8003890 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fafa 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	@ 0x24
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800383a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fdb7 	bl	80043b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d175      	bne.n	80039a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_UART_Transmit+0x2c>
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e06e      	b.n	80039a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2221      	movs	r2, #33	@ 0x21
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038d6:	f7fd fbcd 	bl	8001074 <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f0:	d108      	bne.n	8003904 <HAL_UART_Transmit+0x6c>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d104      	bne.n	8003904 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e003      	b.n	800390c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800390c:	e02e      	b.n	800396c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	@ 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fb1c 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e03a      	b.n	80039a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3302      	adds	r3, #2
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e007      	b.n	800395e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3301      	adds	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1cb      	bne.n	800390e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2140      	movs	r1, #64	@ 0x40
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fae8 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e006      	b.n	80039a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d112      	bne.n	80039ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Receive_IT+0x26>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e00b      	b.n	80039f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	461a      	mov	r2, r3
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fb0f 	bl	8004008 <UART_Start_Receive_IT>
 80039ea:	4603      	mov	r3, r0
 80039ec:	e000      	b.n	80039f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b0ba      	sub	sp, #232	@ 0xe8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_UART_IRQHandler+0x66>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fbec 	bl	8004234 <UART_Receive_IT>
      return;
 8003a5c:	e25b      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80de 	beq.w	8003c24 <HAL_UART_IRQHandler+0x22c>
 8003a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80d1 	beq.w	8003c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xae>
 8003a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_UART_IRQHandler+0xd2>
 8003ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	f043 0202 	orr.w	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_UART_IRQHandler+0xf6>
 8003ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	f043 0204 	orr.w	r2, r3, #4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d011      	beq.n	8003b1e <HAL_UART_IRQHandler+0x126>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f043 0208 	orr.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 81f2 	beq.w	8003f0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_UART_IRQHandler+0x14e>
 8003b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fb77 	bl	8004234 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <HAL_UART_IRQHandler+0x17a>
 8003b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d04f      	beq.n	8003c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa81 	bl	800407a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d041      	beq.n	8003c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3314      	adds	r3, #20
 8003b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1d9      	bne.n	8003b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d013      	beq.n	8003c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bde:	4a7e      	ldr	r2, [pc, #504]	@ (8003dd8 <HAL_UART_IRQHandler+0x3e0>)
 8003be0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd ffb8 	bl	8001b5c <HAL_DMA_Abort_IT>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	e00e      	b.n	8003c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f993 	bl	8003f2e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e00a      	b.n	8003c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f98f 	bl	8003f2e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c10:	e006      	b.n	8003c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f98b 	bl	8003f2e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c1e:	e175      	b.n	8003f0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	bf00      	nop
    return;
 8003c22:	e173      	b.n	8003f0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	f040 814f 	bne.w	8003ecc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8148 	beq.w	8003ecc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8141 	beq.w	8003ecc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80b6 	beq.w	8003ddc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8145 	beq.w	8003f10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	f080 813e 	bcs.w	8003f10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	f000 8088 	beq.w	8003db8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cd4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ce0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1d9      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d18:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d20:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e1      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d54:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d56:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d5a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e3      	bne.n	8003d30 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d88:	f023 0310 	bic.w	r3, r3, #16
 8003d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d9c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003da0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e3      	bne.n	8003d76 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd fe97 	bl	8001ae6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f8b6 	bl	8003f40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dd4:	e09c      	b.n	8003f10 <HAL_UART_IRQHandler+0x518>
 8003dd6:	bf00      	nop
 8003dd8:	0800413f 	.word	0x0800413f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 808e 	beq.w	8003f14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8089 	beq.w	8003f14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e26:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e3      	bne.n	8003e02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	623b      	str	r3, [r7, #32]
   return(result);
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e3      	bne.n	8003e3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ea4:	61fa      	str	r2, [r7, #28]
 8003ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e3      	bne.n	8003e80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f83b 	bl	8003f40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eca:	e023      	b.n	8003f14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <HAL_UART_IRQHandler+0x4f4>
 8003ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f93e 	bl	8004166 <UART_Transmit_IT>
    return;
 8003eea:	e014      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <HAL_UART_IRQHandler+0x51e>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f97d 	bl	8004204 <UART_EndTransmit_IT>
    return;
 8003f0a:	e004      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f0c:	bf00      	nop
 8003f0e:	e002      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f14:	bf00      	nop
  }
}
 8003f16:	37e8      	adds	r7, #232	@ 0xe8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f66:	e03b      	b.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f6e:	d037      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f70:	f7fd f880 	bl	8001074 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e03a      	b.n	8004000 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d023      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b80      	cmp	r3, #128	@ 0x80
 8003f9c:	d020      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d01d      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d116      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f856 	bl	800407a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e00f      	b.n	8004000 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d0b4      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	88fa      	ldrh	r2, [r7, #6]
 8004026:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2222      	movs	r2, #34	@ 0x22
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800404c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0220 	orr.w	r2, r2, #32
 800406c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407a:	b480      	push	{r7}
 800407c:	b095      	sub	sp, #84	@ 0x54
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80040a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e5      	bne.n	8004082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3314      	adds	r3, #20
 80040bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3314      	adds	r3, #20
 80040d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d119      	bne.n	8004126 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	60bb      	str	r3, [r7, #8]
   return(result);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f023 0310 	bic.w	r3, r3, #16
 8004108:	647b      	str	r3, [r7, #68]	@ 0x44
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004112:	61ba      	str	r2, [r7, #24]
 8004114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6979      	ldr	r1, [r7, #20]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	613b      	str	r3, [r7, #16]
   return(result);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e5      	bne.n	80040f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004134:	bf00      	nop
 8004136:	3754      	adds	r7, #84	@ 0x54
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fee8 	bl	8003f2e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b21      	cmp	r3, #33	@ 0x21
 8004178:	d13e      	bne.n	80041f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004182:	d114      	bne.n	80041ae <UART_Transmit_IT+0x48>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d110      	bne.n	80041ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]
 80041ac:	e008      	b.n	80041c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6211      	str	r1, [r2, #32]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4619      	mov	r1, r3
 80041ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10f      	bne.n	80041f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800421a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fe79 	bl	8003f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	@ 0x30
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b22      	cmp	r3, #34	@ 0x22
 8004246:	f040 80ae 	bne.w	80043a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004252:	d117      	bne.n	8004284 <UART_Receive_IT+0x50>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d113      	bne.n	8004284 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004272:	b29a      	uxth	r2, r3
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	629a      	str	r2, [r3, #40]	@ 0x28
 8004282:	e026      	b.n	80042d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004296:	d007      	beq.n	80042a8 <UART_Receive_IT+0x74>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <UART_Receive_IT+0x82>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	e008      	b.n	80042c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4619      	mov	r1, r3
 80042e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d15d      	bne.n	80043a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0220 	bic.w	r2, r2, #32
 80042f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	2b01      	cmp	r3, #1
 800432a:	d135      	bne.n	8004398 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	613b      	str	r3, [r7, #16]
   return(result);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f023 0310 	bic.w	r3, r3, #16
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004352:	623a      	str	r2, [r7, #32]
 8004354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	69f9      	ldr	r1, [r7, #28]
 8004358:	6a3a      	ldr	r2, [r7, #32]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d10a      	bne.n	800438a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fdd5 	bl	8003f40 <HAL_UARTEx_RxEventCallback>
 8004396:	e002      	b.n	800439e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fc f8b9 	bl	8000510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e002      	b.n	80043a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3730      	adds	r7, #48	@ 0x30
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043ea:	f023 030c 	bic.w	r3, r3, #12
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	430b      	orrs	r3, r1
 80043f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2c      	ldr	r2, [pc, #176]	@ (80044c4 <UART_SetConfig+0x114>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fe f9b4 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	e002      	b.n	8004426 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004420:	f7fe f99c 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8004424:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009a      	lsls	r2, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <UART_SetConfig+0x118>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	0119      	lsls	r1, r3, #4
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009a      	lsls	r2, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	fbb2 f2f3 	udiv	r2, r2, r3
 800445c:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <UART_SetConfig+0x118>)
 800445e:	fba3 0302 	umull	r0, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2064      	movs	r0, #100	@ 0x64
 8004466:	fb00 f303 	mul.w	r3, r0, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	3332      	adds	r3, #50	@ 0x32
 8004470:	4a15      	ldr	r2, [pc, #84]	@ (80044c8 <UART_SetConfig+0x118>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800447c:	4419      	add	r1, r3
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	fbb2 f2f3 	udiv	r2, r2, r3
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <UART_SetConfig+0x118>)
 8004496:	fba3 0302 	umull	r0, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2064      	movs	r0, #100	@ 0x64
 800449e:	fb00 f303 	mul.w	r3, r0, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	3332      	adds	r3, #50	@ 0x32
 80044a8:	4a07      	ldr	r2, [pc, #28]	@ (80044c8 <UART_SetConfig+0x118>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	440a      	add	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40013800 	.word	0x40013800
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <atoi>:
 80044cc:	220a      	movs	r2, #10
 80044ce:	2100      	movs	r1, #0
 80044d0:	f000 b87a 	b.w	80045c8 <strtol>

080044d4 <_strtol_l.isra.0>:
 80044d4:	2b24      	cmp	r3, #36	@ 0x24
 80044d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044da:	4686      	mov	lr, r0
 80044dc:	4690      	mov	r8, r2
 80044de:	d801      	bhi.n	80044e4 <_strtol_l.isra.0+0x10>
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <_strtol_l.isra.0+0x1e>
 80044e4:	f000 f882 	bl	80045ec <__errno>
 80044e8:	2316      	movs	r3, #22
 80044ea:	6003      	str	r3, [r0, #0]
 80044ec:	2000      	movs	r0, #0
 80044ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f2:	460d      	mov	r5, r1
 80044f4:	4833      	ldr	r0, [pc, #204]	@ (80045c4 <_strtol_l.isra.0+0xf0>)
 80044f6:	462a      	mov	r2, r5
 80044f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044fc:	5d06      	ldrb	r6, [r0, r4]
 80044fe:	f016 0608 	ands.w	r6, r6, #8
 8004502:	d1f8      	bne.n	80044f6 <_strtol_l.isra.0+0x22>
 8004504:	2c2d      	cmp	r4, #45	@ 0x2d
 8004506:	d110      	bne.n	800452a <_strtol_l.isra.0+0x56>
 8004508:	2601      	movs	r6, #1
 800450a:	782c      	ldrb	r4, [r5, #0]
 800450c:	1c95      	adds	r5, r2, #2
 800450e:	f033 0210 	bics.w	r2, r3, #16
 8004512:	d115      	bne.n	8004540 <_strtol_l.isra.0+0x6c>
 8004514:	2c30      	cmp	r4, #48	@ 0x30
 8004516:	d10d      	bne.n	8004534 <_strtol_l.isra.0+0x60>
 8004518:	782a      	ldrb	r2, [r5, #0]
 800451a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800451e:	2a58      	cmp	r2, #88	@ 0x58
 8004520:	d108      	bne.n	8004534 <_strtol_l.isra.0+0x60>
 8004522:	786c      	ldrb	r4, [r5, #1]
 8004524:	3502      	adds	r5, #2
 8004526:	2310      	movs	r3, #16
 8004528:	e00a      	b.n	8004540 <_strtol_l.isra.0+0x6c>
 800452a:	2c2b      	cmp	r4, #43	@ 0x2b
 800452c:	bf04      	itt	eq
 800452e:	782c      	ldrbeq	r4, [r5, #0]
 8004530:	1c95      	addeq	r5, r2, #2
 8004532:	e7ec      	b.n	800450e <_strtol_l.isra.0+0x3a>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f6      	bne.n	8004526 <_strtol_l.isra.0+0x52>
 8004538:	2c30      	cmp	r4, #48	@ 0x30
 800453a:	bf14      	ite	ne
 800453c:	230a      	movne	r3, #10
 800453e:	2308      	moveq	r3, #8
 8004540:	2200      	movs	r2, #0
 8004542:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004546:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800454a:	fbbc f9f3 	udiv	r9, ip, r3
 800454e:	4610      	mov	r0, r2
 8004550:	fb03 ca19 	mls	sl, r3, r9, ip
 8004554:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004558:	2f09      	cmp	r7, #9
 800455a:	d80f      	bhi.n	800457c <_strtol_l.isra.0+0xa8>
 800455c:	463c      	mov	r4, r7
 800455e:	42a3      	cmp	r3, r4
 8004560:	dd1b      	ble.n	800459a <_strtol_l.isra.0+0xc6>
 8004562:	1c57      	adds	r7, r2, #1
 8004564:	d007      	beq.n	8004576 <_strtol_l.isra.0+0xa2>
 8004566:	4581      	cmp	r9, r0
 8004568:	d314      	bcc.n	8004594 <_strtol_l.isra.0+0xc0>
 800456a:	d101      	bne.n	8004570 <_strtol_l.isra.0+0x9c>
 800456c:	45a2      	cmp	sl, r4
 800456e:	db11      	blt.n	8004594 <_strtol_l.isra.0+0xc0>
 8004570:	2201      	movs	r2, #1
 8004572:	fb00 4003 	mla	r0, r0, r3, r4
 8004576:	f815 4b01 	ldrb.w	r4, [r5], #1
 800457a:	e7eb      	b.n	8004554 <_strtol_l.isra.0+0x80>
 800457c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004580:	2f19      	cmp	r7, #25
 8004582:	d801      	bhi.n	8004588 <_strtol_l.isra.0+0xb4>
 8004584:	3c37      	subs	r4, #55	@ 0x37
 8004586:	e7ea      	b.n	800455e <_strtol_l.isra.0+0x8a>
 8004588:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800458c:	2f19      	cmp	r7, #25
 800458e:	d804      	bhi.n	800459a <_strtol_l.isra.0+0xc6>
 8004590:	3c57      	subs	r4, #87	@ 0x57
 8004592:	e7e4      	b.n	800455e <_strtol_l.isra.0+0x8a>
 8004594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004598:	e7ed      	b.n	8004576 <_strtol_l.isra.0+0xa2>
 800459a:	1c53      	adds	r3, r2, #1
 800459c:	d108      	bne.n	80045b0 <_strtol_l.isra.0+0xdc>
 800459e:	2322      	movs	r3, #34	@ 0x22
 80045a0:	4660      	mov	r0, ip
 80045a2:	f8ce 3000 	str.w	r3, [lr]
 80045a6:	f1b8 0f00 	cmp.w	r8, #0
 80045aa:	d0a0      	beq.n	80044ee <_strtol_l.isra.0+0x1a>
 80045ac:	1e69      	subs	r1, r5, #1
 80045ae:	e006      	b.n	80045be <_strtol_l.isra.0+0xea>
 80045b0:	b106      	cbz	r6, 80045b4 <_strtol_l.isra.0+0xe0>
 80045b2:	4240      	negs	r0, r0
 80045b4:	f1b8 0f00 	cmp.w	r8, #0
 80045b8:	d099      	beq.n	80044ee <_strtol_l.isra.0+0x1a>
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	d1f6      	bne.n	80045ac <_strtol_l.isra.0+0xd8>
 80045be:	f8c8 1000 	str.w	r1, [r8]
 80045c2:	e794      	b.n	80044ee <_strtol_l.isra.0+0x1a>
 80045c4:	080046b3 	.word	0x080046b3

080045c8 <strtol>:
 80045c8:	4613      	mov	r3, r2
 80045ca:	460a      	mov	r2, r1
 80045cc:	4601      	mov	r1, r0
 80045ce:	4802      	ldr	r0, [pc, #8]	@ (80045d8 <strtol+0x10>)
 80045d0:	6800      	ldr	r0, [r0, #0]
 80045d2:	f7ff bf7f 	b.w	80044d4 <_strtol_l.isra.0>
 80045d6:	bf00      	nop
 80045d8:	2000000c 	.word	0x2000000c

080045dc <memset>:
 80045dc:	4603      	mov	r3, r0
 80045de:	4402      	add	r2, r0
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d100      	bne.n	80045e6 <memset+0xa>
 80045e4:	4770      	bx	lr
 80045e6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ea:	e7f9      	b.n	80045e0 <memset+0x4>

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	@ (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000000c 	.word	0x2000000c

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	2600      	movs	r6, #0
 80045fc:	4d0c      	ldr	r5, [pc, #48]	@ (8004630 <__libc_init_array+0x38>)
 80045fe:	4c0d      	ldr	r4, [pc, #52]	@ (8004634 <__libc_init_array+0x3c>)
 8004600:	1b64      	subs	r4, r4, r5
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	42a6      	cmp	r6, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	f000 f81a 	bl	8004640 <_init>
 800460c:	2600      	movs	r6, #0
 800460e:	4d0a      	ldr	r5, [pc, #40]	@ (8004638 <__libc_init_array+0x40>)
 8004610:	4c0a      	ldr	r4, [pc, #40]	@ (800463c <__libc_init_array+0x44>)
 8004612:	1b64      	subs	r4, r4, r5
 8004614:	10a4      	asrs	r4, r4, #2
 8004616:	42a6      	cmp	r6, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004620:	4798      	blx	r3
 8004622:	3601      	adds	r6, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f855 3b04 	ldr.w	r3, [r5], #4
 800462a:	4798      	blx	r3
 800462c:	3601      	adds	r6, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	080047b4 	.word	0x080047b4
 8004634:	080047b4 	.word	0x080047b4
 8004638:	080047b4 	.word	0x080047b4
 800463c:	080047b8 	.word	0x080047b8

08004640 <_init>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	bf00      	nop
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr

0800464c <_fini>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr
