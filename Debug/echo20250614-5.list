
echo20250614-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bdc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005ce8  08005ce8  00006ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef8  08005ef8  000070b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ef8  08005ef8  00006ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f00  08005f00  000070b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f00  08005f00  00006f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f04  08005f04  00006f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08005f08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200000b0  08005fb8  000070b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005fb8  000073d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eea2  00000000  00000000  000070d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ff  00000000  00000000  00015f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00018480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd1  00000000  00000000  00019390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019753  00000000  00000000  00019f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107ce  00000000  00000000  000336b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009199e  00000000  00000000  00043e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5820  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a8  00000000  00000000  000d5864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000da00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005cd0 	.word	0x08005cd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08005cd0 	.word	0x08005cd0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2uiz>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	d20e      	bcs.n	8000502 <__aeabi_f2uiz+0x22>
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30b      	bcc.n	8000502 <__aeabi_f2uiz+0x22>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d409      	bmi.n	8000508 <__aeabi_f2uiz+0x28>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr
 8000508:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800050c:	d101      	bne.n	8000512 <__aeabi_f2uiz+0x32>
 800050e:	0242      	lsls	r2, r0, #9
 8000510:	d102      	bne.n	8000518 <__aeabi_f2uiz+0x38>
 8000512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000516:	4770      	bx	lr
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//printf로 uart 출력
int __io_putchar(int ch) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 8000528:	1d39      	adds	r1, r7, #4
 800052a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052e:	2201      	movs	r2, #1
 8000530:	480a      	ldr	r0, [pc, #40]	@ (800055c <__io_putchar+0x3c>)
 8000532:	f003 fd97 	bl	8004064 <HAL_UART_Transmit>
    if (ch == '\n') {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0a      	cmp	r3, #10
 800053a:	d109      	bne.n	8000550 <__io_putchar+0x30>
        uint8_t cr = '\r';
 800053c:	230d      	movs	r3, #13
 800053e:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &cr, 1, 1000);
 8000540:	f107 010f 	add.w	r1, r7, #15
 8000544:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000548:	2201      	movs	r2, #1
 800054a:	4804      	ldr	r0, [pc, #16]	@ (800055c <__io_putchar+0x3c>)
 800054c:	f003 fd8a 	bl	8004064 <HAL_UART_Transmit>
    }
    return ch;
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000021c 	.word	0x2000021c

08000560 <HAL_UART_RxCpltCallback>:
//        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
//    }
//}
// ------------------- UART 콜백 -------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1a      	ldr	r2, [pc, #104]	@ (80005d8 <HAL_UART_RxCpltCallback+0x78>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d12d      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x6e>
    {

        if (rx_data == '\n' || rx_data == '\r')
 8000572:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <HAL_UART_RxCpltCallback+0x7c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d003      	beq.n	8000582 <HAL_UART_RxCpltCallback+0x22>
 800057a:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <HAL_UART_RxCpltCallback+0x7c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b0d      	cmp	r3, #13
 8000580:	d111      	bne.n	80005a6 <HAL_UART_RxCpltCallback+0x46>
        {
            rx_buffer[rx_index] = '\0';
 8000582:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <HAL_UART_RxCpltCallback+0x80>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <HAL_UART_RxCpltCallback+0x84>)
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]

            parse_command((char*)rx_buffer);   // 파싱 전담 함수 호출
 800058e:	4815      	ldr	r0, [pc, #84]	@ (80005e4 <HAL_UART_RxCpltCallback+0x84>)
 8000590:	f000 f82c 	bl	80005ec <parse_command>
            rx_index = 0;
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <HAL_UART_RxCpltCallback+0x80>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, sizeof(rx_buffer));
 800059a:	2214      	movs	r2, #20
 800059c:	2100      	movs	r1, #0
 800059e:	4811      	ldr	r0, [pc, #68]	@ (80005e4 <HAL_UART_RxCpltCallback+0x84>)
 80005a0:	f004 fd34 	bl	800500c <memset>
 80005a4:	e00e      	b.n	80005c4 <HAL_UART_RxCpltCallback+0x64>
        }
        else
        {
            if (rx_index < sizeof(rx_buffer) - 1)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <HAL_UART_RxCpltCallback+0x80>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b12      	cmp	r3, #18
 80005ac:	d80a      	bhi.n	80005c4 <HAL_UART_RxCpltCallback+0x64>
                rx_buffer[rx_index++] = rx_data;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <HAL_UART_RxCpltCallback+0x80>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	b2d1      	uxtb	r1, r2
 80005b6:	4a0a      	ldr	r2, [pc, #40]	@ (80005e0 <HAL_UART_RxCpltCallback+0x80>)
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <HAL_UART_RxCpltCallback+0x7c>)
 80005be:	7819      	ldrb	r1, [r3, #0]
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <HAL_UART_RxCpltCallback+0x84>)
 80005c2:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	4905      	ldr	r1, [pc, #20]	@ (80005dc <HAL_UART_RxCpltCallback+0x7c>)
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <HAL_UART_RxCpltCallback+0x88>)
 80005ca:	f003 fdd6 	bl	800417a <HAL_UART_Receive_IT>
    }
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40004400 	.word	0x40004400
 80005dc:	20000279 	.word	0x20000279
 80005e0:	20000278 	.word	0x20000278
 80005e4:	20000264 	.word	0x20000264
 80005e8:	2000021c 	.word	0x2000021c

080005ec <parse_command>:
// ------------------- 명령 파싱 함수 -------------------
void parse_command(char *cmd)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    if (strlen(cmd) == 1)
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fda9 	bl	800014c <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d11f      	bne.n	8000640 <parse_command+0x54>
    {
        if (cmd[0] == 's')
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b73      	cmp	r3, #115	@ 0x73
 8000606:	d105      	bne.n	8000614 <parse_command+0x28>
        {
            Stop_Motor();
 8000608:	f000 f926 	bl	8000858 <Stop_Motor>
            printf("Stop command received\n");
 800060c:	482a      	ldr	r0, [pc, #168]	@ (80006b8 <parse_command+0xcc>)
 800060e:	f004 fcf5 	bl	8004ffc <puts>
 8000612:	e00e      	b.n	8000632 <parse_command+0x46>
        }
        else if (cmd[0] == 'e')
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b65      	cmp	r3, #101	@ 0x65
 800061a:	d106      	bne.n	800062a <parse_command+0x3e>
        {
            set_brake(true);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 f92b 	bl	8000878 <set_brake>
            printf("Brake command received\n");
 8000622:	4826      	ldr	r0, [pc, #152]	@ (80006bc <parse_command+0xd0>)
 8000624:	f004 fcea 	bl	8004ffc <puts>
 8000628:	e003      	b.n	8000632 <parse_command+0x46>
        }
        else
        {
            printf("Unknown single command: %s\n", cmd);
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	4824      	ldr	r0, [pc, #144]	@ (80006c0 <parse_command+0xd4>)
 800062e:	f004 fc7d 	bl	8004f2c <iprintf>
        }
        Encoder_Reset(&encoder1);
 8000632:	4824      	ldr	r0, [pc, #144]	@ (80006c4 <parse_command+0xd8>)
 8000634:	f000 f9cf 	bl	80009d6 <Encoder_Reset>
        Encoder_Reset(&encoder4);
 8000638:	4823      	ldr	r0, [pc, #140]	@ (80006c8 <parse_command+0xdc>)
 800063a:	f000 f9cc 	bl	80009d6 <Encoder_Reset>
    }
    else
    {
        printf("Unknown command format: %s\n", cmd);
    }
}
 800063e:	e036      	b.n	80006ae <parse_command+0xc2>
    else if (strlen(cmd) >= 5)
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff fd83 	bl	800014c <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	2b04      	cmp	r3, #4
 800064a:	d92c      	bls.n	80006a6 <parse_command+0xba>
        char motor = cmd[0];   // 'l' or 'r'
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	73fb      	strb	r3, [r7, #15]
        char dir   = cmd[2];   // 'f' or 'b'
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	73bb      	strb	r3, [r7, #14]
        int  speed = atoi(&cmd[4]);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3304      	adds	r3, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f004 fb1b 	bl	8004c98 <atoi>
 8000662:	60b8      	str	r0, [r7, #8]
        if ((motor == 'l' || motor == 'r') &&
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b6c      	cmp	r3, #108	@ 0x6c
 8000668:	d002      	beq.n	8000670 <parse_command+0x84>
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	2b72      	cmp	r3, #114	@ 0x72
 800066e:	d115      	bne.n	800069c <parse_command+0xb0>
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	2b66      	cmp	r3, #102	@ 0x66
 8000674:	d002      	beq.n	800067c <parse_command+0x90>
            (dir == 'f' || dir == 'b') &&
 8000676:	7bbb      	ldrb	r3, [r7, #14]
 8000678:	2b62      	cmp	r3, #98	@ 0x62
 800067a:	d10f      	bne.n	800069c <parse_command+0xb0>
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0c      	blt.n	800069c <parse_command+0xb0>
            (speed >= 0 && speed <= 9))
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	2b09      	cmp	r3, #9
 8000686:	dc09      	bgt.n	800069c <parse_command+0xb0>
            set_brake(false);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f8f5 	bl	8000878 <set_brake>
            execute_command(motor, dir, speed);
 800068e:	7bb9      	ldrb	r1, [r7, #14]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f81d 	bl	80006d4 <execute_command>
}
 800069a:	e008      	b.n	80006ae <parse_command+0xc2>
            printf("Invalid command: %s\n", cmd);
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	480b      	ldr	r0, [pc, #44]	@ (80006cc <parse_command+0xe0>)
 80006a0:	f004 fc44 	bl	8004f2c <iprintf>
}
 80006a4:	e003      	b.n	80006ae <parse_command+0xc2>
        printf("Unknown command format: %s\n", cmd);
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <parse_command+0xe4>)
 80006aa:	f004 fc3f 	bl	8004f2c <iprintf>
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	08005ce8 	.word	0x08005ce8
 80006bc:	08005d00 	.word	0x08005d00
 80006c0:	08005d18 	.word	0x08005d18
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000008 	.word	0x20000008
 80006cc:	08005d34 	.word	0x08005d34
 80006d0:	08005d4c 	.word	0x08005d4c

080006d4 <execute_command>:
// ------------------- 명령 실행 함수 -------------------
void execute_command(char motor, char dir, int speed)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af02      	add	r7, sp, #8
 80006da:	4603      	mov	r3, r0
 80006dc:	603a      	str	r2, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	460b      	mov	r3, r1
 80006e2:	71bb      	strb	r3, [r7, #6]
    uint16_t duty = speed * PWM_DUTY_SCALE;
 80006e4:	6838      	ldr	r0, [r7, #0]
 80006e6:	f7ff fea7 	bl	8000438 <__aeabi_i2f>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4925      	ldr	r1, [pc, #148]	@ (8000784 <execute_command+0xb0>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd34 	bl	800015c <__aeabi_fmul>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fef2 	bl	80004e0 <__aeabi_f2uiz>
 80006fc:	4603      	mov	r3, r0
 80006fe:	81fb      	strh	r3, [r7, #14]

    if (motor == 'l')  // Left Motor
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b6c      	cmp	r3, #108	@ 0x6c
 8000704:	d117      	bne.n	8000736 <execute_command+0x62>
    {
        left_motor.target = duty;
 8000706:	4a20      	ldr	r2, [pc, #128]	@ (8000788 <execute_command+0xb4>)
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	8113      	strh	r3, [r2, #8]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	2b66      	cmp	r3, #102	@ 0x66
 8000710:	bf14      	ite	ne
 8000712:	2301      	movne	r3, #1
 8000714:	2300      	moveq	r3, #0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800071e:	481b      	ldr	r0, [pc, #108]	@ (800078c <execute_command+0xb8>)
 8000720:	f001 fed6 	bl	80024d0 <HAL_GPIO_WritePin>
                          (dir == 'f') ? GPIO_PIN_RESET : GPIO_PIN_SET);
        printf("%ld", Encoder_GetPosition(&encoder1));
 8000724:	481a      	ldr	r0, [pc, #104]	@ (8000790 <execute_command+0xbc>)
 8000726:	f000 f949 	bl	80009bc <Encoder_GetPosition>
 800072a:	4603      	mov	r3, r0
 800072c:	4619      	mov	r1, r3
 800072e:	4819      	ldr	r0, [pc, #100]	@ (8000794 <execute_command+0xc0>)
 8000730:	f004 fbfc 	bl	8004f2c <iprintf>
 8000734:	e019      	b.n	800076a <execute_command+0x96>
    }
    else if (motor == 'r') // Right Motor
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b72      	cmp	r3, #114	@ 0x72
 800073a:	d116      	bne.n	800076a <execute_command+0x96>
    {
        right_motor.target = duty;
 800073c:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <execute_command+0xc4>)
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	8113      	strh	r3, [r2, #8]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b66      	cmp	r3, #102	@ 0x66
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <execute_command+0xb8>)
 8000756:	f001 febb 	bl	80024d0 <HAL_GPIO_WritePin>
                          (dir == 'f') ? GPIO_PIN_RESET : GPIO_PIN_SET);
        printf("%ld", Encoder_GetPosition(&encoder4));
 800075a:	4810      	ldr	r0, [pc, #64]	@ (800079c <execute_command+0xc8>)
 800075c:	f000 f92e 	bl	80009bc <Encoder_GetPosition>
 8000760:	4603      	mov	r3, r0
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <execute_command+0xc0>)
 8000766:	f004 fbe1 	bl	8004f2c <iprintf>
    }

    printf("CMD -> Motor:%c Dir:%c Speed:%d (duty=%d)\n",
 800076a:	79f9      	ldrb	r1, [r7, #7]
 800076c:	79ba      	ldrb	r2, [r7, #6]
 800076e:	89fb      	ldrh	r3, [r7, #14]
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <execute_command+0xcc>)
 8000776:	f004 fbd9 	bl	8004f2c <iprintf>
           motor, dir, speed, duty);
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	409ccccd 	.word	0x409ccccd
 8000788:	20000010 	.word	0x20000010
 800078c:	40010c00 	.word	0x40010c00
 8000790:	20000000 	.word	0x20000000
 8000794:	08005d68 	.word	0x08005d68
 8000798:	2000002c 	.word	0x2000002c
 800079c:	20000008 	.word	0x20000008
 80007a0:	08005d6c 	.word	0x08005d6c

080007a4 <Transform_PWM>:


//점진적 모터 속도 제어
void Transform_PWM(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	Motor_UpdatePWM(&left_motor);
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <Transform_PWM+0x14>)
 80007aa:	f000 f809 	bl	80007c0 <Motor_UpdatePWM>
	Motor_UpdatePWM(&right_motor);
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <Transform_PWM+0x18>)
 80007b0:	f000 f806 	bl	80007c0 <Motor_UpdatePWM>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000010 	.word	0x20000010
 80007bc:	2000002c 	.word	0x2000002c

080007c0 <Motor_UpdatePWM>:

void Motor_UpdatePWM(Motor_t *motor) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    if (motor->current < motor->target) motor->current++;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	895a      	ldrh	r2, [r3, #10]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	891b      	ldrh	r3, [r3, #8]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d206      	bcs.n	80007e2 <Motor_UpdatePWM+0x22>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	895b      	ldrh	r3, [r3, #10]
 80007d8:	3301      	adds	r3, #1
 80007da:	b29a      	uxth	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	815a      	strh	r2, [r3, #10]
 80007e0:	e00b      	b.n	80007fa <Motor_UpdatePWM+0x3a>
    else if (motor->current > motor->target) motor->current--;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	895a      	ldrh	r2, [r3, #10]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	891b      	ldrh	r3, [r3, #8]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d905      	bls.n	80007fa <Motor_UpdatePWM+0x3a>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	895b      	ldrh	r3, [r3, #10]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	815a      	strh	r2, [r3, #10]
    __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->current);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d106      	bne.n	8000810 <Motor_UpdatePWM+0x50>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	895a      	ldrh	r2, [r3, #10]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800080e:	e01e      	b.n	800084e <Motor_UpdatePWM+0x8e>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->current);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b04      	cmp	r3, #4
 8000816:	d107      	bne.n	8000828 <Motor_UpdatePWM+0x68>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8959      	ldrh	r1, [r3, #10]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	460b      	mov	r3, r1
 8000824:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000826:	e012      	b.n	800084e <Motor_UpdatePWM+0x8e>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->current);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b08      	cmp	r3, #8
 800082e:	d107      	bne.n	8000840 <Motor_UpdatePWM+0x80>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	8959      	ldrh	r1, [r3, #10]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	460b      	mov	r3, r1
 800083c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800083e:	e006      	b.n	800084e <Motor_UpdatePWM+0x8e>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->current);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	8959      	ldrh	r1, [r3, #10]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	460b      	mov	r3, r1
 800084c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <Stop_Motor>:

//점진적 모터 정지
void Stop_Motor(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  // 양쪽 모터의 PWM을 0으로 설정하여 정지
	left_motor.target  = 0;
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <Stop_Motor+0x18>)
 800085e:	2200      	movs	r2, #0
 8000860:	811a      	strh	r2, [r3, #8]
	right_motor.target = 0;
 8000862:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <Stop_Motor+0x1c>)
 8000864:	2200      	movs	r2, #0
 8000866:	811a      	strh	r2, [r3, #8]

  // 필요 시 후속 처리 (예: 방향핀 LOW, 브레이크)
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000010 	.word	0x20000010
 8000874:	2000002c 	.word	0x2000002c

08000878 <set_brake>:
//모터드라이버 브레이크
void set_brake(bool on) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
    if(on) {
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d016      	beq.n	80008b6 <set_brake+0x3e>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2102      	movs	r1, #2
 800088c:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <set_brake+0x5c>)
 800088e:	f001 fe1f 	bl	80024d0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2104      	movs	r1, #4
 8000896:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <set_brake+0x5c>)
 8000898:	f001 fe1a 	bl	80024d0 <HAL_GPIO_WritePin>
    	left_motor.target = 0;
 800089c:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <set_brake+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	811a      	strh	r2, [r3, #8]
    	right_motor.target = 0;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <set_brake+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	811a      	strh	r2, [r3, #8]
    	left_motor.current = 0;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <set_brake+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	815a      	strh	r2, [r3, #10]
    	right_motor.current = 0;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <set_brake+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	815a      	strh	r2, [r3, #10]
    }
    else {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
    }
}
 80008b4:	e009      	b.n	80008ca <set_brake+0x52>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2102      	movs	r1, #2
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <set_brake+0x5c>)
 80008bc:	f001 fe08 	bl	80024d0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2104      	movs	r1, #4
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <set_brake+0x5c>)
 80008c6:	f001 fe03 	bl	80024d0 <HAL_GPIO_WritePin>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	20000010 	.word	0x20000010
 80008dc:	2000002c 	.word	0x2000002c

080008e0 <HAL_ADC_ConvCpltCallback>:

//적외선 센서 감지 인터럽트
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_ADC_ConvCpltCallback+0x30>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d109      	bne.n	8000906 <HAL_ADC_ConvCpltCallback+0x26>
    {
        uint32_t adc_value = HAL_ADC_GetValue(hadc);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f001 f838 	bl	8001968 <HAL_ADC_GetValue>
 80008f8:	60f8      	str	r0, [r7, #12]
        if(adc_value < IR_THRESHOLD){
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000900:	d201      	bcs.n	8000906 <HAL_ADC_ConvCpltCallback+0x26>
        	Stop_Motor();
 8000902:	f7ff ffa9 	bl	8000858 <Stop_Motor>
        }
    }
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40012400 	.word	0x40012400

08000914 <TIM4_IRQHandler>:

// TIM4,1 인터럽트 핸들러
void TIM4_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim4);
 8000918:	4802      	ldr	r0, [pc, #8]	@ (8000924 <TIM4_IRQHandler+0x10>)
 800091a:	f002 fd95 	bl	8003448 <HAL_TIM_IRQHandler>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001d4 	.word	0x200001d4

08000928 <HAL_TIM_PeriodElapsedCallback>:
    HAL_TIM_IRQHandler(&htim1);
}

// HAL 콜백 함수 (Update Event 등 처리)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)  // TIM3 = 1ms 주기 타이머
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d102      	bne.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x18>
		{
	        Transform_PWM();   // 모터 점진 제어
 800093a:	f7ff ff33 	bl	80007a4 <Transform_PWM>
 800093e:	e030      	b.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x7a>
	}else if(htim->Instance == TIM1 || htim->Instance == TIM4){
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d004      	beq.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a18      	ldr	r2, [pc, #96]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d126      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x7a>
    volatile int32_t *encoder_total = NULL;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]

    if(htim->Instance == TIM1) encoder_total = &encoder1.total;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d102      	bne.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x40>
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e006      	b.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x4e>
    else if(htim->Instance == TIM4) encoder_total = &encoder4.total;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d116      	bne.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000974:	60fb      	str	r3, [r7, #12]
    else return;

    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) *encoder_total -= 0x10000;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	2b10      	cmp	r3, #16
 8000982:	d106      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	e007      	b.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x7a>
    else *encoder_total += 0x10000;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e000      	b.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x7a>
    else return;
 80009a0:	bf00      	nop
	}
}
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40000400 	.word	0x40000400
 80009ac:	40012c00 	.word	0x40012c00
 80009b0:	40000800 	.word	0x40000800
 80009b4:	20000004 	.word	0x20000004
 80009b8:	2000000c 	.word	0x2000000c

080009bc <Encoder_GetPosition>:

//엔코더 값 가져오기
int32_t Encoder_GetPosition(Encoder_t *encoder)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    return (int32_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <Encoder_Reset>:

// 카운터 값 리셋
void Encoder_Reset(Encoder_t *encoder)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(encoder->htim, 0);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	@ 0x24
    encoder->total = 0;  // 누적값도 같이 리셋해주면 안전함
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fdc4 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f85c 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f000 fa7a 	bl	8000efc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a08:	f000 fa4e 	bl	8000ea8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a0c:	f000 f948 	bl	8000ca0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000a10:	f000 f8b0 	bl	8000b74 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a14:	f000 f9a6 	bl	8000d64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a18:	f000 f9f2 	bl	8000e00 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000a1c:	f000 f8e8 	bl	8000bf0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // 왼쪽, 오른쪽 모터 PWM 채널 시작
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Left Motor PWM
 8000a20:	2100      	movs	r1, #0
 8000a22:	481d      	ldr	r0, [pc, #116]	@ (8000a98 <main+0xa0>)
 8000a24:	f002 fb3e 	bl	80030a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Right Motor PWM
 8000a28:	2104      	movs	r1, #4
 8000a2a:	481b      	ldr	r0, [pc, #108]	@ (8000a98 <main+0xa0>)
 8000a2c:	f002 fb3a 	bl	80030a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000a30:	213c      	movs	r1, #60	@ 0x3c
 8000a32:	481a      	ldr	r0, [pc, #104]	@ (8000a9c <main+0xa4>)
 8000a34:	f002 fc7a 	bl	800332c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000a38:	213c      	movs	r1, #60	@ 0x3c
 8000a3a:	4819      	ldr	r0, [pc, #100]	@ (8000aa0 <main+0xa8>)
 8000a3c:	f002 fc76 	bl	800332c <HAL_TIM_Encoder_Start>

  // UART 수신 인터럽트 시작 (1바이트씩 수신)
  HAL_UART_Receive_IT(&huart2, &rx_data, 1); // UART Receive 1 byte
 8000a40:	2201      	movs	r2, #1
 8000a42:	4918      	ldr	r1, [pc, #96]	@ (8000aa4 <main+0xac>)
 8000a44:	4818      	ldr	r0, [pc, #96]	@ (8000aa8 <main+0xb0>)
 8000a46:	f003 fb98 	bl	800417a <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <main+0xb4>)
 8000a4c:	f000 fed6 	bl	80017fc <HAL_ADC_Start_IT>
  // TIM3 시작 필요
  HAL_TIM_Base_Start(&htim3);
 8000a50:	4817      	ldr	r0, [pc, #92]	@ (8000ab0 <main+0xb8>)
 8000a52:	f002 fa8d 	bl	8002f70 <HAL_TIM_Base_Start>

  // 엔코더 입력을 위한 타이머 입력 캡처 시작

  // 초기 PWM 값을 0으로 설정
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <main+0xa0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <main+0xa0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2200      	movs	r2, #0
 8000a64:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  Transform_PWM();
 8000a66:	f7ff fe9d 	bl	80007a4 <Transform_PWM>
	  test = (int32_t)__HAL_TIM_GET_COUNTER(encoder1.htim);
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <main+0xbc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <main+0xc0>)
 8000a76:	601a      	str	r2, [r3, #0]
	  if(test >= 32700){
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <main+0xc0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f647 72bb 	movw	r2, #32699	@ 0x7fbb
 8000a80:	4293      	cmp	r3, r2
 8000a82:	ddf0      	ble.n	8000a66 <main+0x6e>
		  set_brake(true);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff fef7 	bl	8000878 <set_brake>
		  __HAL_TIM_SET_COUNTER(encoder1.htim, 0);
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <main+0xbc>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	@ 0x24
	  Transform_PWM();
 8000a94:	e7e7      	b.n	8000a66 <main+0x6e>
 8000a96:	bf00      	nop
 8000a98:	20000144 	.word	0x20000144
 8000a9c:	200000fc 	.word	0x200000fc
 8000aa0:	200001d4 	.word	0x200001d4
 8000aa4:	20000279 	.word	0x20000279
 8000aa8:	2000021c 	.word	0x2000021c
 8000aac:	200000cc 	.word	0x200000cc
 8000ab0:	2000018c 	.word	0x2000018c
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	2000027c 	.word	0x2000027c

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	@ 0x50
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac6:	2228      	movs	r2, #40	@ 0x28
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f004 fa9e 	bl	800500c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afa:	2301      	movs	r3, #1
 8000afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b08:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 fd16 	bl	8002544 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b1e:	f000 fa73 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 ff82 	bl	8002a48 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b4a:	f000 fa5d 	bl	8001008 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b56:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 f902 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b66:	f000 fa4f 	bl	8001008 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3750      	adds	r7, #80	@ 0x50
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000b86:	4a19      	ldr	r2, [pc, #100]	@ (8000bec <MX_ADC1_Init+0x78>)
 8000b88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000b9e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ba2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb0:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000bb2:	f000 fd4b 	bl	800164c <HAL_ADC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f000 fa24 	bl	8001008 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_ADC1_Init+0x74>)
 8000bd2:	f000 ff9d 	bl	8001b10 <HAL_ADC_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bdc:	f000 fa14 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000cc 	.word	0x200000cc
 8000bec:	40012400 	.word	0x40012400

08000bf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	@ 0x30
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	2224      	movs	r2, #36	@ 0x24
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 fa04 	bl	800500c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c0e:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <MX_TIM1_Init+0xac>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c64:	f002 fac0 	bl	80031e8 <HAL_TIM_Encoder_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c6e:	f000 f9cb 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <MX_TIM1_Init+0xa8>)
 8000c80:	f003 f930 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c8a:	f000 f9bd 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	@ 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000fc 	.word	0x200000fc
 8000c9c:	40012c00 	.word	0x40012c00

08000ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000cca:	4b25      	ldr	r3, [pc, #148]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000ccc:	2247      	movs	r2, #71	@ 0x47
 8000cce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000cd8:	2231      	movs	r2, #49	@ 0x31
 8000cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ce8:	481d      	ldr	r0, [pc, #116]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000cea:	f002 f98b 	bl	8003004 <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000cf4:	f000 f988 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4619      	mov	r1, r3
 8000d06:	4816      	ldr	r0, [pc, #88]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000d08:	f003 f8ec 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000d12:	f000 f979 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	@ 0x60
 8000d18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000d2e:	f002 fc7b 	bl	8003628 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000d38:	f000 f966 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000d44:	f002 fc70 	bl	8003628 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d4e:	f000 f95b 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d52:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <MX_TIM2_Init+0xc0>)
 8000d54:	f000 fa84 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	@ 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000144 	.word	0x20000144

08000d64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000d82:	4a1e      	ldr	r2, [pc, #120]	@ (8000dfc <MX_TIM3_Init+0x98>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000d94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000da6:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000da8:	f002 f892 	bl	8002ed0 <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000db2:	f000 f929 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000dc4:	f002 fcf2 	bl	80037ac <HAL_TIM_ConfigClockSource>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000dce:	f000 f91b 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <MX_TIM3_Init+0x94>)
 8000de0:	f003 f880 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000dea:	f000 f90d 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000018c 	.word	0x2000018c
 8000dfc:	40000400 	.word	0x40000400

08000e00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	@ 0x30
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2224      	movs	r2, #36	@ 0x24
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f004 f8fc 	bl	800500c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <MX_TIM4_Init+0xa0>)
 8000e1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ea4 <MX_TIM4_Init+0xa4>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <MX_TIM4_Init+0xa0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <MX_TIM4_Init+0xa0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <MX_TIM4_Init+0xa0>)
 8000e30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_TIM4_Init+0xa0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_TIM4_Init+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <MX_TIM4_Init+0xa0>)
 8000e6e:	f002 f9bb 	bl	80031e8 <HAL_TIM_Encoder_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e78:	f000 f8c6 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_TIM4_Init+0xa0>)
 8000e8a:	f003 f82b 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e94:	f000 f8b8 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	@ 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001d4 	.word	0x200001d4
 8000ea4:	40000800 	.word	0x40000800

08000ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <MX_USART2_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f003 f870 	bl	8003fc4 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 f88d 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000021c 	.word	0x2000021c
 8000ef8:	40004400 	.word	0x40004400

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a37      	ldr	r2, [pc, #220]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b35      	ldr	r3, [pc, #212]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f28:	4b32      	ldr	r3, [pc, #200]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a31      	ldr	r2, [pc, #196]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b26      	ldr	r3, [pc, #152]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a25      	ldr	r2, [pc, #148]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2130      	movs	r1, #48	@ 0x30
 8000f74:	4820      	ldr	r0, [pc, #128]	@ (8000ff8 <MX_GPIO_Init+0xfc>)
 8000f76:	f001 faab 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|moter_right_dir_Pin|moter_left_dir_Pin
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f643 4106 	movw	r1, #15366	@ 0x3c06
 8000f80:	481e      	ldr	r0, [pc, #120]	@ (8000ffc <MX_GPIO_Init+0x100>)
 8000f82:	f001 faa5 	bl	80024d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_GPIO_Init+0x104>)
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481a      	ldr	r0, [pc, #104]	@ (8001004 <MX_GPIO_Init+0x108>)
 8000f9c:	f001 f914 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000fa0:	2330      	movs	r3, #48	@ 0x30
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4810      	ldr	r0, [pc, #64]	@ (8000ff8 <MX_GPIO_Init+0xfc>)
 8000fb8:	f001 f906 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 moter_right_dir_Pin moter_left_dir_Pin
                           PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|moter_right_dir_Pin|moter_left_dir_Pin
 8000fbc:	f643 4306 	movw	r3, #15366	@ 0x3c06
 8000fc0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <MX_GPIO_Init+0x100>)
 8000fd6:	f001 f8f7 	bl	80021c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2028      	movs	r0, #40	@ 0x28
 8000fe0:	f001 f809 	bl	8001ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe4:	2028      	movs	r0, #40	@ 0x28
 8000fe6:	f001 f822 	bl	800202e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	10110000 	.word	0x10110000
 8001004:	40011000 	.word	0x40011000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Error_Handler+0x8>

08001014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_MspInit+0x5c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <HAL_MspInit+0x5c>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6193      	str	r3, [r2, #24]
 8001026:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_MspInit+0x5c>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <HAL_MspInit+0x5c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_MspInit+0x5c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_MspInit+0x5c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_MspInit+0x60>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_MspInit+0x60>)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000

08001078 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <HAL_ADC_MspInit+0x7c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d129      	bne.n	80010ec <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_ADC_MspInit+0x80>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <HAL_ADC_MspInit+0x80>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_ADC_MspInit+0x80>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_ADC_MspInit+0x80>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a10      	ldr	r2, [pc, #64]	@ (80010f8 <HAL_ADC_MspInit+0x80>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_ADC_MspInit+0x80>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010c8:	2340      	movs	r3, #64	@ 0x40
 80010ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010cc:	2303      	movs	r3, #3
 80010ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	4809      	ldr	r0, [pc, #36]	@ (80010fc <HAL_ADC_MspInit+0x84>)
 80010d8:	f001 f876 	bl	80021c8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2012      	movs	r0, #18
 80010e2:	f000 ff88 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010e6:	2012      	movs	r0, #18
 80010e8:	f000 ffa1 	bl	800202e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40012400 	.word	0x40012400
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010800 	.word	0x40010800

08001100 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a2b      	ldr	r2, [pc, #172]	@ (80011c8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d125      	bne.n	800116c <HAL_TIM_Encoder_MspInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001126:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a23      	ldr	r2, [pc, #140]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = left_encoder_A_Pin|left_encoder_B_Pin;
 8001150:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	4619      	mov	r1, r3
 8001164:	481a      	ldr	r0, [pc, #104]	@ (80011d0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001166:	f001 f82f 	bl	80021c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800116a:	e028      	b.n	80011be <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM4)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d123      	bne.n	80011be <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	61d3      	str	r3, [r2, #28]
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_TIM_Encoder_MspInit+0xcc>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = right_encoder_A_Pin|right_encoder_B_Pin;
 80011a6:	23c0      	movs	r3, #192	@ 0xc0
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	4619      	mov	r1, r3
 80011b8:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <HAL_TIM_Encoder_MspInit+0xd8>)
 80011ba:	f001 f805 	bl	80021c8 <HAL_GPIO_Init>
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012c00 	.word	0x40012c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010800 	.word	0x40010800
 80011d4:	40000800 	.word	0x40000800
 80011d8:	40010c00 	.word	0x40010c00

080011dc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ec:	d113      	bne.n	8001216 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HAL_TIM_PWM_MspInit+0x44>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001220 <HAL_TIM_PWM_MspInit+0x44>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_TIM_PWM_MspInit+0x44>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	201c      	movs	r0, #28
 800120c:	f000 fef3 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001210:	201c      	movs	r0, #28
 8001212:	f000 ff0c 	bl	800202e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <HAL_TIM_Base_MspInit+0x34>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10b      	bne.n	800124e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_TIM_Base_MspInit+0x38>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	@ (800125c <HAL_TIM_Base_MspInit+0x38>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_TIM_Base_MspInit+0x38>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40000400 	.word	0x40000400
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800127e:	d117      	bne.n	80012b0 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_TIM_MspPostInit+0x58>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <HAL_TIM_MspPostInit+0x58>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_TIM_MspPostInit+0x58>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = moter_left_Pin|moter_right_Pin;
 8001298:	2303      	movs	r3, #3
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <HAL_TIM_MspPostInit+0x5c>)
 80012ac:	f000 ff8c 	bl	80021c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010800 	.word	0x40010800

080012c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a19      	ldr	r2, [pc, #100]	@ (8001340 <HAL_UART_MspInit+0x80>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d12b      	bne.n	8001338 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_UART_MspInit+0x84>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_UART_MspInit+0x84>)
 80012e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ea:	61d3      	str	r3, [r2, #28]
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_UART_MspInit+0x84>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_UART_MspInit+0x84>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a11      	ldr	r2, [pc, #68]	@ (8001344 <HAL_UART_MspInit+0x84>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_UART_MspInit+0x84>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001310:	230c      	movs	r3, #12
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2302      	movs	r3, #2
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4809      	ldr	r0, [pc, #36]	@ (8001348 <HAL_UART_MspInit+0x88>)
 8001324:	f000 ff50 	bl	80021c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2026      	movs	r0, #38	@ 0x26
 800132e:	f000 fe62 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001332:	2026      	movs	r0, #38	@ 0x26
 8001334:	f000 fe7b 	bl	800202e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40004400 	.word	0x40004400
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f93a 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <ADC1_2_IRQHandler+0x10>)
 80013aa:	f000 fae9 	bl	8001980 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000cc 	.word	0x200000cc

080013b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <TIM2_IRQHandler+0x10>)
 80013be:	f002 f843 	bl	8003448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000144 	.word	0x20000144

080013cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <USART2_IRQHandler+0x10>)
 80013d2:	f002 fef7 	bl	80041c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000021c 	.word	0x2000021c

080013e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013e8:	f001 f88a 	bl	8002500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e00a      	b.n	8001418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001402:	f3af 8000 	nop.w
 8001406:	4601      	mov	r1, r0
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf0      	blt.n	8001402 <_read+0x12>
  }

  return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e009      	b.n	8001450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f86b 	bl	8000520 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	dbf1      	blt.n	800143c <_write+0x12>
  }
  return len;
 8001458:	687b      	ldr	r3, [r7, #4]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_close>:

int _close(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001488:	605a      	str	r2, [r3, #4]
  return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <_isatty>:

int _isatty(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
	...

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f003 fd92 	bl	800501c <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20005000 	.word	0x20005000
 8001524:	00000400 	.word	0x00000400
 8001528:	20000280 	.word	0x20000280
 800152c:	200003d8 	.word	0x200003d8

08001530 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800153c:	f7ff fff8 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480b      	ldr	r0, [pc, #44]	@ (8001570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001542:	490c      	ldr	r1, [pc, #48]	@ (8001574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001544:	4a0c      	ldr	r2, [pc, #48]	@ (8001578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a09      	ldr	r2, [pc, #36]	@ (800157c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001558:	4c09      	ldr	r4, [pc, #36]	@ (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f003 fd5f 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156a:	f7ff fa45 	bl	80009f8 <main>
  bx lr
 800156e:	4770      	bx	lr
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001578:	08005f08 	.word	0x08005f08
  ldr r2, =_sbss
 800157c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001580:	200003d4 	.word	0x200003d4

08001584 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <CAN1_RX1_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_Init+0x28>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <HAL_Init+0x28>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 fd21 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fd36 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40022000 	.word	0x40022000

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fd39 	bl	800204a <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015f0:	f000 fd01 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	@ (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000048 	.word	0x20000048
 800160c:	20000050 	.word	0x20000050
 8001610:	2000004c 	.word	0x2000004c

08001614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_IncTick+0x1c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_IncTick+0x20>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <HAL_IncTick+0x20>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000050 	.word	0x20000050
 8001634:	20000284 	.word	0x20000284

08001638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b02      	ldr	r3, [pc, #8]	@ (8001648 <HAL_GetTick+0x10>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000284 	.word	0x20000284

0800164c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0be      	b.n	80017ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fcf4 	bl	8001078 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fb8f 	bl	8001db4 <ADC_ConversionStop_Disable>
 8001696:	4603      	mov	r3, r0
 8001698:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 8099 	bne.w	80017da <HAL_ADC_Init+0x18e>
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 8095 	bne.w	80017da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016b8:	f023 0302 	bic.w	r3, r3, #2
 80016bc:	f043 0202 	orr.w	r2, r3, #2
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7b1b      	ldrb	r3, [r3, #12]
 80016d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016e4:	d003      	beq.n	80016ee <HAL_ADC_Init+0xa2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <HAL_ADC_Init+0xa8>
 80016ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016f2:	e000      	b.n	80016f6 <HAL_ADC_Init+0xaa>
 80016f4:	2300      	movs	r3, #0
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7d1b      	ldrb	r3, [r3, #20]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d119      	bne.n	8001738 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7b1b      	ldrb	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d109      	bne.n	8001720 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	3b01      	subs	r3, #1
 8001712:	035a      	lsls	r2, r3, #13
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e00b      	b.n	8001738 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001724:	f043 0220 	orr.w	r2, r3, #32
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <HAL_ADC_Init+0x1a8>)
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	430b      	orrs	r3, r1
 800175e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001768:	d003      	beq.n	8001772 <HAL_ADC_Init+0x126>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d104      	bne.n	800177c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	3b01      	subs	r3, #1
 8001778:	051b      	lsls	r3, r3, #20
 800177a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001782:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	430a      	orrs	r2, r1
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_ADC_Init+0x1ac>)
 8001798:	4013      	ands	r3, r2
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	429a      	cmp	r2, r3
 800179e:	d10b      	bne.n	80017b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017b6:	e018      	b.n	80017ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	f023 0312 	bic.w	r3, r3, #18
 80017c0:	f043 0210 	orr.w	r2, r3, #16
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017cc:	f043 0201 	orr.w	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017d8:	e007      	b.n	80017ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017de:	f043 0210 	orr.w	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	ffe1f7fd 	.word	0xffe1f7fd
 80017f8:	ff1f0efe 	.word	0xff1f0efe

080017fc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Start_IT+0x1a>
 8001812:	2302      	movs	r3, #2
 8001814:	e0a0      	b.n	8001958 <HAL_ADC_Start_IT+0x15c>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fa6e 	bl	8001d00 <ADC_Enable>
 8001824:	4603      	mov	r3, r0
 8001826:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 808f 	bne.w	800194e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a45      	ldr	r2, [pc, #276]	@ (8001960 <HAL_ADC_Start_IT+0x164>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d105      	bne.n	800185a <HAL_ADC_Start_IT+0x5e>
 800184e:	4b45      	ldr	r3, [pc, #276]	@ (8001964 <HAL_ADC_Start_IT+0x168>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d026      	beq.n	80018c2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001878:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800187c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001884:	e01d      	b.n	80018c2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a33      	ldr	r2, [pc, #204]	@ (8001964 <HAL_ADC_Start_IT+0x168>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d004      	beq.n	80018a6 <HAL_ADC_Start_IT+0xaa>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <HAL_ADC_Start_IT+0x164>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d10d      	bne.n	80018c2 <HAL_ADC_Start_IT+0xc6>
 80018a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <HAL_ADC_Start_IT+0x168>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d2:	f023 0206 	bic.w	r2, r3, #6
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018da:	e002      	b.n	80018e2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0202 	mvn.w	r2, #2
 80018f2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0220 	orr.w	r2, r2, #32
 8001902:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800190e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001912:	d113      	bne.n	800193c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001918:	4a11      	ldr	r2, [pc, #68]	@ (8001960 <HAL_ADC_Start_IT+0x164>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d105      	bne.n	800192a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_ADC_Start_IT+0x168>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001926:	2b00      	cmp	r3, #0
 8001928:	d108      	bne.n	800193c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	e00c      	b.n	8001956 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	e003      	b.n	8001956 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40012800 	.word	0x40012800
 8001964:	40012400 	.word	0x40012400

08001968 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03e      	beq.n	8001a20 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d039      	beq.n	8001a20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019d2:	d11d      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d119      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0220 	bic.w	r2, r2, #32
 80019ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7fe ff65 	bl	80008e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f06f 0212 	mvn.w	r2, #18
 8001a1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d04d      	beq.n	8001ac6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d048      	beq.n	8001ac6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001a56:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001a5a:	d012      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d125      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a74:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a78:	d11d      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d119      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a90:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9bd 	bl	8001e36 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f06f 020c 	mvn.w	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d012      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f809 	bl	8001afe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0201 	mvn.w	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x20>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e0dc      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1da>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d81c      	bhi.n	8001b7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b05      	subs	r3, #5
 8001b52:	221f      	movs	r2, #31
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4019      	ands	r1, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3b05      	subs	r3, #5
 8001b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b78:	e03c      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d81c      	bhi.n	8001bbc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b23      	subs	r3, #35	@ 0x23
 8001b94:	221f      	movs	r2, #31
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4019      	ands	r1, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b23      	subs	r3, #35	@ 0x23
 8001bae:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bba:	e01b      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b41      	subs	r3, #65	@ 0x41
 8001bce:	221f      	movs	r2, #31
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4019      	ands	r1, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	3b41      	subs	r3, #65	@ 0x41
 8001be8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d91c      	bls.n	8001c36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b1e      	subs	r3, #30
 8001c0e:	2207      	movs	r2, #7
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4019      	ands	r1, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6898      	ldr	r0, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	3b1e      	subs	r3, #30
 8001c28:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	e019      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6919      	ldr	r1, [r3, #16]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	2207      	movs	r2, #7
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6898      	ldr	r0, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d003      	beq.n	8001c7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c76:	2b11      	cmp	r3, #17
 8001c78:	d132      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d125      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d126      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ca0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a13      	ldr	r2, [pc, #76]	@ (8001cfc <HAL_ADC_ConfigChannel+0x1ec>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	0c9a      	lsrs	r2, r3, #18
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x1b2>
 8001cce:	e007      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40012400 	.word	0x40012400
 8001cf8:	20000048 	.word	0x20000048
 8001cfc:	431bde83 	.word	0x431bde83

08001d00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d040      	beq.n	8001da0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0201 	orr.w	r2, r2, #1
 8001d2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <ADC_Enable+0xac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <ADC_Enable+0xb0>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	0c9b      	lsrs	r3, r3, #18
 8001d3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d3c:	e002      	b.n	8001d44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d4a:	f7ff fc75 	bl	8001638 <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d50:	e01f      	b.n	8001d92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d52:	f7ff fc71 	bl	8001638 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d918      	bls.n	8001d92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d011      	beq.n	8001d92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e007      	b.n	8001da2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d1d8      	bne.n	8001d52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000048 	.word	0x20000048
 8001db0:	431bde83 	.word	0x431bde83

08001db4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d12e      	bne.n	8001e2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dde:	f7ff fc2b 	bl	8001638 <HAL_GetTick>
 8001de2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001de4:	e01b      	b.n	8001e1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001de6:	f7ff fc27 	bl	8001638 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d914      	bls.n	8001e1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10d      	bne.n	8001e1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	f043 0210 	orr.w	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e007      	b.n	8001e2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d0dc      	beq.n	8001de6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4906      	ldr	r1, [pc, #24]	@ (8001ee0 <__NVIC_EnableIRQ+0x34>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	@ (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	@ (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	@ 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fc0:	f7ff ff90 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff2d 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff42 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff90 	bl	8001f38 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5f 	bl	8001ee4 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff35 	bl	8001eac <__NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffa2 	bl	8001f9c <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d008      	beq.n	800208c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2204      	movs	r2, #4
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e020      	b.n	80020ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 020e 	bic.w	r2, r2, #14
 800209a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d005      	beq.n	80020fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e051      	b.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 020e 	bic.w	r2, r2, #14
 800210a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a22      	ldr	r2, [pc, #136]	@ (80021ac <HAL_DMA_Abort_IT+0xd4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d029      	beq.n	800217a <HAL_DMA_Abort_IT+0xa2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a21      	ldr	r2, [pc, #132]	@ (80021b0 <HAL_DMA_Abort_IT+0xd8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_Abort_IT+0x9e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1f      	ldr	r2, [pc, #124]	@ (80021b4 <HAL_DMA_Abort_IT+0xdc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01a      	beq.n	8002170 <HAL_DMA_Abort_IT+0x98>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1e      	ldr	r2, [pc, #120]	@ (80021b8 <HAL_DMA_Abort_IT+0xe0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d012      	beq.n	800216a <HAL_DMA_Abort_IT+0x92>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <HAL_DMA_Abort_IT+0xe4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00a      	beq.n	8002164 <HAL_DMA_Abort_IT+0x8c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1b      	ldr	r2, [pc, #108]	@ (80021c0 <HAL_DMA_Abort_IT+0xe8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d102      	bne.n	800215e <HAL_DMA_Abort_IT+0x86>
 8002158:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800215c:	e00e      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 800215e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002162:	e00b      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 8002164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002168:	e008      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 800216a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216e:	e005      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 8002170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002174:	e002      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 8002176:	2310      	movs	r3, #16
 8002178:	e000      	b.n	800217c <HAL_DMA_Abort_IT+0xa4>
 800217a:	2301      	movs	r3, #1
 800217c:	4a11      	ldr	r2, [pc, #68]	@ (80021c4 <HAL_DMA_Abort_IT+0xec>)
 800217e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
    } 
  }
  return status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40020008 	.word	0x40020008
 80021b0:	4002001c 	.word	0x4002001c
 80021b4:	40020030 	.word	0x40020030
 80021b8:	40020044 	.word	0x40020044
 80021bc:	40020058 	.word	0x40020058
 80021c0:	4002006c 	.word	0x4002006c
 80021c4:	40020000 	.word	0x40020000

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b08b      	sub	sp, #44	@ 0x2c
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	e169      	b.n	80024b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021dc:	2201      	movs	r2, #1
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 8158 	bne.w	80024aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a9a      	ldr	r2, [pc, #616]	@ (8002468 <HAL_GPIO_Init+0x2a0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d05e      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002204:	4a98      	ldr	r2, [pc, #608]	@ (8002468 <HAL_GPIO_Init+0x2a0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d875      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800220a:	4a98      	ldr	r2, [pc, #608]	@ (800246c <HAL_GPIO_Init+0x2a4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d058      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002210:	4a96      	ldr	r2, [pc, #600]	@ (800246c <HAL_GPIO_Init+0x2a4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d86f      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002216:	4a96      	ldr	r2, [pc, #600]	@ (8002470 <HAL_GPIO_Init+0x2a8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d052      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 800221c:	4a94      	ldr	r2, [pc, #592]	@ (8002470 <HAL_GPIO_Init+0x2a8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d869      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002222:	4a94      	ldr	r2, [pc, #592]	@ (8002474 <HAL_GPIO_Init+0x2ac>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d04c      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002228:	4a92      	ldr	r2, [pc, #584]	@ (8002474 <HAL_GPIO_Init+0x2ac>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d863      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800222e:	4a92      	ldr	r2, [pc, #584]	@ (8002478 <HAL_GPIO_Init+0x2b0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d046      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002234:	4a90      	ldr	r2, [pc, #576]	@ (8002478 <HAL_GPIO_Init+0x2b0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d85d      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800223a:	2b12      	cmp	r3, #18
 800223c:	d82a      	bhi.n	8002294 <HAL_GPIO_Init+0xcc>
 800223e:	2b12      	cmp	r3, #18
 8002240:	d859      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002242:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_GPIO_Init+0x80>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	080022c3 	.word	0x080022c3
 800224c:	0800229d 	.word	0x0800229d
 8002250:	080022af 	.word	0x080022af
 8002254:	080022f1 	.word	0x080022f1
 8002258:	080022f7 	.word	0x080022f7
 800225c:	080022f7 	.word	0x080022f7
 8002260:	080022f7 	.word	0x080022f7
 8002264:	080022f7 	.word	0x080022f7
 8002268:	080022f7 	.word	0x080022f7
 800226c:	080022f7 	.word	0x080022f7
 8002270:	080022f7 	.word	0x080022f7
 8002274:	080022f7 	.word	0x080022f7
 8002278:	080022f7 	.word	0x080022f7
 800227c:	080022f7 	.word	0x080022f7
 8002280:	080022f7 	.word	0x080022f7
 8002284:	080022f7 	.word	0x080022f7
 8002288:	080022f7 	.word	0x080022f7
 800228c:	080022a5 	.word	0x080022a5
 8002290:	080022b9 	.word	0x080022b9
 8002294:	4a79      	ldr	r2, [pc, #484]	@ (800247c <HAL_GPIO_Init+0x2b4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800229a:	e02c      	b.n	80022f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e029      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	3304      	adds	r3, #4
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e024      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	3308      	adds	r3, #8
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e01f      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	330c      	adds	r3, #12
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e01a      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ca:	2304      	movs	r3, #4
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e013      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d8:	2308      	movs	r3, #8
 80022da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	611a      	str	r2, [r3, #16]
          break;
 80022e2:	e009      	b.n	80022f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e4:	2308      	movs	r3, #8
 80022e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	615a      	str	r2, [r3, #20]
          break;
 80022ee:	e003      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          break;
 80022f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2bff      	cmp	r3, #255	@ 0xff
 80022fc:	d801      	bhi.n	8002302 <HAL_GPIO_Init+0x13a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	e001      	b.n	8002306 <HAL_GPIO_Init+0x13e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2bff      	cmp	r3, #255	@ 0xff
 800230c:	d802      	bhi.n	8002314 <HAL_GPIO_Init+0x14c>
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0x152>
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	3b08      	subs	r3, #8
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	210f      	movs	r1, #15
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	431a      	orrs	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80b1 	beq.w	80024aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002348:	4b4d      	ldr	r3, [pc, #308]	@ (8002480 <HAL_GPIO_Init+0x2b8>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a4c      	ldr	r2, [pc, #304]	@ (8002480 <HAL_GPIO_Init+0x2b8>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <HAL_GPIO_Init+0x2b8>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002360:	4a48      	ldr	r2, [pc, #288]	@ (8002484 <HAL_GPIO_Init+0x2bc>)
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a40      	ldr	r2, [pc, #256]	@ (8002488 <HAL_GPIO_Init+0x2c0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_GPIO_Init+0x1ec>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3f      	ldr	r2, [pc, #252]	@ (800248c <HAL_GPIO_Init+0x2c4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00d      	beq.n	80023b0 <HAL_GPIO_Init+0x1e8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a3e      	ldr	r2, [pc, #248]	@ (8002490 <HAL_GPIO_Init+0x2c8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d007      	beq.n	80023ac <HAL_GPIO_Init+0x1e4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a3d      	ldr	r2, [pc, #244]	@ (8002494 <HAL_GPIO_Init+0x2cc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_GPIO_Init+0x1e0>
 80023a4:	2303      	movs	r3, #3
 80023a6:	e006      	b.n	80023b6 <HAL_GPIO_Init+0x1ee>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e004      	b.n	80023b6 <HAL_GPIO_Init+0x1ee>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e002      	b.n	80023b6 <HAL_GPIO_Init+0x1ee>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_GPIO_Init+0x1ee>
 80023b4:	2300      	movs	r3, #0
 80023b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b8:	f002 0203 	and.w	r2, r2, #3
 80023bc:	0092      	lsls	r2, r2, #2
 80023be:	4093      	lsls	r3, r2
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023c6:	492f      	ldr	r1, [pc, #188]	@ (8002484 <HAL_GPIO_Init+0x2bc>)
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	492c      	ldr	r1, [pc, #176]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4928      	ldr	r1, [pc, #160]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	4922      	ldr	r1, [pc, #136]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	60cb      	str	r3, [r1, #12]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	491e      	ldr	r1, [pc, #120]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002420:	4013      	ands	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4918      	ldr	r1, [pc, #96]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800243e:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	4914      	ldr	r1, [pc, #80]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 8002448:	4013      	ands	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d021      	beq.n	800249c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002458:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	490e      	ldr	r1, [pc, #56]	@ (8002498 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e021      	b.n	80024aa <HAL_GPIO_Init+0x2e2>
 8002466:	bf00      	nop
 8002468:	10320000 	.word	0x10320000
 800246c:	10310000 	.word	0x10310000
 8002470:	10220000 	.word	0x10220000
 8002474:	10210000 	.word	0x10210000
 8002478:	10120000 	.word	0x10120000
 800247c:	10110000 	.word	0x10110000
 8002480:	40021000 	.word	0x40021000
 8002484:	40010000 	.word	0x40010000
 8002488:	40010800 	.word	0x40010800
 800248c:	40010c00 	.word	0x40010c00
 8002490:	40011000 	.word	0x40011000
 8002494:	40011400 	.word	0x40011400
 8002498:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_GPIO_Init+0x304>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	4909      	ldr	r1, [pc, #36]	@ (80024cc <HAL_GPIO_Init+0x304>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	3301      	adds	r3, #1
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f ae8e 	bne.w	80021dc <HAL_GPIO_Init+0x14>
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	372c      	adds	r7, #44	@ 0x2c
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40010400 	.word	0x40010400

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024ec:	e003      	b.n	80024f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002516:	4a05      	ldr	r2, [pc, #20]	@ (800252c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f806 	bl	8002530 <HAL_GPIO_EXTI_Callback>
  }
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40010400 	.word	0x40010400

08002530 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e272      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8087 	beq.w	8002672 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002564:	4b92      	ldr	r3, [pc, #584]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b04      	cmp	r3, #4
 800256e:	d00c      	beq.n	800258a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002570:	4b8f      	ldr	r3, [pc, #572]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d112      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5e>
 800257c:	4b8c      	ldr	r3, [pc, #560]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002588:	d10b      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258a:	4b89      	ldr	r3, [pc, #548]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d06c      	beq.n	8002670 <HAL_RCC_OscConfig+0x12c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d168      	bne.n	8002670 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e24c      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x76>
 80025ac:	4b80      	ldr	r3, [pc, #512]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a7f      	ldr	r2, [pc, #508]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e02e      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x98>
 80025c2:	4b7b      	ldr	r3, [pc, #492]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7a      	ldr	r2, [pc, #488]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b78      	ldr	r3, [pc, #480]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a77      	ldr	r2, [pc, #476]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0xbc>
 80025e6:	4b72      	ldr	r3, [pc, #456]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a71      	ldr	r2, [pc, #452]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6f      	ldr	r3, [pc, #444]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6e      	ldr	r2, [pc, #440]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 8002600:	4b6b      	ldr	r3, [pc, #428]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6a      	ldr	r2, [pc, #424]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a67      	ldr	r2, [pc, #412]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002616:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff f80a 	bl	8001638 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7ff f806 	bl	8001638 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e200      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b5d      	ldr	r3, [pc, #372]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xe4>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fff6 	bl	8001638 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fff2 	bl	8001638 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	@ 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1ec      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b53      	ldr	r3, [pc, #332]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x10c>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267e:	4b4c      	ldr	r3, [pc, #304]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800268a:	4b49      	ldr	r3, [pc, #292]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x18c>
 8002696:	4b46      	ldr	r3, [pc, #280]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b43      	ldr	r3, [pc, #268]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x176>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1c0      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b3d      	ldr	r3, [pc, #244]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4939      	ldr	r1, [pc, #228]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <HAL_RCC_OscConfig+0x270>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe ffab 	bl	8001638 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe ffa7 	bl	8001638 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1a1      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b2a      	ldr	r3, [pc, #168]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4927      	ldr	r1, [pc, #156]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <HAL_RCC_OscConfig+0x270>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe ff8a 	bl	8001638 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002728:	f7fe ff86 	bl	8001638 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e180      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d03a      	beq.n	80027c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <HAL_RCC_OscConfig+0x274>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002760:	f7fe ff6a 	bl	8001638 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe ff66 	bl	8001638 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e160      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002786:	2001      	movs	r0, #1
 8002788:	f000 face 	bl	8002d28 <RCC_Delay>
 800278c:	e01c      	b.n	80027c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_RCC_OscConfig+0x274>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7fe ff50 	bl	8001638 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279a:	e00f      	b.n	80027bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe ff4c 	bl	8001638 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d908      	bls.n	80027bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e146      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	42420000 	.word	0x42420000
 80027b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	4b92      	ldr	r3, [pc, #584]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e9      	bne.n	800279c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a6 	beq.w	8002922 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027da:	4b8b      	ldr	r3, [pc, #556]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	4b88      	ldr	r3, [pc, #544]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4a87      	ldr	r2, [pc, #540]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	61d3      	str	r3, [r2, #28]
 80027f2:	4b85      	ldr	r3, [pc, #532]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b82      	ldr	r3, [pc, #520]	@ (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d118      	bne.n	8002840 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7e      	ldr	r2, [pc, #504]	@ (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281a:	f7fe ff0d 	bl	8001638 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002822:	f7fe ff09 	bl	8001638 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b64      	cmp	r3, #100	@ 0x64
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e103      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	4b75      	ldr	r3, [pc, #468]	@ (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x312>
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6213      	str	r3, [r2, #32]
 8002854:	e02d      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x334>
 800285e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a69      	ldr	r2, [pc, #420]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	4b67      	ldr	r3, [pc, #412]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a66      	ldr	r2, [pc, #408]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
 8002876:	e01c      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d10c      	bne.n	800289a <HAL_RCC_OscConfig+0x356>
 8002880:	4b61      	ldr	r3, [pc, #388]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4a5d      	ldr	r2, [pc, #372]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6213      	str	r3, [r2, #32]
 8002898:	e00b      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 800289a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a5a      	ldr	r2, [pc, #360]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	4b58      	ldr	r3, [pc, #352]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a57      	ldr	r2, [pc, #348]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d015      	beq.n	80028e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7fe febd 	bl	8001638 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe feb9 	bl	8001638 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0b1      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ee      	beq.n	80028c2 <HAL_RCC_OscConfig+0x37e>
 80028e4:	e014      	b.n	8002910 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e6:	f7fe fea7 	bl	8001638 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe fea3 	bl	8001638 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e09b      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002904:	4b40      	ldr	r3, [pc, #256]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ee      	bne.n	80028ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d105      	bne.n	8002922 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002916:	4b3c      	ldr	r3, [pc, #240]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002920:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8087 	beq.w	8002a3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d061      	beq.n	80029fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d146      	bne.n	80029ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fe77 	bl	8001638 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fe73 	bl	8001638 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e06d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002960:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002974:	d108      	bne.n	8002988 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002976:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4921      	ldr	r1, [pc, #132]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a19      	ldr	r1, [r3, #32]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	430b      	orrs	r3, r1
 800299a:	491b      	ldr	r1, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe fe47 	bl	8001638 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fe43 	bl	8001638 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x46a>
 80029cc:	e035      	b.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe fe30 	bl	8001638 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fe2c 	bl	8001638 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e026      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x498>
 80029fa:	e01e      	b.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e019      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCC_OscConfig+0x500>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0d0      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d910      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b67      	ldr	r3, [pc, #412]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 0207 	bic.w	r2, r3, #7
 8002a72:	4965      	ldr	r1, [pc, #404]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ac6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d040      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e073      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3d      	ldr	r3, [pc, #244]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06b      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b39      	ldr	r3, [pc, #228]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4936      	ldr	r1, [pc, #216]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fd7e 	bl	8001638 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe fd7a 	bl	8001638 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e053      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b27      	ldr	r3, [pc, #156]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d210      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	4922      	ldr	r1, [pc, #136]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	@ (8002c14 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fcdc 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08005d98 	.word	0x08005d98
 8002c14:	20000048 	.word	0x20000048
 8002c18:	2000004c 	.word	0x2000004c

08002c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d002      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x30>
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x36>
 8002c4a:	e027      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c4c:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4e:	613b      	str	r3, [r7, #16]
      break;
 8002c50:	e027      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	0c9b      	lsrs	r3, r3, #18
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c5c:	5cd3      	ldrb	r3, [r2, r3]
 8002c5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c6a:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	0c5b      	lsrs	r3, r3, #17
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	4a11      	ldr	r2, [pc, #68]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c7e:	fb03 f202 	mul.w	r2, r3, r2
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e004      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	613b      	str	r3, [r7, #16]
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9e:	613b      	str	r3, [r7, #16]
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	693b      	ldr	r3, [r7, #16]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	007a1200 	.word	0x007a1200
 8002cb8:	08005db0 	.word	0x08005db0
 8002cbc:	08005dc0 	.word	0x08005dc0
 8002cc0:	003d0900 	.word	0x003d0900

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b02      	ldr	r3, [pc, #8]	@ (8002cd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	20000048 	.word	0x20000048

08002cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cdc:	f7ff fff2 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08005da8 	.word	0x08005da8

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d04:	f7ff ffde 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0adb      	lsrs	r3, r3, #11
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	@ (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08005da8 	.word	0x08005da8

08002d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d30:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <RCC_Delay+0x34>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <RCC_Delay+0x38>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a5b      	lsrs	r3, r3, #9
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d44:	bf00      	nop
  }
  while (Delay --);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1e5a      	subs	r2, r3, #1
 8002d4a:	60fa      	str	r2, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f9      	bne.n	8002d44 <RCC_Delay+0x1c>
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000048 	.word	0x20000048
 8002d60:	10624dd3 	.word	0x10624dd3

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d07d      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d84:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	61d3      	str	r3, [r2, #28]
 8002d9c:	4b49      	ldr	r3, [pc, #292]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	4b46      	ldr	r3, [pc, #280]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d118      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db8:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a42      	ldr	r2, [pc, #264]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fc38 	bl	8001638 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	e008      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7fe fc34 	bl	8001638 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	@ 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e06d      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dea:	4b36      	ldr	r3, [pc, #216]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d02e      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d027      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e08:	4b2e      	ldr	r3, [pc, #184]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e12:	4b2e      	ldr	r3, [pc, #184]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e18:	4b2c      	ldr	r3, [pc, #176]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e1e:	4a29      	ldr	r2, [pc, #164]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d014      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fc03 	bl	8001638 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe fbff 	bl	8001638 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e036      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4917      	ldr	r1, [pc, #92]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b14      	ldr	r3, [pc, #80]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4a13      	ldr	r2, [pc, #76]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	490b      	ldr	r1, [pc, #44]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea6:	4b07      	ldr	r3, [pc, #28]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	4904      	ldr	r1, [pc, #16]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	42420440 	.word	0x42420440

08002ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e041      	b.n	8002f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe f994 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f000 fd38 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d001      	beq.n	8002f88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e032      	b.n	8002fee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a18      	ldr	r2, [pc, #96]	@ (8002ff8 <HAL_TIM_Base_Start+0x88>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00e      	beq.n	8002fb8 <HAL_TIM_Base_Start+0x48>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa2:	d009      	beq.n	8002fb8 <HAL_TIM_Base_Start+0x48>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a14      	ldr	r2, [pc, #80]	@ (8002ffc <HAL_TIM_Base_Start+0x8c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_TIM_Base_Start+0x48>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <HAL_TIM_Base_Start+0x90>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d111      	bne.n	8002fdc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d010      	beq.n	8002fec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	e007      	b.n	8002fec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40000400 	.word	0x40000400
 8003000:	40000800 	.word	0x40000800

08003004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e041      	b.n	800309a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe f8d6 	bl	80011dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f000 fc9e 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_TIM_PWM_Start+0x24>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e022      	b.n	800310e <HAL_TIM_PWM_Start+0x6a>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d109      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x3e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e015      	b.n	800310e <HAL_TIM_PWM_Start+0x6a>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d109      	bne.n	80030fc <HAL_TIM_PWM_Start+0x58>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e008      	b.n	800310e <HAL_TIM_PWM_Start+0x6a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e05e      	b.n	80031d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <HAL_TIM_PWM_Start+0x82>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003124:	e013      	b.n	800314e <HAL_TIM_PWM_Start+0xaa>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d104      	bne.n	8003136 <HAL_TIM_PWM_Start+0x92>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003134:	e00b      	b.n	800314e <HAL_TIM_PWM_Start+0xaa>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d104      	bne.n	8003146 <HAL_TIM_PWM_Start+0xa2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003144:	e003      	b.n	800314e <HAL_TIM_PWM_Start+0xaa>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fea0 	bl	8003e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1e      	ldr	r2, [pc, #120]	@ (80031dc <HAL_TIM_PWM_Start+0x138>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d107      	bne.n	8003176 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a18      	ldr	r2, [pc, #96]	@ (80031dc <HAL_TIM_PWM_Start+0x138>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <HAL_TIM_PWM_Start+0xfa>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003188:	d009      	beq.n	800319e <HAL_TIM_PWM_Start+0xfa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a14      	ldr	r2, [pc, #80]	@ (80031e0 <HAL_TIM_PWM_Start+0x13c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_TIM_PWM_Start+0xfa>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a12      	ldr	r2, [pc, #72]	@ (80031e4 <HAL_TIM_PWM_Start+0x140>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d111      	bne.n	80031c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d010      	beq.n	80031d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c0:	e007      	b.n	80031d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800

080031e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e093      	b.n	8003324 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd ff75 	bl	8001100 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f000 fba1 	bl	8003984 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	4313      	orrs	r3, r2
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003288:	f023 030c 	bic.w	r3, r3, #12
 800328c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	4313      	orrs	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	011a      	lsls	r2, r3, #4
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	031b      	lsls	r3, r3, #12
 80032b8:	4313      	orrs	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	4313      	orrs	r3, r2
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800333c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003344:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800334c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003354:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d110      	bne.n	800337e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003362:	7b7b      	ldrb	r3, [r7, #13]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d001      	beq.n	800336c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e069      	b.n	8003440 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800337c:	e031      	b.n	80033e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d110      	bne.n	80033a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800338a:	7b3b      	ldrb	r3, [r7, #12]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d001      	beq.n	8003394 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e055      	b.n	8003440 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033a4:	e01d      	b.n	80033e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d108      	bne.n	80033be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d105      	bne.n	80033be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033b2:	7b7b      	ldrb	r3, [r7, #13]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d102      	bne.n	80033be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033b8:	7b3b      	ldrb	r3, [r7, #12]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e03e      	b.n	8003440 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_TIM_Encoder_Start+0xc4>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d008      	beq.n	8003400 <HAL_TIM_Encoder_Start+0xd4>
 80033ee:	e00f      	b.n	8003410 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2201      	movs	r2, #1
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fd4f 	bl	8003e9c <TIM_CCxChannelCmd>
      break;
 80033fe:	e016      	b.n	800342e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	2104      	movs	r1, #4
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fd47 	bl	8003e9c <TIM_CCxChannelCmd>
      break;
 800340e:	e00e      	b.n	800342e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2201      	movs	r2, #1
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fd3f 	bl	8003e9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	2104      	movs	r1, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fd38 	bl	8003e9c <TIM_CCxChannelCmd>
      break;
 800342c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0202 	mvn.w	r2, #2
 800347c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa5a 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa4d 	bl	800393a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa5c 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0204 	mvn.w	r2, #4
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa34 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa27 	bl	800393a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa36 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d020      	beq.n	8003544 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0208 	mvn.w	r2, #8
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa0e 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa01 	bl	800393a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa10 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d020      	beq.n	8003590 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01b      	beq.n	8003590 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0210 	mvn.w	r2, #16
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2208      	movs	r2, #8
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f9e8 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f9db 	bl	800393a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f9ea 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0201 	mvn.w	r2, #1
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd f9ba 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fced 	bl	8003fb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f9ba 	bl	8003970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0220 	mvn.w	r2, #32
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fcc0 	bl	8003fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003642:	2302      	movs	r3, #2
 8003644:	e0ae      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	f200 809f 	bhi.w	8003794 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003656:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	08003691 	.word	0x08003691
 8003660:	08003795 	.word	0x08003795
 8003664:	08003795 	.word	0x08003795
 8003668:	08003795 	.word	0x08003795
 800366c:	080036d1 	.word	0x080036d1
 8003670:	08003795 	.word	0x08003795
 8003674:	08003795 	.word	0x08003795
 8003678:	08003795 	.word	0x08003795
 800367c:	08003713 	.word	0x08003713
 8003680:	08003795 	.word	0x08003795
 8003684:	08003795 	.word	0x08003795
 8003688:	08003795 	.word	0x08003795
 800368c:	08003753 	.word	0x08003753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f9e2 	bl	8003a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0208 	orr.w	r2, r2, #8
 80036aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6999      	ldr	r1, [r3, #24]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	619a      	str	r2, [r3, #24]
      break;
 80036ce:	e064      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fa28 	bl	8003b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6999      	ldr	r1, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]
      break;
 8003710:	e043      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fa71 	bl	8003c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0208 	orr.w	r2, r2, #8
 800372c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0204 	bic.w	r2, r2, #4
 800373c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69d9      	ldr	r1, [r3, #28]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	61da      	str	r2, [r3, #28]
      break;
 8003750:	e023      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fabb 	bl	8003cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800376c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69d9      	ldr	r1, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	021a      	lsls	r2, r3, #8
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	61da      	str	r2, [r3, #28]
      break;
 8003792:	e002      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
      break;
 8003798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e0b4      	b.n	8003932 <HAL_TIM_ConfigClockSource+0x186>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003800:	d03e      	beq.n	8003880 <HAL_TIM_ConfigClockSource+0xd4>
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003806:	f200 8087 	bhi.w	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380e:	f000 8086 	beq.w	800391e <HAL_TIM_ConfigClockSource+0x172>
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003816:	d87f      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b70      	cmp	r3, #112	@ 0x70
 800381a:	d01a      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xa6>
 800381c:	2b70      	cmp	r3, #112	@ 0x70
 800381e:	d87b      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b60      	cmp	r3, #96	@ 0x60
 8003822:	d050      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003824:	2b60      	cmp	r3, #96	@ 0x60
 8003826:	d877      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b50      	cmp	r3, #80	@ 0x50
 800382a:	d03c      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xfa>
 800382c:	2b50      	cmp	r3, #80	@ 0x50
 800382e:	d873      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d058      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d86f      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b30      	cmp	r3, #48	@ 0x30
 800383a:	d064      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b30      	cmp	r3, #48	@ 0x30
 800383e:	d86b      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d060      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d867      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d05c      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 800384c:	2b10      	cmp	r3, #16
 800384e:	d05a      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 8003850:	e062      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003862:	f000 fafc 	bl	8003e5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	609a      	str	r2, [r3, #8]
      break;
 800387e:	e04f      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003890:	f000 fae5 	bl	8003e5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a2:	609a      	str	r2, [r3, #8]
      break;
 80038a4:	e03c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b2:	461a      	mov	r2, r3
 80038b4:	f000 fa5c 	bl	8003d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2150      	movs	r1, #80	@ 0x50
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fab3 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 80038c4:	e02c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d2:	461a      	mov	r2, r3
 80038d4:	f000 fa7a 	bl	8003dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2160      	movs	r1, #96	@ 0x60
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 faa3 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 80038e4:	e01c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f2:	461a      	mov	r2, r3
 80038f4:	f000 fa3c 	bl	8003d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2140      	movs	r1, #64	@ 0x40
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fa93 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003904:	e00c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f000 fa8a 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003916:	e003      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e000      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800391e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
	...

08003984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a2f      	ldr	r2, [pc, #188]	@ (8003a54 <TIM_Base_SetConfig+0xd0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x30>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x30>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a58 <TIM_Base_SetConfig+0xd4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x30>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a2b      	ldr	r2, [pc, #172]	@ (8003a5c <TIM_Base_SetConfig+0xd8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a22      	ldr	r2, [pc, #136]	@ (8003a54 <TIM_Base_SetConfig+0xd0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0x62>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0x62>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a58 <TIM_Base_SetConfig+0xd4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a5c <TIM_Base_SetConfig+0xd8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a54 <TIM_Base_SetConfig+0xd0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800

08003a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f023 0201 	bic.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f023 0302 	bic.w	r3, r3, #2
 8003aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b28 <TIM_OC1_SetConfig+0xc8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d10c      	bne.n	8003ad6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f023 0308 	bic.w	r3, r3, #8
 8003ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a13      	ldr	r2, [pc, #76]	@ (8003b28 <TIM_OC1_SetConfig+0xc8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d111      	bne.n	8003b02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40012c00 	.word	0x40012c00

08003b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f023 0210 	bic.w	r2, r3, #16
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f023 0320 	bic.w	r3, r3, #32
 8003b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <TIM_OC2_SetConfig+0xd0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d10d      	bne.n	8003ba8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a14      	ldr	r2, [pc, #80]	@ (8003bfc <TIM_OC2_SetConfig+0xd0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d113      	bne.n	8003bd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	40012c00 	.word	0x40012c00

08003c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd0 <TIM_OC3_SetConfig+0xd0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10d      	bne.n	8003c7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a14      	ldr	r2, [pc, #80]	@ (8003cd0 <TIM_OC3_SetConfig+0xd0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d113      	bne.n	8003caa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40012c00 	.word	0x40012c00

08003cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	031b      	lsls	r3, r3, #12
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d6c <TIM_OC4_SetConfig+0x98>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d109      	bne.n	8003d48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	40012c00 	.word	0x40012c00

08003d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 030a 	bic.w	r3, r3, #10
 8003dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0210 	bic.w	r2, r3, #16
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	031b      	lsls	r3, r3, #12
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f043 0307 	orr.w	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b087      	sub	sp, #28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	021a      	lsls	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	2201      	movs	r2, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1a      	ldr	r2, [r3, #32]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e046      	b.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a16      	ldr	r2, [pc, #88]	@ (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f48:	d009      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	@ (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a10      	ldr	r2, [pc, #64]	@ (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10c      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800

08003fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e042      	b.n	800405c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd f968 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	@ 0x24
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fdb7 	bl	8004b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800401c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800402c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800403c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	@ 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	d175      	bne.n	8004170 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Transmit+0x2c>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e06e      	b.n	8004172 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2221      	movs	r2, #33	@ 0x21
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a2:	f7fd fac9 	bl	8001638 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040bc:	d108      	bne.n	80040d0 <HAL_UART_Transmit+0x6c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	e003      	b.n	80040d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040d8:	e02e      	b.n	8004138 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	@ 0x80
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fb1c 	bl	8004722 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e03a      	b.n	8004172 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10b      	bne.n	800411a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	3302      	adds	r3, #2
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e007      	b.n	800412a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	3301      	adds	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1cb      	bne.n	80040da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	2140      	movs	r1, #64	@ 0x40
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fae8 	bl	8004722 <UART_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	4613      	mov	r3, r2
 8004186:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b20      	cmp	r3, #32
 8004192:	d112      	bne.n	80041ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_UART_Receive_IT+0x26>
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e00b      	b.n	80041bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	461a      	mov	r2, r3
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fb0f 	bl	80047d4 <UART_Start_Receive_IT>
 80041b6:	4603      	mov	r3, r0
 80041b8:	e000      	b.n	80041bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b0ba      	sub	sp, #232	@ 0xe8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_UART_IRQHandler+0x66>
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fbec 	bl	8004a00 <UART_Receive_IT>
      return;
 8004228:	e25b      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800422a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80de 	beq.w	80043f0 <HAL_UART_IRQHandler+0x22c>
 8004234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004244:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80d1 	beq.w	80043f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0xae>
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f043 0201 	orr.w	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_UART_IRQHandler+0xd2>
 800427e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f043 0202 	orr.w	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_UART_IRQHandler+0xf6>
 80042a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	f043 0204 	orr.w	r2, r3, #4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d011      	beq.n	80042ea <HAL_UART_IRQHandler+0x126>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	f043 0208 	orr.w	r2, r3, #8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 81f2 	beq.w	80046d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_UART_IRQHandler+0x14e>
 8004300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb77 	bl	8004a00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <HAL_UART_IRQHandler+0x17a>
 8004336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d04f      	beq.n	80043de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa81 	bl	8004846 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d041      	beq.n	80043d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800436c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3314      	adds	r3, #20
 800437a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800437e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800438a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1d9      	bne.n	8004352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d013      	beq.n	80043ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043aa:	4a7e      	ldr	r2, [pc, #504]	@ (80045a4 <HAL_UART_IRQHandler+0x3e0>)
 80043ac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fe90 	bl	80020d8 <HAL_DMA_Abort_IT>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043c8:	4610      	mov	r0, r2
 80043ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	e00e      	b.n	80043ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f993 	bl	80046fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e00a      	b.n	80043ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f98f 	bl	80046fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e006      	b.n	80043ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f98b 	bl	80046fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043ea:	e175      	b.n	80046d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	bf00      	nop
    return;
 80043ee:	e173      	b.n	80046d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	f040 814f 	bne.w	8004698 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8148 	beq.w	8004698 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8141 	beq.w	8004698 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80b6 	beq.w	80045a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8145 	beq.w	80046dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800445a:	429a      	cmp	r2, r3
 800445c:	f080 813e 	bcs.w	80046dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004466:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b20      	cmp	r3, #32
 8004470:	f000 8088 	beq.w	8004584 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800448a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800448e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004492:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044a0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1d9      	bne.n	8004474 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3314      	adds	r3, #20
 80044c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e1      	bne.n	80044c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800450c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800450e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3314      	adds	r3, #20
 800451c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004520:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004522:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004526:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800452e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e3      	bne.n	80044fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004566:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004568:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800456c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e3      	bne.n	8004542 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fd6f 	bl	8002062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004592:	b29b      	uxth	r3, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	b29b      	uxth	r3, r3
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8b6 	bl	800470c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045a0:	e09c      	b.n	80046dc <HAL_UART_IRQHandler+0x518>
 80045a2:	bf00      	nop
 80045a4:	0800490b 	.word	0x0800490b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 808e 	beq.w	80046e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8089 	beq.w	80046e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80045f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e3      	bne.n	80045ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3314      	adds	r3, #20
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	623b      	str	r3, [r7, #32]
   return(result);
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3314      	adds	r3, #20
 8004626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800462a:	633a      	str	r2, [r7, #48]	@ 0x30
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e3      	bne.n	8004606 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	60fb      	str	r3, [r7, #12]
   return(result);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0310 	bic.w	r3, r3, #16
 8004662:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004670:	61fa      	str	r2, [r7, #28]
 8004672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	69b9      	ldr	r1, [r7, #24]
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	617b      	str	r3, [r7, #20]
   return(result);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e3      	bne.n	800464c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800468a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f83b 	bl	800470c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004696:	e023      	b.n	80046e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <HAL_UART_IRQHandler+0x4f4>
 80046a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f93e 	bl	8004932 <UART_Transmit_IT>
    return;
 80046b6:	e014      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00e      	beq.n	80046e2 <HAL_UART_IRQHandler+0x51e>
 80046c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f97d 	bl	80049d0 <UART_EndTransmit_IT>
    return;
 80046d6:	e004      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80046e0:	bf00      	nop
  }
}
 80046e2:	37e8      	adds	r7, #232	@ 0xe8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr

080046fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr

0800470c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004732:	e03b      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800473a:	d037      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7fc ff7c 	bl	8001638 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <UART_WaitOnFlagUntilTimeout+0x30>
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e03a      	b.n	80047cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d023      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b80      	cmp	r3, #128	@ 0x80
 8004768:	d020      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b40      	cmp	r3, #64	@ 0x40
 800476e:	d01d      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b08      	cmp	r3, #8
 800477c:	d116      	bne.n	80047ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f856 	bl	8004846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2208      	movs	r2, #8
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e00f      	b.n	80047cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d0b4      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2222      	movs	r2, #34	@ 0x22
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004818:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0220 	orr.w	r2, r2, #32
 8004838:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004846:	b480      	push	{r7}
 8004848:	b095      	sub	sp, #84	@ 0x54
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800486e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800487c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	61fb      	str	r3, [r7, #28]
   return(result);
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3314      	adds	r3, #20
 80048a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e5      	bne.n	8004882 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d119      	bne.n	80048f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f023 0310 	bic.w	r3, r3, #16
 80048d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048de:	61ba      	str	r2, [r7, #24]
 80048e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6979      	ldr	r1, [r7, #20]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	613b      	str	r3, [r7, #16]
   return(result);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e5      	bne.n	80048be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004900:	bf00      	nop
 8004902:	3754      	adds	r7, #84	@ 0x54
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff fee8 	bl	80046fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b21      	cmp	r3, #33	@ 0x21
 8004944:	d13e      	bne.n	80049c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800494e:	d114      	bne.n	800497a <UART_Transmit_IT+0x48>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d110      	bne.n	800497a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800496c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	1c9a      	adds	r2, r3, #2
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	621a      	str	r2, [r3, #32]
 8004978:	e008      	b.n	800498c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	1c59      	adds	r1, r3, #1
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6211      	str	r1, [r2, #32]
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29b      	uxth	r3, r3
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4619      	mov	r1, r3
 800499a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10f      	bne.n	80049c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e000      	b.n	80049c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049c4:	2302      	movs	r3, #2
  }
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fe79 	bl	80046e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08c      	sub	sp, #48	@ 0x30
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b22      	cmp	r3, #34	@ 0x22
 8004a12:	f040 80ae 	bne.w	8004b72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1e:	d117      	bne.n	8004a50 <UART_Receive_IT+0x50>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d113      	bne.n	8004a50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	1c9a      	adds	r2, r3, #2
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a4e:	e026      	b.n	8004a9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a62:	d007      	beq.n	8004a74 <UART_Receive_IT+0x74>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <UART_Receive_IT+0x82>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e008      	b.n	8004a94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d15d      	bne.n	8004b6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0220 	bic.w	r2, r2, #32
 8004ac0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d135      	bne.n	8004b64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f023 0310 	bic.w	r3, r3, #16
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1e:	623a      	str	r2, [r7, #32]
 8004b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	69f9      	ldr	r1, [r7, #28]
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e5      	bne.n	8004afe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d10a      	bne.n	8004b56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fdd5 	bl	800470c <HAL_UARTEx_RxEventCallback>
 8004b62:	e002      	b.n	8004b6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fb fcfb 	bl	8000560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e002      	b.n	8004b74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3730      	adds	r7, #48	@ 0x30
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004bb6:	f023 030c 	bic.w	r3, r3, #12
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2c      	ldr	r2, [pc, #176]	@ (8004c90 <UART_SetConfig+0x114>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d103      	bne.n	8004bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004be4:	f7fe f88c 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	e002      	b.n	8004bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe f874 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	4a22      	ldr	r2, [pc, #136]	@ (8004c94 <UART_SetConfig+0x118>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	0119      	lsls	r1, r3, #4
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009a      	lsls	r2, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c28:	4b1a      	ldr	r3, [pc, #104]	@ (8004c94 <UART_SetConfig+0x118>)
 8004c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2064      	movs	r0, #100	@ 0x64
 8004c32:	fb00 f303 	mul.w	r3, r0, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	3332      	adds	r3, #50	@ 0x32
 8004c3c:	4a15      	ldr	r2, [pc, #84]	@ (8004c94 <UART_SetConfig+0x118>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c48:	4419      	add	r1, r3
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009a      	lsls	r2, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c60:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <UART_SetConfig+0x118>)
 8004c62:	fba3 0302 	umull	r0, r3, r3, r2
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	2064      	movs	r0, #100	@ 0x64
 8004c6a:	fb00 f303 	mul.w	r3, r0, r3
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	3332      	adds	r3, #50	@ 0x32
 8004c74:	4a07      	ldr	r2, [pc, #28]	@ (8004c94 <UART_SetConfig+0x118>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	440a      	add	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40013800 	.word	0x40013800
 8004c94:	51eb851f 	.word	0x51eb851f

08004c98 <atoi>:
 8004c98:	220a      	movs	r2, #10
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	f000 b91e 	b.w	8004edc <strtol>

08004ca0 <std>:
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8004caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cae:	6083      	str	r3, [r0, #8]
 8004cb0:	8181      	strh	r1, [r0, #12]
 8004cb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cb4:	81c2      	strh	r2, [r0, #14]
 8004cb6:	6183      	str	r3, [r0, #24]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	2208      	movs	r2, #8
 8004cbc:	305c      	adds	r0, #92	@ 0x5c
 8004cbe:	f000 f9a5 	bl	800500c <memset>
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <std+0x58>)
 8004cc4:	6224      	str	r4, [r4, #32]
 8004cc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <std+0x5c>)
 8004cca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <std+0x60>)
 8004cce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <std+0x64>)
 8004cd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <std+0x68>)
 8004cd6:	429c      	cmp	r4, r3
 8004cd8:	d006      	beq.n	8004ce8 <std+0x48>
 8004cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cde:	4294      	cmp	r4, r2
 8004ce0:	d002      	beq.n	8004ce8 <std+0x48>
 8004ce2:	33d0      	adds	r3, #208	@ 0xd0
 8004ce4:	429c      	cmp	r4, r3
 8004ce6:	d105      	bne.n	8004cf4 <std+0x54>
 8004ce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf0:	f000 b9be 	b.w	8005070 <__retarget_lock_init_recursive>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	bf00      	nop
 8004cf8:	080058c1 	.word	0x080058c1
 8004cfc:	080058e3 	.word	0x080058e3
 8004d00:	0800591b 	.word	0x0800591b
 8004d04:	0800593f 	.word	0x0800593f
 8004d08:	20000288 	.word	0x20000288

08004d0c <stdio_exit_handler>:
 8004d0c:	4a02      	ldr	r2, [pc, #8]	@ (8004d18 <stdio_exit_handler+0xc>)
 8004d0e:	4903      	ldr	r1, [pc, #12]	@ (8004d1c <stdio_exit_handler+0x10>)
 8004d10:	4803      	ldr	r0, [pc, #12]	@ (8004d20 <stdio_exit_handler+0x14>)
 8004d12:	f000 b8ed 	b.w	8004ef0 <_fwalk_sglue>
 8004d16:	bf00      	nop
 8004d18:	20000054 	.word	0x20000054
 8004d1c:	08005859 	.word	0x08005859
 8004d20:	20000064 	.word	0x20000064

08004d24 <cleanup_stdio>:
 8004d24:	6841      	ldr	r1, [r0, #4]
 8004d26:	4b0c      	ldr	r3, [pc, #48]	@ (8004d58 <cleanup_stdio+0x34>)
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4299      	cmp	r1, r3
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	d001      	beq.n	8004d34 <cleanup_stdio+0x10>
 8004d30:	f000 fd92 	bl	8005858 <_fflush_r>
 8004d34:	68a1      	ldr	r1, [r4, #8]
 8004d36:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <cleanup_stdio+0x38>)
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	d002      	beq.n	8004d42 <cleanup_stdio+0x1e>
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f000 fd8b 	bl	8005858 <_fflush_r>
 8004d42:	68e1      	ldr	r1, [r4, #12]
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <cleanup_stdio+0x3c>)
 8004d46:	4299      	cmp	r1, r3
 8004d48:	d004      	beq.n	8004d54 <cleanup_stdio+0x30>
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d50:	f000 bd82 	b.w	8005858 <_fflush_r>
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	bf00      	nop
 8004d58:	20000288 	.word	0x20000288
 8004d5c:	200002f0 	.word	0x200002f0
 8004d60:	20000358 	.word	0x20000358

08004d64 <global_stdio_init.part.0>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <global_stdio_init.part.0+0x30>)
 8004d68:	4c0b      	ldr	r4, [pc, #44]	@ (8004d98 <global_stdio_init.part.0+0x34>)
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d9c <global_stdio_init.part.0+0x38>)
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	2104      	movs	r1, #4
 8004d72:	2200      	movs	r2, #0
 8004d74:	f7ff ff94 	bl	8004ca0 <std>
 8004d78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	2109      	movs	r1, #9
 8004d80:	f7ff ff8e 	bl	8004ca0 <std>
 8004d84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d88:	2202      	movs	r2, #2
 8004d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8e:	2112      	movs	r1, #18
 8004d90:	f7ff bf86 	b.w	8004ca0 <std>
 8004d94:	200003c0 	.word	0x200003c0
 8004d98:	20000288 	.word	0x20000288
 8004d9c:	08004d0d 	.word	0x08004d0d

08004da0 <__sfp_lock_acquire>:
 8004da0:	4801      	ldr	r0, [pc, #4]	@ (8004da8 <__sfp_lock_acquire+0x8>)
 8004da2:	f000 b966 	b.w	8005072 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	200003c5 	.word	0x200003c5

08004dac <__sfp_lock_release>:
 8004dac:	4801      	ldr	r0, [pc, #4]	@ (8004db4 <__sfp_lock_release+0x8>)
 8004dae:	f000 b961 	b.w	8005074 <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	200003c5 	.word	0x200003c5

08004db8 <__sinit>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	f7ff fff0 	bl	8004da0 <__sfp_lock_acquire>
 8004dc0:	6a23      	ldr	r3, [r4, #32]
 8004dc2:	b11b      	cbz	r3, 8004dcc <__sinit+0x14>
 8004dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc8:	f7ff bff0 	b.w	8004dac <__sfp_lock_release>
 8004dcc:	4b04      	ldr	r3, [pc, #16]	@ (8004de0 <__sinit+0x28>)
 8004dce:	6223      	str	r3, [r4, #32]
 8004dd0:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <__sinit+0x2c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f5      	bne.n	8004dc4 <__sinit+0xc>
 8004dd8:	f7ff ffc4 	bl	8004d64 <global_stdio_init.part.0>
 8004ddc:	e7f2      	b.n	8004dc4 <__sinit+0xc>
 8004dde:	bf00      	nop
 8004de0:	08004d25 	.word	0x08004d25
 8004de4:	200003c0 	.word	0x200003c0

08004de8 <_strtol_l.isra.0>:
 8004de8:	2b24      	cmp	r3, #36	@ 0x24
 8004dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dee:	4686      	mov	lr, r0
 8004df0:	4690      	mov	r8, r2
 8004df2:	d801      	bhi.n	8004df8 <_strtol_l.isra.0+0x10>
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d106      	bne.n	8004e06 <_strtol_l.isra.0+0x1e>
 8004df8:	f000 f910 	bl	800501c <__errno>
 8004dfc:	2316      	movs	r3, #22
 8004dfe:	6003      	str	r3, [r0, #0]
 8004e00:	2000      	movs	r0, #0
 8004e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e06:	460d      	mov	r5, r1
 8004e08:	4833      	ldr	r0, [pc, #204]	@ (8004ed8 <_strtol_l.isra.0+0xf0>)
 8004e0a:	462a      	mov	r2, r5
 8004e0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e10:	5d06      	ldrb	r6, [r0, r4]
 8004e12:	f016 0608 	ands.w	r6, r6, #8
 8004e16:	d1f8      	bne.n	8004e0a <_strtol_l.isra.0+0x22>
 8004e18:	2c2d      	cmp	r4, #45	@ 0x2d
 8004e1a:	d110      	bne.n	8004e3e <_strtol_l.isra.0+0x56>
 8004e1c:	2601      	movs	r6, #1
 8004e1e:	782c      	ldrb	r4, [r5, #0]
 8004e20:	1c95      	adds	r5, r2, #2
 8004e22:	f033 0210 	bics.w	r2, r3, #16
 8004e26:	d115      	bne.n	8004e54 <_strtol_l.isra.0+0x6c>
 8004e28:	2c30      	cmp	r4, #48	@ 0x30
 8004e2a:	d10d      	bne.n	8004e48 <_strtol_l.isra.0+0x60>
 8004e2c:	782a      	ldrb	r2, [r5, #0]
 8004e2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004e32:	2a58      	cmp	r2, #88	@ 0x58
 8004e34:	d108      	bne.n	8004e48 <_strtol_l.isra.0+0x60>
 8004e36:	786c      	ldrb	r4, [r5, #1]
 8004e38:	3502      	adds	r5, #2
 8004e3a:	2310      	movs	r3, #16
 8004e3c:	e00a      	b.n	8004e54 <_strtol_l.isra.0+0x6c>
 8004e3e:	2c2b      	cmp	r4, #43	@ 0x2b
 8004e40:	bf04      	itt	eq
 8004e42:	782c      	ldrbeq	r4, [r5, #0]
 8004e44:	1c95      	addeq	r5, r2, #2
 8004e46:	e7ec      	b.n	8004e22 <_strtol_l.isra.0+0x3a>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f6      	bne.n	8004e3a <_strtol_l.isra.0+0x52>
 8004e4c:	2c30      	cmp	r4, #48	@ 0x30
 8004e4e:	bf14      	ite	ne
 8004e50:	230a      	movne	r3, #10
 8004e52:	2308      	moveq	r3, #8
 8004e54:	2200      	movs	r2, #0
 8004e56:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004e5a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004e5e:	fbbc f9f3 	udiv	r9, ip, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	fb03 ca19 	mls	sl, r3, r9, ip
 8004e68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004e6c:	2f09      	cmp	r7, #9
 8004e6e:	d80f      	bhi.n	8004e90 <_strtol_l.isra.0+0xa8>
 8004e70:	463c      	mov	r4, r7
 8004e72:	42a3      	cmp	r3, r4
 8004e74:	dd1b      	ble.n	8004eae <_strtol_l.isra.0+0xc6>
 8004e76:	1c57      	adds	r7, r2, #1
 8004e78:	d007      	beq.n	8004e8a <_strtol_l.isra.0+0xa2>
 8004e7a:	4581      	cmp	r9, r0
 8004e7c:	d314      	bcc.n	8004ea8 <_strtol_l.isra.0+0xc0>
 8004e7e:	d101      	bne.n	8004e84 <_strtol_l.isra.0+0x9c>
 8004e80:	45a2      	cmp	sl, r4
 8004e82:	db11      	blt.n	8004ea8 <_strtol_l.isra.0+0xc0>
 8004e84:	2201      	movs	r2, #1
 8004e86:	fb00 4003 	mla	r0, r0, r3, r4
 8004e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e8e:	e7eb      	b.n	8004e68 <_strtol_l.isra.0+0x80>
 8004e90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004e94:	2f19      	cmp	r7, #25
 8004e96:	d801      	bhi.n	8004e9c <_strtol_l.isra.0+0xb4>
 8004e98:	3c37      	subs	r4, #55	@ 0x37
 8004e9a:	e7ea      	b.n	8004e72 <_strtol_l.isra.0+0x8a>
 8004e9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004ea0:	2f19      	cmp	r7, #25
 8004ea2:	d804      	bhi.n	8004eae <_strtol_l.isra.0+0xc6>
 8004ea4:	3c57      	subs	r4, #87	@ 0x57
 8004ea6:	e7e4      	b.n	8004e72 <_strtol_l.isra.0+0x8a>
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004eac:	e7ed      	b.n	8004e8a <_strtol_l.isra.0+0xa2>
 8004eae:	1c53      	adds	r3, r2, #1
 8004eb0:	d108      	bne.n	8004ec4 <_strtol_l.isra.0+0xdc>
 8004eb2:	2322      	movs	r3, #34	@ 0x22
 8004eb4:	4660      	mov	r0, ip
 8004eb6:	f8ce 3000 	str.w	r3, [lr]
 8004eba:	f1b8 0f00 	cmp.w	r8, #0
 8004ebe:	d0a0      	beq.n	8004e02 <_strtol_l.isra.0+0x1a>
 8004ec0:	1e69      	subs	r1, r5, #1
 8004ec2:	e006      	b.n	8004ed2 <_strtol_l.isra.0+0xea>
 8004ec4:	b106      	cbz	r6, 8004ec8 <_strtol_l.isra.0+0xe0>
 8004ec6:	4240      	negs	r0, r0
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	d099      	beq.n	8004e02 <_strtol_l.isra.0+0x1a>
 8004ece:	2a00      	cmp	r2, #0
 8004ed0:	d1f6      	bne.n	8004ec0 <_strtol_l.isra.0+0xd8>
 8004ed2:	f8c8 1000 	str.w	r1, [r8]
 8004ed6:	e794      	b.n	8004e02 <_strtol_l.isra.0+0x1a>
 8004ed8:	08005dc3 	.word	0x08005dc3

08004edc <strtol>:
 8004edc:	4613      	mov	r3, r2
 8004ede:	460a      	mov	r2, r1
 8004ee0:	4601      	mov	r1, r0
 8004ee2:	4802      	ldr	r0, [pc, #8]	@ (8004eec <strtol+0x10>)
 8004ee4:	6800      	ldr	r0, [r0, #0]
 8004ee6:	f7ff bf7f 	b.w	8004de8 <_strtol_l.isra.0>
 8004eea:	bf00      	nop
 8004eec:	20000060 	.word	0x20000060

08004ef0 <_fwalk_sglue>:
 8004ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	4688      	mov	r8, r1
 8004ef8:	4614      	mov	r4, r2
 8004efa:	2600      	movs	r6, #0
 8004efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f00:	f1b9 0901 	subs.w	r9, r9, #1
 8004f04:	d505      	bpl.n	8004f12 <_fwalk_sglue+0x22>
 8004f06:	6824      	ldr	r4, [r4, #0]
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	d1f7      	bne.n	8004efc <_fwalk_sglue+0xc>
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d907      	bls.n	8004f28 <_fwalk_sglue+0x38>
 8004f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	d003      	beq.n	8004f28 <_fwalk_sglue+0x38>
 8004f20:	4629      	mov	r1, r5
 8004f22:	4638      	mov	r0, r7
 8004f24:	47c0      	blx	r8
 8004f26:	4306      	orrs	r6, r0
 8004f28:	3568      	adds	r5, #104	@ 0x68
 8004f2a:	e7e9      	b.n	8004f00 <_fwalk_sglue+0x10>

08004f2c <iprintf>:
 8004f2c:	b40f      	push	{r0, r1, r2, r3}
 8004f2e:	b507      	push	{r0, r1, r2, lr}
 8004f30:	4906      	ldr	r1, [pc, #24]	@ (8004f4c <iprintf+0x20>)
 8004f32:	ab04      	add	r3, sp, #16
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3a:	6881      	ldr	r1, [r0, #8]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f000 f8c1 	bl	80050c4 <_vfiprintf_r>
 8004f42:	b003      	add	sp, #12
 8004f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f48:	b004      	add	sp, #16
 8004f4a:	4770      	bx	lr
 8004f4c:	20000060 	.word	0x20000060

08004f50 <_puts_r>:
 8004f50:	6a03      	ldr	r3, [r0, #32]
 8004f52:	b570      	push	{r4, r5, r6, lr}
 8004f54:	4605      	mov	r5, r0
 8004f56:	460e      	mov	r6, r1
 8004f58:	6884      	ldr	r4, [r0, #8]
 8004f5a:	b90b      	cbnz	r3, 8004f60 <_puts_r+0x10>
 8004f5c:	f7ff ff2c 	bl	8004db8 <__sinit>
 8004f60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f62:	07db      	lsls	r3, r3, #31
 8004f64:	d405      	bmi.n	8004f72 <_puts_r+0x22>
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	0598      	lsls	r0, r3, #22
 8004f6a:	d402      	bmi.n	8004f72 <_puts_r+0x22>
 8004f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f6e:	f000 f880 	bl	8005072 <__retarget_lock_acquire_recursive>
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	0719      	lsls	r1, r3, #28
 8004f76:	d502      	bpl.n	8004f7e <_puts_r+0x2e>
 8004f78:	6923      	ldr	r3, [r4, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d135      	bne.n	8004fea <_puts_r+0x9a>
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 fd1f 	bl	80059c4 <__swsetup_r>
 8004f86:	b380      	cbz	r0, 8004fea <_puts_r+0x9a>
 8004f88:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004f8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f8e:	07da      	lsls	r2, r3, #31
 8004f90:	d405      	bmi.n	8004f9e <_puts_r+0x4e>
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	059b      	lsls	r3, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_puts_r+0x4e>
 8004f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f9a:	f000 f86b 	bl	8005074 <__retarget_lock_release_recursive>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	da04      	bge.n	8004fb0 <_puts_r+0x60>
 8004fa6:	69a2      	ldr	r2, [r4, #24]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	dc17      	bgt.n	8004fdc <_puts_r+0x8c>
 8004fac:	290a      	cmp	r1, #10
 8004fae:	d015      	beq.n	8004fdc <_puts_r+0x8c>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	6022      	str	r2, [r4, #0]
 8004fb6:	7019      	strb	r1, [r3, #0]
 8004fb8:	68a3      	ldr	r3, [r4, #8]
 8004fba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	60a3      	str	r3, [r4, #8]
 8004fc2:	2900      	cmp	r1, #0
 8004fc4:	d1ed      	bne.n	8004fa2 <_puts_r+0x52>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da11      	bge.n	8004fee <_puts_r+0x9e>
 8004fca:	4622      	mov	r2, r4
 8004fcc:	210a      	movs	r1, #10
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 fcb9 	bl	8005946 <__swbuf_r>
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d0d7      	beq.n	8004f88 <_puts_r+0x38>
 8004fd8:	250a      	movs	r5, #10
 8004fda:	e7d7      	b.n	8004f8c <_puts_r+0x3c>
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 fcb1 	bl	8005946 <__swbuf_r>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d1e7      	bne.n	8004fb8 <_puts_r+0x68>
 8004fe8:	e7ce      	b.n	8004f88 <_puts_r+0x38>
 8004fea:	3e01      	subs	r6, #1
 8004fec:	e7e4      	b.n	8004fb8 <_puts_r+0x68>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	6022      	str	r2, [r4, #0]
 8004ff4:	220a      	movs	r2, #10
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e7ee      	b.n	8004fd8 <_puts_r+0x88>
	...

08004ffc <puts>:
 8004ffc:	4b02      	ldr	r3, [pc, #8]	@ (8005008 <puts+0xc>)
 8004ffe:	4601      	mov	r1, r0
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	f7ff bfa5 	b.w	8004f50 <_puts_r>
 8005006:	bf00      	nop
 8005008:	20000060 	.word	0x20000060

0800500c <memset>:
 800500c:	4603      	mov	r3, r0
 800500e:	4402      	add	r2, r0
 8005010:	4293      	cmp	r3, r2
 8005012:	d100      	bne.n	8005016 <memset+0xa>
 8005014:	4770      	bx	lr
 8005016:	f803 1b01 	strb.w	r1, [r3], #1
 800501a:	e7f9      	b.n	8005010 <memset+0x4>

0800501c <__errno>:
 800501c:	4b01      	ldr	r3, [pc, #4]	@ (8005024 <__errno+0x8>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000060 	.word	0x20000060

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	2600      	movs	r6, #0
 800502c:	4d0c      	ldr	r5, [pc, #48]	@ (8005060 <__libc_init_array+0x38>)
 800502e:	4c0d      	ldr	r4, [pc, #52]	@ (8005064 <__libc_init_array+0x3c>)
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	f000 fe4a 	bl	8005cd0 <_init>
 800503c:	2600      	movs	r6, #0
 800503e:	4d0a      	ldr	r5, [pc, #40]	@ (8005068 <__libc_init_array+0x40>)
 8005040:	4c0a      	ldr	r4, [pc, #40]	@ (800506c <__libc_init_array+0x44>)
 8005042:	1b64      	subs	r4, r4, r5
 8005044:	10a4      	asrs	r4, r4, #2
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f855 3b04 	ldr.w	r3, [r5], #4
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	08005f00 	.word	0x08005f00
 8005064:	08005f00 	.word	0x08005f00
 8005068:	08005f00 	.word	0x08005f00
 800506c:	08005f04 	.word	0x08005f04

08005070 <__retarget_lock_init_recursive>:
 8005070:	4770      	bx	lr

08005072 <__retarget_lock_acquire_recursive>:
 8005072:	4770      	bx	lr

08005074 <__retarget_lock_release_recursive>:
 8005074:	4770      	bx	lr

08005076 <__sfputc_r>:
 8005076:	6893      	ldr	r3, [r2, #8]
 8005078:	b410      	push	{r4}
 800507a:	3b01      	subs	r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	6093      	str	r3, [r2, #8]
 8005080:	da07      	bge.n	8005092 <__sfputc_r+0x1c>
 8005082:	6994      	ldr	r4, [r2, #24]
 8005084:	42a3      	cmp	r3, r4
 8005086:	db01      	blt.n	800508c <__sfputc_r+0x16>
 8005088:	290a      	cmp	r1, #10
 800508a:	d102      	bne.n	8005092 <__sfputc_r+0x1c>
 800508c:	bc10      	pop	{r4}
 800508e:	f000 bc5a 	b.w	8005946 <__swbuf_r>
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	1c58      	adds	r0, r3, #1
 8005096:	6010      	str	r0, [r2, #0]
 8005098:	7019      	strb	r1, [r3, #0]
 800509a:	4608      	mov	r0, r1
 800509c:	bc10      	pop	{r4}
 800509e:	4770      	bx	lr

080050a0 <__sfputs_r>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	4606      	mov	r6, r0
 80050a4:	460f      	mov	r7, r1
 80050a6:	4614      	mov	r4, r2
 80050a8:	18d5      	adds	r5, r2, r3
 80050aa:	42ac      	cmp	r4, r5
 80050ac:	d101      	bne.n	80050b2 <__sfputs_r+0x12>
 80050ae:	2000      	movs	r0, #0
 80050b0:	e007      	b.n	80050c2 <__sfputs_r+0x22>
 80050b2:	463a      	mov	r2, r7
 80050b4:	4630      	mov	r0, r6
 80050b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ba:	f7ff ffdc 	bl	8005076 <__sfputc_r>
 80050be:	1c43      	adds	r3, r0, #1
 80050c0:	d1f3      	bne.n	80050aa <__sfputs_r+0xa>
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050c4 <_vfiprintf_r>:
 80050c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c8:	460d      	mov	r5, r1
 80050ca:	4614      	mov	r4, r2
 80050cc:	4698      	mov	r8, r3
 80050ce:	4606      	mov	r6, r0
 80050d0:	b09d      	sub	sp, #116	@ 0x74
 80050d2:	b118      	cbz	r0, 80050dc <_vfiprintf_r+0x18>
 80050d4:	6a03      	ldr	r3, [r0, #32]
 80050d6:	b90b      	cbnz	r3, 80050dc <_vfiprintf_r+0x18>
 80050d8:	f7ff fe6e 	bl	8004db8 <__sinit>
 80050dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050de:	07d9      	lsls	r1, r3, #31
 80050e0:	d405      	bmi.n	80050ee <_vfiprintf_r+0x2a>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	059a      	lsls	r2, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_vfiprintf_r+0x2a>
 80050e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050ea:	f7ff ffc2 	bl	8005072 <__retarget_lock_acquire_recursive>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	071b      	lsls	r3, r3, #28
 80050f2:	d501      	bpl.n	80050f8 <_vfiprintf_r+0x34>
 80050f4:	692b      	ldr	r3, [r5, #16]
 80050f6:	b99b      	cbnz	r3, 8005120 <_vfiprintf_r+0x5c>
 80050f8:	4629      	mov	r1, r5
 80050fa:	4630      	mov	r0, r6
 80050fc:	f000 fc62 	bl	80059c4 <__swsetup_r>
 8005100:	b170      	cbz	r0, 8005120 <_vfiprintf_r+0x5c>
 8005102:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005104:	07dc      	lsls	r4, r3, #31
 8005106:	d504      	bpl.n	8005112 <_vfiprintf_r+0x4e>
 8005108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800510c:	b01d      	add	sp, #116	@ 0x74
 800510e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	0598      	lsls	r0, r3, #22
 8005116:	d4f7      	bmi.n	8005108 <_vfiprintf_r+0x44>
 8005118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800511a:	f7ff ffab 	bl	8005074 <__retarget_lock_release_recursive>
 800511e:	e7f3      	b.n	8005108 <_vfiprintf_r+0x44>
 8005120:	2300      	movs	r3, #0
 8005122:	9309      	str	r3, [sp, #36]	@ 0x24
 8005124:	2320      	movs	r3, #32
 8005126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800512a:	2330      	movs	r3, #48	@ 0x30
 800512c:	f04f 0901 	mov.w	r9, #1
 8005130:	f8cd 800c 	str.w	r8, [sp, #12]
 8005134:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80052e0 <_vfiprintf_r+0x21c>
 8005138:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800513c:	4623      	mov	r3, r4
 800513e:	469a      	mov	sl, r3
 8005140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005144:	b10a      	cbz	r2, 800514a <_vfiprintf_r+0x86>
 8005146:	2a25      	cmp	r2, #37	@ 0x25
 8005148:	d1f9      	bne.n	800513e <_vfiprintf_r+0x7a>
 800514a:	ebba 0b04 	subs.w	fp, sl, r4
 800514e:	d00b      	beq.n	8005168 <_vfiprintf_r+0xa4>
 8005150:	465b      	mov	r3, fp
 8005152:	4622      	mov	r2, r4
 8005154:	4629      	mov	r1, r5
 8005156:	4630      	mov	r0, r6
 8005158:	f7ff ffa2 	bl	80050a0 <__sfputs_r>
 800515c:	3001      	adds	r0, #1
 800515e:	f000 80a7 	beq.w	80052b0 <_vfiprintf_r+0x1ec>
 8005162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005164:	445a      	add	r2, fp
 8005166:	9209      	str	r2, [sp, #36]	@ 0x24
 8005168:	f89a 3000 	ldrb.w	r3, [sl]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 809f 	beq.w	80052b0 <_vfiprintf_r+0x1ec>
 8005172:	2300      	movs	r3, #0
 8005174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800517c:	f10a 0a01 	add.w	sl, sl, #1
 8005180:	9304      	str	r3, [sp, #16]
 8005182:	9307      	str	r3, [sp, #28]
 8005184:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005188:	931a      	str	r3, [sp, #104]	@ 0x68
 800518a:	4654      	mov	r4, sl
 800518c:	2205      	movs	r2, #5
 800518e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005192:	4853      	ldr	r0, [pc, #332]	@ (80052e0 <_vfiprintf_r+0x21c>)
 8005194:	f000 fd46 	bl	8005c24 <memchr>
 8005198:	9a04      	ldr	r2, [sp, #16]
 800519a:	b9d8      	cbnz	r0, 80051d4 <_vfiprintf_r+0x110>
 800519c:	06d1      	lsls	r1, r2, #27
 800519e:	bf44      	itt	mi
 80051a0:	2320      	movmi	r3, #32
 80051a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051a6:	0713      	lsls	r3, r2, #28
 80051a8:	bf44      	itt	mi
 80051aa:	232b      	movmi	r3, #43	@ 0x2b
 80051ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051b0:	f89a 3000 	ldrb.w	r3, [sl]
 80051b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b6:	d015      	beq.n	80051e4 <_vfiprintf_r+0x120>
 80051b8:	4654      	mov	r4, sl
 80051ba:	2000      	movs	r0, #0
 80051bc:	f04f 0c0a 	mov.w	ip, #10
 80051c0:	9a07      	ldr	r2, [sp, #28]
 80051c2:	4621      	mov	r1, r4
 80051c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051c8:	3b30      	subs	r3, #48	@ 0x30
 80051ca:	2b09      	cmp	r3, #9
 80051cc:	d94b      	bls.n	8005266 <_vfiprintf_r+0x1a2>
 80051ce:	b1b0      	cbz	r0, 80051fe <_vfiprintf_r+0x13a>
 80051d0:	9207      	str	r2, [sp, #28]
 80051d2:	e014      	b.n	80051fe <_vfiprintf_r+0x13a>
 80051d4:	eba0 0308 	sub.w	r3, r0, r8
 80051d8:	fa09 f303 	lsl.w	r3, r9, r3
 80051dc:	4313      	orrs	r3, r2
 80051de:	46a2      	mov	sl, r4
 80051e0:	9304      	str	r3, [sp, #16]
 80051e2:	e7d2      	b.n	800518a <_vfiprintf_r+0xc6>
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	1d19      	adds	r1, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	9103      	str	r1, [sp, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bfbb      	ittet	lt
 80051f0:	425b      	neglt	r3, r3
 80051f2:	f042 0202 	orrlt.w	r2, r2, #2
 80051f6:	9307      	strge	r3, [sp, #28]
 80051f8:	9307      	strlt	r3, [sp, #28]
 80051fa:	bfb8      	it	lt
 80051fc:	9204      	strlt	r2, [sp, #16]
 80051fe:	7823      	ldrb	r3, [r4, #0]
 8005200:	2b2e      	cmp	r3, #46	@ 0x2e
 8005202:	d10a      	bne.n	800521a <_vfiprintf_r+0x156>
 8005204:	7863      	ldrb	r3, [r4, #1]
 8005206:	2b2a      	cmp	r3, #42	@ 0x2a
 8005208:	d132      	bne.n	8005270 <_vfiprintf_r+0x1ac>
 800520a:	9b03      	ldr	r3, [sp, #12]
 800520c:	3402      	adds	r4, #2
 800520e:	1d1a      	adds	r2, r3, #4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	9203      	str	r2, [sp, #12]
 8005214:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005218:	9305      	str	r3, [sp, #20]
 800521a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80052e4 <_vfiprintf_r+0x220>
 800521e:	2203      	movs	r2, #3
 8005220:	4650      	mov	r0, sl
 8005222:	7821      	ldrb	r1, [r4, #0]
 8005224:	f000 fcfe 	bl	8005c24 <memchr>
 8005228:	b138      	cbz	r0, 800523a <_vfiprintf_r+0x176>
 800522a:	2240      	movs	r2, #64	@ 0x40
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	eba0 000a 	sub.w	r0, r0, sl
 8005232:	4082      	lsls	r2, r0
 8005234:	4313      	orrs	r3, r2
 8005236:	3401      	adds	r4, #1
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800523e:	2206      	movs	r2, #6
 8005240:	4829      	ldr	r0, [pc, #164]	@ (80052e8 <_vfiprintf_r+0x224>)
 8005242:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005246:	f000 fced 	bl	8005c24 <memchr>
 800524a:	2800      	cmp	r0, #0
 800524c:	d03f      	beq.n	80052ce <_vfiprintf_r+0x20a>
 800524e:	4b27      	ldr	r3, [pc, #156]	@ (80052ec <_vfiprintf_r+0x228>)
 8005250:	bb1b      	cbnz	r3, 800529a <_vfiprintf_r+0x1d6>
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	3307      	adds	r3, #7
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	3308      	adds	r3, #8
 800525c:	9303      	str	r3, [sp, #12]
 800525e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005260:	443b      	add	r3, r7
 8005262:	9309      	str	r3, [sp, #36]	@ 0x24
 8005264:	e76a      	b.n	800513c <_vfiprintf_r+0x78>
 8005266:	460c      	mov	r4, r1
 8005268:	2001      	movs	r0, #1
 800526a:	fb0c 3202 	mla	r2, ip, r2, r3
 800526e:	e7a8      	b.n	80051c2 <_vfiprintf_r+0xfe>
 8005270:	2300      	movs	r3, #0
 8005272:	f04f 0c0a 	mov.w	ip, #10
 8005276:	4619      	mov	r1, r3
 8005278:	3401      	adds	r4, #1
 800527a:	9305      	str	r3, [sp, #20]
 800527c:	4620      	mov	r0, r4
 800527e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005282:	3a30      	subs	r2, #48	@ 0x30
 8005284:	2a09      	cmp	r2, #9
 8005286:	d903      	bls.n	8005290 <_vfiprintf_r+0x1cc>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0c6      	beq.n	800521a <_vfiprintf_r+0x156>
 800528c:	9105      	str	r1, [sp, #20]
 800528e:	e7c4      	b.n	800521a <_vfiprintf_r+0x156>
 8005290:	4604      	mov	r4, r0
 8005292:	2301      	movs	r3, #1
 8005294:	fb0c 2101 	mla	r1, ip, r1, r2
 8005298:	e7f0      	b.n	800527c <_vfiprintf_r+0x1b8>
 800529a:	ab03      	add	r3, sp, #12
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	462a      	mov	r2, r5
 80052a0:	4630      	mov	r0, r6
 80052a2:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <_vfiprintf_r+0x22c>)
 80052a4:	a904      	add	r1, sp, #16
 80052a6:	f3af 8000 	nop.w
 80052aa:	4607      	mov	r7, r0
 80052ac:	1c78      	adds	r0, r7, #1
 80052ae:	d1d6      	bne.n	800525e <_vfiprintf_r+0x19a>
 80052b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052b2:	07d9      	lsls	r1, r3, #31
 80052b4:	d405      	bmi.n	80052c2 <_vfiprintf_r+0x1fe>
 80052b6:	89ab      	ldrh	r3, [r5, #12]
 80052b8:	059a      	lsls	r2, r3, #22
 80052ba:	d402      	bmi.n	80052c2 <_vfiprintf_r+0x1fe>
 80052bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052be:	f7ff fed9 	bl	8005074 <__retarget_lock_release_recursive>
 80052c2:	89ab      	ldrh	r3, [r5, #12]
 80052c4:	065b      	lsls	r3, r3, #25
 80052c6:	f53f af1f 	bmi.w	8005108 <_vfiprintf_r+0x44>
 80052ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052cc:	e71e      	b.n	800510c <_vfiprintf_r+0x48>
 80052ce:	ab03      	add	r3, sp, #12
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	462a      	mov	r2, r5
 80052d4:	4630      	mov	r0, r6
 80052d6:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <_vfiprintf_r+0x22c>)
 80052d8:	a904      	add	r1, sp, #16
 80052da:	f000 f91f 	bl	800551c <_printf_i>
 80052de:	e7e4      	b.n	80052aa <_vfiprintf_r+0x1e6>
 80052e0:	08005ec3 	.word	0x08005ec3
 80052e4:	08005ec9 	.word	0x08005ec9
 80052e8:	08005ecd 	.word	0x08005ecd
 80052ec:	00000000 	.word	0x00000000
 80052f0:	080050a1 	.word	0x080050a1

080052f4 <sbrk_aligned>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005334 <sbrk_aligned+0x40>)
 80052f8:	460c      	mov	r4, r1
 80052fa:	6831      	ldr	r1, [r6, #0]
 80052fc:	4605      	mov	r5, r0
 80052fe:	b911      	cbnz	r1, 8005306 <sbrk_aligned+0x12>
 8005300:	f000 fc4c 	bl	8005b9c <_sbrk_r>
 8005304:	6030      	str	r0, [r6, #0]
 8005306:	4621      	mov	r1, r4
 8005308:	4628      	mov	r0, r5
 800530a:	f000 fc47 	bl	8005b9c <_sbrk_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d103      	bne.n	800531a <sbrk_aligned+0x26>
 8005312:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005316:	4620      	mov	r0, r4
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	1cc4      	adds	r4, r0, #3
 800531c:	f024 0403 	bic.w	r4, r4, #3
 8005320:	42a0      	cmp	r0, r4
 8005322:	d0f8      	beq.n	8005316 <sbrk_aligned+0x22>
 8005324:	1a21      	subs	r1, r4, r0
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fc38 	bl	8005b9c <_sbrk_r>
 800532c:	3001      	adds	r0, #1
 800532e:	d1f2      	bne.n	8005316 <sbrk_aligned+0x22>
 8005330:	e7ef      	b.n	8005312 <sbrk_aligned+0x1e>
 8005332:	bf00      	nop
 8005334:	200003c8 	.word	0x200003c8

08005338 <_malloc_r>:
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	1ccd      	adds	r5, r1, #3
 800533e:	f025 0503 	bic.w	r5, r5, #3
 8005342:	3508      	adds	r5, #8
 8005344:	2d0c      	cmp	r5, #12
 8005346:	bf38      	it	cc
 8005348:	250c      	movcc	r5, #12
 800534a:	2d00      	cmp	r5, #0
 800534c:	4606      	mov	r6, r0
 800534e:	db01      	blt.n	8005354 <_malloc_r+0x1c>
 8005350:	42a9      	cmp	r1, r5
 8005352:	d904      	bls.n	800535e <_malloc_r+0x26>
 8005354:	230c      	movs	r3, #12
 8005356:	6033      	str	r3, [r6, #0]
 8005358:	2000      	movs	r0, #0
 800535a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005434 <_malloc_r+0xfc>
 8005362:	f000 faa1 	bl	80058a8 <__malloc_lock>
 8005366:	f8d8 3000 	ldr.w	r3, [r8]
 800536a:	461c      	mov	r4, r3
 800536c:	bb44      	cbnz	r4, 80053c0 <_malloc_r+0x88>
 800536e:	4629      	mov	r1, r5
 8005370:	4630      	mov	r0, r6
 8005372:	f7ff ffbf 	bl	80052f4 <sbrk_aligned>
 8005376:	1c43      	adds	r3, r0, #1
 8005378:	4604      	mov	r4, r0
 800537a:	d158      	bne.n	800542e <_malloc_r+0xf6>
 800537c:	f8d8 4000 	ldr.w	r4, [r8]
 8005380:	4627      	mov	r7, r4
 8005382:	2f00      	cmp	r7, #0
 8005384:	d143      	bne.n	800540e <_malloc_r+0xd6>
 8005386:	2c00      	cmp	r4, #0
 8005388:	d04b      	beq.n	8005422 <_malloc_r+0xea>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	eb04 0903 	add.w	r9, r4, r3
 8005394:	f000 fc02 	bl	8005b9c <_sbrk_r>
 8005398:	4581      	cmp	r9, r0
 800539a:	d142      	bne.n	8005422 <_malloc_r+0xea>
 800539c:	6821      	ldr	r1, [r4, #0]
 800539e:	4630      	mov	r0, r6
 80053a0:	1a6d      	subs	r5, r5, r1
 80053a2:	4629      	mov	r1, r5
 80053a4:	f7ff ffa6 	bl	80052f4 <sbrk_aligned>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d03a      	beq.n	8005422 <_malloc_r+0xea>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	442b      	add	r3, r5
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	f8d8 3000 	ldr.w	r3, [r8]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	bb62      	cbnz	r2, 8005414 <_malloc_r+0xdc>
 80053ba:	f8c8 7000 	str.w	r7, [r8]
 80053be:	e00f      	b.n	80053e0 <_malloc_r+0xa8>
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	1b52      	subs	r2, r2, r5
 80053c4:	d420      	bmi.n	8005408 <_malloc_r+0xd0>
 80053c6:	2a0b      	cmp	r2, #11
 80053c8:	d917      	bls.n	80053fa <_malloc_r+0xc2>
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	bf18      	it	ne
 80053d2:	6059      	strne	r1, [r3, #4]
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	bf08      	it	eq
 80053d8:	f8c8 1000 	streq.w	r1, [r8]
 80053dc:	5162      	str	r2, [r4, r5]
 80053de:	604b      	str	r3, [r1, #4]
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 fa67 	bl	80058b4 <__malloc_unlock>
 80053e6:	f104 000b 	add.w	r0, r4, #11
 80053ea:	1d23      	adds	r3, r4, #4
 80053ec:	f020 0007 	bic.w	r0, r0, #7
 80053f0:	1ac2      	subs	r2, r0, r3
 80053f2:	bf1c      	itt	ne
 80053f4:	1a1b      	subne	r3, r3, r0
 80053f6:	50a3      	strne	r3, [r4, r2]
 80053f8:	e7af      	b.n	800535a <_malloc_r+0x22>
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	bf0c      	ite	eq
 8005400:	f8c8 2000 	streq.w	r2, [r8]
 8005404:	605a      	strne	r2, [r3, #4]
 8005406:	e7eb      	b.n	80053e0 <_malloc_r+0xa8>
 8005408:	4623      	mov	r3, r4
 800540a:	6864      	ldr	r4, [r4, #4]
 800540c:	e7ae      	b.n	800536c <_malloc_r+0x34>
 800540e:	463c      	mov	r4, r7
 8005410:	687f      	ldr	r7, [r7, #4]
 8005412:	e7b6      	b.n	8005382 <_malloc_r+0x4a>
 8005414:	461a      	mov	r2, r3
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	42a3      	cmp	r3, r4
 800541a:	d1fb      	bne.n	8005414 <_malloc_r+0xdc>
 800541c:	2300      	movs	r3, #0
 800541e:	6053      	str	r3, [r2, #4]
 8005420:	e7de      	b.n	80053e0 <_malloc_r+0xa8>
 8005422:	230c      	movs	r3, #12
 8005424:	4630      	mov	r0, r6
 8005426:	6033      	str	r3, [r6, #0]
 8005428:	f000 fa44 	bl	80058b4 <__malloc_unlock>
 800542c:	e794      	b.n	8005358 <_malloc_r+0x20>
 800542e:	6005      	str	r5, [r0, #0]
 8005430:	e7d6      	b.n	80053e0 <_malloc_r+0xa8>
 8005432:	bf00      	nop
 8005434:	200003cc 	.word	0x200003cc

08005438 <_printf_common>:
 8005438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	4616      	mov	r6, r2
 800543e:	4698      	mov	r8, r3
 8005440:	688a      	ldr	r2, [r1, #8]
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	4607      	mov	r7, r0
 8005446:	4293      	cmp	r3, r2
 8005448:	bfb8      	it	lt
 800544a:	4613      	movlt	r3, r2
 800544c:	6033      	str	r3, [r6, #0]
 800544e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005452:	460c      	mov	r4, r1
 8005454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005458:	b10a      	cbz	r2, 800545e <_printf_common+0x26>
 800545a:	3301      	adds	r3, #1
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	0699      	lsls	r1, r3, #26
 8005462:	bf42      	ittt	mi
 8005464:	6833      	ldrmi	r3, [r6, #0]
 8005466:	3302      	addmi	r3, #2
 8005468:	6033      	strmi	r3, [r6, #0]
 800546a:	6825      	ldr	r5, [r4, #0]
 800546c:	f015 0506 	ands.w	r5, r5, #6
 8005470:	d106      	bne.n	8005480 <_printf_common+0x48>
 8005472:	f104 0a19 	add.w	sl, r4, #25
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	6832      	ldr	r2, [r6, #0]
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	42ab      	cmp	r3, r5
 800547e:	dc2b      	bgt.n	80054d8 <_printf_common+0xa0>
 8005480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	3b00      	subs	r3, #0
 8005488:	bf18      	it	ne
 800548a:	2301      	movne	r3, #1
 800548c:	0692      	lsls	r2, r2, #26
 800548e:	d430      	bmi.n	80054f2 <_printf_common+0xba>
 8005490:	4641      	mov	r1, r8
 8005492:	4638      	mov	r0, r7
 8005494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005498:	47c8      	blx	r9
 800549a:	3001      	adds	r0, #1
 800549c:	d023      	beq.n	80054e6 <_printf_common+0xae>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	6922      	ldr	r2, [r4, #16]
 80054a2:	f003 0306 	and.w	r3, r3, #6
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	bf14      	ite	ne
 80054aa:	2500      	movne	r5, #0
 80054ac:	6833      	ldreq	r3, [r6, #0]
 80054ae:	f04f 0600 	mov.w	r6, #0
 80054b2:	bf08      	it	eq
 80054b4:	68e5      	ldreq	r5, [r4, #12]
 80054b6:	f104 041a 	add.w	r4, r4, #26
 80054ba:	bf08      	it	eq
 80054bc:	1aed      	subeq	r5, r5, r3
 80054be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80054c2:	bf08      	it	eq
 80054c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c8:	4293      	cmp	r3, r2
 80054ca:	bfc4      	itt	gt
 80054cc:	1a9b      	subgt	r3, r3, r2
 80054ce:	18ed      	addgt	r5, r5, r3
 80054d0:	42b5      	cmp	r5, r6
 80054d2:	d11a      	bne.n	800550a <_printf_common+0xd2>
 80054d4:	2000      	movs	r0, #0
 80054d6:	e008      	b.n	80054ea <_printf_common+0xb2>
 80054d8:	2301      	movs	r3, #1
 80054da:	4652      	mov	r2, sl
 80054dc:	4641      	mov	r1, r8
 80054de:	4638      	mov	r0, r7
 80054e0:	47c8      	blx	r9
 80054e2:	3001      	adds	r0, #1
 80054e4:	d103      	bne.n	80054ee <_printf_common+0xb6>
 80054e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ee:	3501      	adds	r5, #1
 80054f0:	e7c1      	b.n	8005476 <_printf_common+0x3e>
 80054f2:	2030      	movs	r0, #48	@ 0x30
 80054f4:	18e1      	adds	r1, r4, r3
 80054f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005500:	4422      	add	r2, r4
 8005502:	3302      	adds	r3, #2
 8005504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005508:	e7c2      	b.n	8005490 <_printf_common+0x58>
 800550a:	2301      	movs	r3, #1
 800550c:	4622      	mov	r2, r4
 800550e:	4641      	mov	r1, r8
 8005510:	4638      	mov	r0, r7
 8005512:	47c8      	blx	r9
 8005514:	3001      	adds	r0, #1
 8005516:	d0e6      	beq.n	80054e6 <_printf_common+0xae>
 8005518:	3601      	adds	r6, #1
 800551a:	e7d9      	b.n	80054d0 <_printf_common+0x98>

0800551c <_printf_i>:
 800551c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005520:	7e0f      	ldrb	r7, [r1, #24]
 8005522:	4691      	mov	r9, r2
 8005524:	2f78      	cmp	r7, #120	@ 0x78
 8005526:	4680      	mov	r8, r0
 8005528:	460c      	mov	r4, r1
 800552a:	469a      	mov	sl, r3
 800552c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800552e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005532:	d807      	bhi.n	8005544 <_printf_i+0x28>
 8005534:	2f62      	cmp	r7, #98	@ 0x62
 8005536:	d80a      	bhi.n	800554e <_printf_i+0x32>
 8005538:	2f00      	cmp	r7, #0
 800553a:	f000 80d1 	beq.w	80056e0 <_printf_i+0x1c4>
 800553e:	2f58      	cmp	r7, #88	@ 0x58
 8005540:	f000 80b8 	beq.w	80056b4 <_printf_i+0x198>
 8005544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800554c:	e03a      	b.n	80055c4 <_printf_i+0xa8>
 800554e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005552:	2b15      	cmp	r3, #21
 8005554:	d8f6      	bhi.n	8005544 <_printf_i+0x28>
 8005556:	a101      	add	r1, pc, #4	@ (adr r1, 800555c <_printf_i+0x40>)
 8005558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800555c:	080055b5 	.word	0x080055b5
 8005560:	080055c9 	.word	0x080055c9
 8005564:	08005545 	.word	0x08005545
 8005568:	08005545 	.word	0x08005545
 800556c:	08005545 	.word	0x08005545
 8005570:	08005545 	.word	0x08005545
 8005574:	080055c9 	.word	0x080055c9
 8005578:	08005545 	.word	0x08005545
 800557c:	08005545 	.word	0x08005545
 8005580:	08005545 	.word	0x08005545
 8005584:	08005545 	.word	0x08005545
 8005588:	080056c7 	.word	0x080056c7
 800558c:	080055f3 	.word	0x080055f3
 8005590:	08005681 	.word	0x08005681
 8005594:	08005545 	.word	0x08005545
 8005598:	08005545 	.word	0x08005545
 800559c:	080056e9 	.word	0x080056e9
 80055a0:	08005545 	.word	0x08005545
 80055a4:	080055f3 	.word	0x080055f3
 80055a8:	08005545 	.word	0x08005545
 80055ac:	08005545 	.word	0x08005545
 80055b0:	08005689 	.word	0x08005689
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6032      	str	r2, [r6, #0]
 80055bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055c4:	2301      	movs	r3, #1
 80055c6:	e09c      	b.n	8005702 <_printf_i+0x1e6>
 80055c8:	6833      	ldr	r3, [r6, #0]
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	1d19      	adds	r1, r3, #4
 80055ce:	6031      	str	r1, [r6, #0]
 80055d0:	0606      	lsls	r6, r0, #24
 80055d2:	d501      	bpl.n	80055d8 <_printf_i+0xbc>
 80055d4:	681d      	ldr	r5, [r3, #0]
 80055d6:	e003      	b.n	80055e0 <_printf_i+0xc4>
 80055d8:	0645      	lsls	r5, r0, #25
 80055da:	d5fb      	bpl.n	80055d4 <_printf_i+0xb8>
 80055dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	da03      	bge.n	80055ec <_printf_i+0xd0>
 80055e4:	232d      	movs	r3, #45	@ 0x2d
 80055e6:	426d      	negs	r5, r5
 80055e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ec:	230a      	movs	r3, #10
 80055ee:	4858      	ldr	r0, [pc, #352]	@ (8005750 <_printf_i+0x234>)
 80055f0:	e011      	b.n	8005616 <_printf_i+0xfa>
 80055f2:	6821      	ldr	r1, [r4, #0]
 80055f4:	6833      	ldr	r3, [r6, #0]
 80055f6:	0608      	lsls	r0, r1, #24
 80055f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055fc:	d402      	bmi.n	8005604 <_printf_i+0xe8>
 80055fe:	0649      	lsls	r1, r1, #25
 8005600:	bf48      	it	mi
 8005602:	b2ad      	uxthmi	r5, r5
 8005604:	2f6f      	cmp	r7, #111	@ 0x6f
 8005606:	6033      	str	r3, [r6, #0]
 8005608:	bf14      	ite	ne
 800560a:	230a      	movne	r3, #10
 800560c:	2308      	moveq	r3, #8
 800560e:	4850      	ldr	r0, [pc, #320]	@ (8005750 <_printf_i+0x234>)
 8005610:	2100      	movs	r1, #0
 8005612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005616:	6866      	ldr	r6, [r4, #4]
 8005618:	2e00      	cmp	r6, #0
 800561a:	60a6      	str	r6, [r4, #8]
 800561c:	db05      	blt.n	800562a <_printf_i+0x10e>
 800561e:	6821      	ldr	r1, [r4, #0]
 8005620:	432e      	orrs	r6, r5
 8005622:	f021 0104 	bic.w	r1, r1, #4
 8005626:	6021      	str	r1, [r4, #0]
 8005628:	d04b      	beq.n	80056c2 <_printf_i+0x1a6>
 800562a:	4616      	mov	r6, r2
 800562c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005630:	fb03 5711 	mls	r7, r3, r1, r5
 8005634:	5dc7      	ldrb	r7, [r0, r7]
 8005636:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800563a:	462f      	mov	r7, r5
 800563c:	42bb      	cmp	r3, r7
 800563e:	460d      	mov	r5, r1
 8005640:	d9f4      	bls.n	800562c <_printf_i+0x110>
 8005642:	2b08      	cmp	r3, #8
 8005644:	d10b      	bne.n	800565e <_printf_i+0x142>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	07df      	lsls	r7, r3, #31
 800564a:	d508      	bpl.n	800565e <_printf_i+0x142>
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	6861      	ldr	r1, [r4, #4]
 8005650:	4299      	cmp	r1, r3
 8005652:	bfde      	ittt	le
 8005654:	2330      	movle	r3, #48	@ 0x30
 8005656:	f806 3c01 	strble.w	r3, [r6, #-1]
 800565a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800565e:	1b92      	subs	r2, r2, r6
 8005660:	6122      	str	r2, [r4, #16]
 8005662:	464b      	mov	r3, r9
 8005664:	4621      	mov	r1, r4
 8005666:	4640      	mov	r0, r8
 8005668:	f8cd a000 	str.w	sl, [sp]
 800566c:	aa03      	add	r2, sp, #12
 800566e:	f7ff fee3 	bl	8005438 <_printf_common>
 8005672:	3001      	adds	r0, #1
 8005674:	d14a      	bne.n	800570c <_printf_i+0x1f0>
 8005676:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800567a:	b004      	add	sp, #16
 800567c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	f043 0320 	orr.w	r3, r3, #32
 8005686:	6023      	str	r3, [r4, #0]
 8005688:	2778      	movs	r7, #120	@ 0x78
 800568a:	4832      	ldr	r0, [pc, #200]	@ (8005754 <_printf_i+0x238>)
 800568c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	6831      	ldr	r1, [r6, #0]
 8005694:	061f      	lsls	r7, r3, #24
 8005696:	f851 5b04 	ldr.w	r5, [r1], #4
 800569a:	d402      	bmi.n	80056a2 <_printf_i+0x186>
 800569c:	065f      	lsls	r7, r3, #25
 800569e:	bf48      	it	mi
 80056a0:	b2ad      	uxthmi	r5, r5
 80056a2:	6031      	str	r1, [r6, #0]
 80056a4:	07d9      	lsls	r1, r3, #31
 80056a6:	bf44      	itt	mi
 80056a8:	f043 0320 	orrmi.w	r3, r3, #32
 80056ac:	6023      	strmi	r3, [r4, #0]
 80056ae:	b11d      	cbz	r5, 80056b8 <_printf_i+0x19c>
 80056b0:	2310      	movs	r3, #16
 80056b2:	e7ad      	b.n	8005610 <_printf_i+0xf4>
 80056b4:	4826      	ldr	r0, [pc, #152]	@ (8005750 <_printf_i+0x234>)
 80056b6:	e7e9      	b.n	800568c <_printf_i+0x170>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	f023 0320 	bic.w	r3, r3, #32
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	e7f6      	b.n	80056b0 <_printf_i+0x194>
 80056c2:	4616      	mov	r6, r2
 80056c4:	e7bd      	b.n	8005642 <_printf_i+0x126>
 80056c6:	6833      	ldr	r3, [r6, #0]
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	1d18      	adds	r0, r3, #4
 80056cc:	6961      	ldr	r1, [r4, #20]
 80056ce:	6030      	str	r0, [r6, #0]
 80056d0:	062e      	lsls	r6, r5, #24
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	d501      	bpl.n	80056da <_printf_i+0x1be>
 80056d6:	6019      	str	r1, [r3, #0]
 80056d8:	e002      	b.n	80056e0 <_printf_i+0x1c4>
 80056da:	0668      	lsls	r0, r5, #25
 80056dc:	d5fb      	bpl.n	80056d6 <_printf_i+0x1ba>
 80056de:	8019      	strh	r1, [r3, #0]
 80056e0:	2300      	movs	r3, #0
 80056e2:	4616      	mov	r6, r2
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	e7bc      	b.n	8005662 <_printf_i+0x146>
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	2100      	movs	r1, #0
 80056ec:	1d1a      	adds	r2, r3, #4
 80056ee:	6032      	str	r2, [r6, #0]
 80056f0:	681e      	ldr	r6, [r3, #0]
 80056f2:	6862      	ldr	r2, [r4, #4]
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 fa95 	bl	8005c24 <memchr>
 80056fa:	b108      	cbz	r0, 8005700 <_printf_i+0x1e4>
 80056fc:	1b80      	subs	r0, r0, r6
 80056fe:	6060      	str	r0, [r4, #4]
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	2300      	movs	r3, #0
 8005706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800570a:	e7aa      	b.n	8005662 <_printf_i+0x146>
 800570c:	4632      	mov	r2, r6
 800570e:	4649      	mov	r1, r9
 8005710:	4640      	mov	r0, r8
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	47d0      	blx	sl
 8005716:	3001      	adds	r0, #1
 8005718:	d0ad      	beq.n	8005676 <_printf_i+0x15a>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	079b      	lsls	r3, r3, #30
 800571e:	d413      	bmi.n	8005748 <_printf_i+0x22c>
 8005720:	68e0      	ldr	r0, [r4, #12]
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	4298      	cmp	r0, r3
 8005726:	bfb8      	it	lt
 8005728:	4618      	movlt	r0, r3
 800572a:	e7a6      	b.n	800567a <_printf_i+0x15e>
 800572c:	2301      	movs	r3, #1
 800572e:	4632      	mov	r2, r6
 8005730:	4649      	mov	r1, r9
 8005732:	4640      	mov	r0, r8
 8005734:	47d0      	blx	sl
 8005736:	3001      	adds	r0, #1
 8005738:	d09d      	beq.n	8005676 <_printf_i+0x15a>
 800573a:	3501      	adds	r5, #1
 800573c:	68e3      	ldr	r3, [r4, #12]
 800573e:	9903      	ldr	r1, [sp, #12]
 8005740:	1a5b      	subs	r3, r3, r1
 8005742:	42ab      	cmp	r3, r5
 8005744:	dcf2      	bgt.n	800572c <_printf_i+0x210>
 8005746:	e7eb      	b.n	8005720 <_printf_i+0x204>
 8005748:	2500      	movs	r5, #0
 800574a:	f104 0619 	add.w	r6, r4, #25
 800574e:	e7f5      	b.n	800573c <_printf_i+0x220>
 8005750:	08005ed4 	.word	0x08005ed4
 8005754:	08005ee5 	.word	0x08005ee5

08005758 <__sflush_r>:
 8005758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	0716      	lsls	r6, r2, #28
 8005760:	4605      	mov	r5, r0
 8005762:	460c      	mov	r4, r1
 8005764:	d454      	bmi.n	8005810 <__sflush_r+0xb8>
 8005766:	684b      	ldr	r3, [r1, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	dc02      	bgt.n	8005772 <__sflush_r+0x1a>
 800576c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd48      	ble.n	8005804 <__sflush_r+0xac>
 8005772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005774:	2e00      	cmp	r6, #0
 8005776:	d045      	beq.n	8005804 <__sflush_r+0xac>
 8005778:	2300      	movs	r3, #0
 800577a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800577e:	682f      	ldr	r7, [r5, #0]
 8005780:	6a21      	ldr	r1, [r4, #32]
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	d030      	beq.n	80057e8 <__sflush_r+0x90>
 8005786:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	0759      	lsls	r1, r3, #29
 800578c:	d505      	bpl.n	800579a <__sflush_r+0x42>
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	1ad2      	subs	r2, r2, r3
 8005792:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005794:	b10b      	cbz	r3, 800579a <__sflush_r+0x42>
 8005796:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	2300      	movs	r3, #0
 800579c:	4628      	mov	r0, r5
 800579e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057a0:	6a21      	ldr	r1, [r4, #32]
 80057a2:	47b0      	blx	r6
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	d106      	bne.n	80057b8 <__sflush_r+0x60>
 80057aa:	6829      	ldr	r1, [r5, #0]
 80057ac:	291d      	cmp	r1, #29
 80057ae:	d82b      	bhi.n	8005808 <__sflush_r+0xb0>
 80057b0:	4a28      	ldr	r2, [pc, #160]	@ (8005854 <__sflush_r+0xfc>)
 80057b2:	40ca      	lsrs	r2, r1
 80057b4:	07d6      	lsls	r6, r2, #31
 80057b6:	d527      	bpl.n	8005808 <__sflush_r+0xb0>
 80057b8:	2200      	movs	r2, #0
 80057ba:	6062      	str	r2, [r4, #4]
 80057bc:	6922      	ldr	r2, [r4, #16]
 80057be:	04d9      	lsls	r1, r3, #19
 80057c0:	6022      	str	r2, [r4, #0]
 80057c2:	d504      	bpl.n	80057ce <__sflush_r+0x76>
 80057c4:	1c42      	adds	r2, r0, #1
 80057c6:	d101      	bne.n	80057cc <__sflush_r+0x74>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b903      	cbnz	r3, 80057ce <__sflush_r+0x76>
 80057cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80057ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057d0:	602f      	str	r7, [r5, #0]
 80057d2:	b1b9      	cbz	r1, 8005804 <__sflush_r+0xac>
 80057d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <__sflush_r+0x8a>
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 fa2f 	bl	8005c40 <_free_r>
 80057e2:	2300      	movs	r3, #0
 80057e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80057e6:	e00d      	b.n	8005804 <__sflush_r+0xac>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b0      	blx	r6
 80057ee:	4602      	mov	r2, r0
 80057f0:	1c50      	adds	r0, r2, #1
 80057f2:	d1c9      	bne.n	8005788 <__sflush_r+0x30>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0c6      	beq.n	8005788 <__sflush_r+0x30>
 80057fa:	2b1d      	cmp	r3, #29
 80057fc:	d001      	beq.n	8005802 <__sflush_r+0xaa>
 80057fe:	2b16      	cmp	r3, #22
 8005800:	d11d      	bne.n	800583e <__sflush_r+0xe6>
 8005802:	602f      	str	r7, [r5, #0]
 8005804:	2000      	movs	r0, #0
 8005806:	e021      	b.n	800584c <__sflush_r+0xf4>
 8005808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800580c:	b21b      	sxth	r3, r3
 800580e:	e01a      	b.n	8005846 <__sflush_r+0xee>
 8005810:	690f      	ldr	r7, [r1, #16]
 8005812:	2f00      	cmp	r7, #0
 8005814:	d0f6      	beq.n	8005804 <__sflush_r+0xac>
 8005816:	0793      	lsls	r3, r2, #30
 8005818:	bf18      	it	ne
 800581a:	2300      	movne	r3, #0
 800581c:	680e      	ldr	r6, [r1, #0]
 800581e:	bf08      	it	eq
 8005820:	694b      	ldreq	r3, [r1, #20]
 8005822:	1bf6      	subs	r6, r6, r7
 8005824:	600f      	str	r7, [r1, #0]
 8005826:	608b      	str	r3, [r1, #8]
 8005828:	2e00      	cmp	r6, #0
 800582a:	ddeb      	ble.n	8005804 <__sflush_r+0xac>
 800582c:	4633      	mov	r3, r6
 800582e:	463a      	mov	r2, r7
 8005830:	4628      	mov	r0, r5
 8005832:	6a21      	ldr	r1, [r4, #32]
 8005834:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005838:	47e0      	blx	ip
 800583a:	2800      	cmp	r0, #0
 800583c:	dc07      	bgt.n	800584e <__sflush_r+0xf6>
 800583e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005846:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800584e:	4407      	add	r7, r0
 8005850:	1a36      	subs	r6, r6, r0
 8005852:	e7e9      	b.n	8005828 <__sflush_r+0xd0>
 8005854:	20400001 	.word	0x20400001

08005858 <_fflush_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	4605      	mov	r5, r0
 800585e:	460c      	mov	r4, r1
 8005860:	b913      	cbnz	r3, 8005868 <_fflush_r+0x10>
 8005862:	2500      	movs	r5, #0
 8005864:	4628      	mov	r0, r5
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	b118      	cbz	r0, 8005872 <_fflush_r+0x1a>
 800586a:	6a03      	ldr	r3, [r0, #32]
 800586c:	b90b      	cbnz	r3, 8005872 <_fflush_r+0x1a>
 800586e:	f7ff faa3 	bl	8004db8 <__sinit>
 8005872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f3      	beq.n	8005862 <_fflush_r+0xa>
 800587a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800587c:	07d0      	lsls	r0, r2, #31
 800587e:	d404      	bmi.n	800588a <_fflush_r+0x32>
 8005880:	0599      	lsls	r1, r3, #22
 8005882:	d402      	bmi.n	800588a <_fflush_r+0x32>
 8005884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005886:	f7ff fbf4 	bl	8005072 <__retarget_lock_acquire_recursive>
 800588a:	4628      	mov	r0, r5
 800588c:	4621      	mov	r1, r4
 800588e:	f7ff ff63 	bl	8005758 <__sflush_r>
 8005892:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005894:	4605      	mov	r5, r0
 8005896:	07da      	lsls	r2, r3, #31
 8005898:	d4e4      	bmi.n	8005864 <_fflush_r+0xc>
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	059b      	lsls	r3, r3, #22
 800589e:	d4e1      	bmi.n	8005864 <_fflush_r+0xc>
 80058a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058a2:	f7ff fbe7 	bl	8005074 <__retarget_lock_release_recursive>
 80058a6:	e7dd      	b.n	8005864 <_fflush_r+0xc>

080058a8 <__malloc_lock>:
 80058a8:	4801      	ldr	r0, [pc, #4]	@ (80058b0 <__malloc_lock+0x8>)
 80058aa:	f7ff bbe2 	b.w	8005072 <__retarget_lock_acquire_recursive>
 80058ae:	bf00      	nop
 80058b0:	200003c4 	.word	0x200003c4

080058b4 <__malloc_unlock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <__malloc_unlock+0x8>)
 80058b6:	f7ff bbdd 	b.w	8005074 <__retarget_lock_release_recursive>
 80058ba:	bf00      	nop
 80058bc:	200003c4 	.word	0x200003c4

080058c0 <__sread>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	460c      	mov	r4, r1
 80058c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c8:	f000 f956 	bl	8005b78 <_read_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	bfab      	itete	ge
 80058d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058d2:	89a3      	ldrhlt	r3, [r4, #12]
 80058d4:	181b      	addge	r3, r3, r0
 80058d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058da:	bfac      	ite	ge
 80058dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058de:	81a3      	strhlt	r3, [r4, #12]
 80058e0:	bd10      	pop	{r4, pc}

080058e2 <__swrite>:
 80058e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e6:	461f      	mov	r7, r3
 80058e8:	898b      	ldrh	r3, [r1, #12]
 80058ea:	4605      	mov	r5, r0
 80058ec:	05db      	lsls	r3, r3, #23
 80058ee:	460c      	mov	r4, r1
 80058f0:	4616      	mov	r6, r2
 80058f2:	d505      	bpl.n	8005900 <__swrite+0x1e>
 80058f4:	2302      	movs	r3, #2
 80058f6:	2200      	movs	r2, #0
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	f000 f92a 	bl	8005b54 <_lseek_r>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	4632      	mov	r2, r6
 8005904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	4628      	mov	r0, r5
 800590c:	463b      	mov	r3, r7
 800590e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005916:	f000 b951 	b.w	8005bbc <_write_r>

0800591a <__sseek>:
 800591a:	b510      	push	{r4, lr}
 800591c:	460c      	mov	r4, r1
 800591e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005922:	f000 f917 	bl	8005b54 <_lseek_r>
 8005926:	1c43      	adds	r3, r0, #1
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	bf15      	itete	ne
 800592c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800592e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005936:	81a3      	strheq	r3, [r4, #12]
 8005938:	bf18      	it	ne
 800593a:	81a3      	strhne	r3, [r4, #12]
 800593c:	bd10      	pop	{r4, pc}

0800593e <__sclose>:
 800593e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005942:	f000 b94d 	b.w	8005be0 <_close_r>

08005946 <__swbuf_r>:
 8005946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005948:	460e      	mov	r6, r1
 800594a:	4614      	mov	r4, r2
 800594c:	4605      	mov	r5, r0
 800594e:	b118      	cbz	r0, 8005958 <__swbuf_r+0x12>
 8005950:	6a03      	ldr	r3, [r0, #32]
 8005952:	b90b      	cbnz	r3, 8005958 <__swbuf_r+0x12>
 8005954:	f7ff fa30 	bl	8004db8 <__sinit>
 8005958:	69a3      	ldr	r3, [r4, #24]
 800595a:	60a3      	str	r3, [r4, #8]
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	071a      	lsls	r2, r3, #28
 8005960:	d501      	bpl.n	8005966 <__swbuf_r+0x20>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	b943      	cbnz	r3, 8005978 <__swbuf_r+0x32>
 8005966:	4621      	mov	r1, r4
 8005968:	4628      	mov	r0, r5
 800596a:	f000 f82b 	bl	80059c4 <__swsetup_r>
 800596e:	b118      	cbz	r0, 8005978 <__swbuf_r+0x32>
 8005970:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005974:	4638      	mov	r0, r7
 8005976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	6922      	ldr	r2, [r4, #16]
 800597c:	b2f6      	uxtb	r6, r6
 800597e:	1a98      	subs	r0, r3, r2
 8005980:	6963      	ldr	r3, [r4, #20]
 8005982:	4637      	mov	r7, r6
 8005984:	4283      	cmp	r3, r0
 8005986:	dc05      	bgt.n	8005994 <__swbuf_r+0x4e>
 8005988:	4621      	mov	r1, r4
 800598a:	4628      	mov	r0, r5
 800598c:	f7ff ff64 	bl	8005858 <_fflush_r>
 8005990:	2800      	cmp	r0, #0
 8005992:	d1ed      	bne.n	8005970 <__swbuf_r+0x2a>
 8005994:	68a3      	ldr	r3, [r4, #8]
 8005996:	3b01      	subs	r3, #1
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	701e      	strb	r6, [r3, #0]
 80059a2:	6962      	ldr	r2, [r4, #20]
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d004      	beq.n	80059b4 <__swbuf_r+0x6e>
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	07db      	lsls	r3, r3, #31
 80059ae:	d5e1      	bpl.n	8005974 <__swbuf_r+0x2e>
 80059b0:	2e0a      	cmp	r6, #10
 80059b2:	d1df      	bne.n	8005974 <__swbuf_r+0x2e>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f7ff ff4e 	bl	8005858 <_fflush_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0d9      	beq.n	8005974 <__swbuf_r+0x2e>
 80059c0:	e7d6      	b.n	8005970 <__swbuf_r+0x2a>
	...

080059c4 <__swsetup_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4b29      	ldr	r3, [pc, #164]	@ (8005a6c <__swsetup_r+0xa8>)
 80059c8:	4605      	mov	r5, r0
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	460c      	mov	r4, r1
 80059ce:	b118      	cbz	r0, 80059d8 <__swsetup_r+0x14>
 80059d0:	6a03      	ldr	r3, [r0, #32]
 80059d2:	b90b      	cbnz	r3, 80059d8 <__swsetup_r+0x14>
 80059d4:	f7ff f9f0 	bl	8004db8 <__sinit>
 80059d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059dc:	0719      	lsls	r1, r3, #28
 80059de:	d422      	bmi.n	8005a26 <__swsetup_r+0x62>
 80059e0:	06da      	lsls	r2, r3, #27
 80059e2:	d407      	bmi.n	80059f4 <__swsetup_r+0x30>
 80059e4:	2209      	movs	r2, #9
 80059e6:	602a      	str	r2, [r5, #0]
 80059e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	e033      	b.n	8005a5c <__swsetup_r+0x98>
 80059f4:	0758      	lsls	r0, r3, #29
 80059f6:	d512      	bpl.n	8005a1e <__swsetup_r+0x5a>
 80059f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059fa:	b141      	cbz	r1, 8005a0e <__swsetup_r+0x4a>
 80059fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d002      	beq.n	8005a0a <__swsetup_r+0x46>
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f91b 	bl	8005c40 <_free_r>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	2300      	movs	r3, #0
 8005a18:	6063      	str	r3, [r4, #4]
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f043 0308 	orr.w	r3, r3, #8
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	b94b      	cbnz	r3, 8005a3e <__swsetup_r+0x7a>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a34:	d003      	beq.n	8005a3e <__swsetup_r+0x7a>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 f83e 	bl	8005aba <__smakebuf_r>
 8005a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a42:	f013 0201 	ands.w	r2, r3, #1
 8005a46:	d00a      	beq.n	8005a5e <__swsetup_r+0x9a>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	60a2      	str	r2, [r4, #8]
 8005a4c:	6962      	ldr	r2, [r4, #20]
 8005a4e:	4252      	negs	r2, r2
 8005a50:	61a2      	str	r2, [r4, #24]
 8005a52:	6922      	ldr	r2, [r4, #16]
 8005a54:	b942      	cbnz	r2, 8005a68 <__swsetup_r+0xa4>
 8005a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a5a:	d1c5      	bne.n	80059e8 <__swsetup_r+0x24>
 8005a5c:	bd38      	pop	{r3, r4, r5, pc}
 8005a5e:	0799      	lsls	r1, r3, #30
 8005a60:	bf58      	it	pl
 8005a62:	6962      	ldrpl	r2, [r4, #20]
 8005a64:	60a2      	str	r2, [r4, #8]
 8005a66:	e7f4      	b.n	8005a52 <__swsetup_r+0x8e>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e7f7      	b.n	8005a5c <__swsetup_r+0x98>
 8005a6c:	20000060 	.word	0x20000060

08005a70 <__swhatbuf_r>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	460c      	mov	r4, r1
 8005a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a78:	4615      	mov	r5, r2
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	461e      	mov	r6, r3
 8005a7e:	b096      	sub	sp, #88	@ 0x58
 8005a80:	da0c      	bge.n	8005a9c <__swhatbuf_r+0x2c>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	2100      	movs	r1, #0
 8005a86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a8a:	bf14      	ite	ne
 8005a8c:	2340      	movne	r3, #64	@ 0x40
 8005a8e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a92:	2000      	movs	r0, #0
 8005a94:	6031      	str	r1, [r6, #0]
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	b016      	add	sp, #88	@ 0x58
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	466a      	mov	r2, sp
 8005a9e:	f000 f8af 	bl	8005c00 <_fstat_r>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	dbed      	blt.n	8005a82 <__swhatbuf_r+0x12>
 8005aa6:	9901      	ldr	r1, [sp, #4]
 8005aa8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005aac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ab0:	4259      	negs	r1, r3
 8005ab2:	4159      	adcs	r1, r3
 8005ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ab8:	e7eb      	b.n	8005a92 <__swhatbuf_r+0x22>

08005aba <__smakebuf_r>:
 8005aba:	898b      	ldrh	r3, [r1, #12]
 8005abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005abe:	079d      	lsls	r5, r3, #30
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	d507      	bpl.n	8005ad6 <__smakebuf_r+0x1c>
 8005ac6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	6123      	str	r3, [r4, #16]
 8005ace:	2301      	movs	r3, #1
 8005ad0:	6163      	str	r3, [r4, #20]
 8005ad2:	b003      	add	sp, #12
 8005ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ad6:	466a      	mov	r2, sp
 8005ad8:	ab01      	add	r3, sp, #4
 8005ada:	f7ff ffc9 	bl	8005a70 <__swhatbuf_r>
 8005ade:	9f00      	ldr	r7, [sp, #0]
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f7ff fc27 	bl	8005338 <_malloc_r>
 8005aea:	b948      	cbnz	r0, 8005b00 <__smakebuf_r+0x46>
 8005aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af0:	059a      	lsls	r2, r3, #22
 8005af2:	d4ee      	bmi.n	8005ad2 <__smakebuf_r+0x18>
 8005af4:	f023 0303 	bic.w	r3, r3, #3
 8005af8:	f043 0302 	orr.w	r3, r3, #2
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	e7e2      	b.n	8005ac6 <__smakebuf_r+0xc>
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	9b01      	ldr	r3, [sp, #4]
 8005b0e:	6020      	str	r0, [r4, #0]
 8005b10:	b15b      	cbz	r3, 8005b2a <__smakebuf_r+0x70>
 8005b12:	4630      	mov	r0, r6
 8005b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b18:	f000 f80c 	bl	8005b34 <_isatty_r>
 8005b1c:	b128      	cbz	r0, 8005b2a <__smakebuf_r+0x70>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f023 0303 	bic.w	r3, r3, #3
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	431d      	orrs	r5, r3
 8005b2e:	81a5      	strh	r5, [r4, #12]
 8005b30:	e7cf      	b.n	8005ad2 <__smakebuf_r+0x18>
	...

08005b34 <_isatty_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	2300      	movs	r3, #0
 8005b38:	4d05      	ldr	r5, [pc, #20]	@ (8005b50 <_isatty_r+0x1c>)
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fb fca9 	bl	8001496 <_isatty>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_isatty_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_isatty_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	200003d0 	.word	0x200003d0

08005b54 <_lseek_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4d05      	ldr	r5, [pc, #20]	@ (8005b74 <_lseek_r+0x20>)
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f7fb fca1 	bl	80014aa <_lseek>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_lseek_r+0x1e>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_lseek_r+0x1e>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	200003d0 	.word	0x200003d0

08005b78 <_read_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	2200      	movs	r2, #0
 8005b82:	4d05      	ldr	r5, [pc, #20]	@ (8005b98 <_read_r+0x20>)
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fb fc32 	bl	80013f0 <_read>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_read_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_read_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200003d0 	.word	0x200003d0

08005b9c <_sbrk_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	4d05      	ldr	r5, [pc, #20]	@ (8005bb8 <_sbrk_r+0x1c>)
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fb fc8c 	bl	80014c4 <_sbrk>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_sbrk_r+0x1a>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_sbrk_r+0x1a>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	200003d0 	.word	0x200003d0

08005bbc <_write_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4d05      	ldr	r5, [pc, #20]	@ (8005bdc <_write_r+0x20>)
 8005bc8:	602a      	str	r2, [r5, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f7fb fc2d 	bl	800142a <_write>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d102      	bne.n	8005bda <_write_r+0x1e>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	b103      	cbz	r3, 8005bda <_write_r+0x1e>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	200003d0 	.word	0x200003d0

08005be0 <_close_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	2300      	movs	r3, #0
 8005be4:	4d05      	ldr	r5, [pc, #20]	@ (8005bfc <_close_r+0x1c>)
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	f7fb fc39 	bl	8001462 <_close>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d102      	bne.n	8005bfa <_close_r+0x1a>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	b103      	cbz	r3, 8005bfa <_close_r+0x1a>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	200003d0 	.word	0x200003d0

08005c00 <_fstat_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	2300      	movs	r3, #0
 8005c04:	4d06      	ldr	r5, [pc, #24]	@ (8005c20 <_fstat_r+0x20>)
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	602b      	str	r3, [r5, #0]
 8005c0e:	f7fb fc33 	bl	8001478 <_fstat>
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	d102      	bne.n	8005c1c <_fstat_r+0x1c>
 8005c16:	682b      	ldr	r3, [r5, #0]
 8005c18:	b103      	cbz	r3, 8005c1c <_fstat_r+0x1c>
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	bd38      	pop	{r3, r4, r5, pc}
 8005c1e:	bf00      	nop
 8005c20:	200003d0 	.word	0x200003d0

08005c24 <memchr>:
 8005c24:	4603      	mov	r3, r0
 8005c26:	b510      	push	{r4, lr}
 8005c28:	b2c9      	uxtb	r1, r1
 8005c2a:	4402      	add	r2, r0
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	d101      	bne.n	8005c36 <memchr+0x12>
 8005c32:	2000      	movs	r0, #0
 8005c34:	e003      	b.n	8005c3e <memchr+0x1a>
 8005c36:	7804      	ldrb	r4, [r0, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	428c      	cmp	r4, r1
 8005c3c:	d1f6      	bne.n	8005c2c <memchr+0x8>
 8005c3e:	bd10      	pop	{r4, pc}

08005c40 <_free_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4605      	mov	r5, r0
 8005c44:	2900      	cmp	r1, #0
 8005c46:	d040      	beq.n	8005cca <_free_r+0x8a>
 8005c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c4c:	1f0c      	subs	r4, r1, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bfb8      	it	lt
 8005c52:	18e4      	addlt	r4, r4, r3
 8005c54:	f7ff fe28 	bl	80058a8 <__malloc_lock>
 8005c58:	4a1c      	ldr	r2, [pc, #112]	@ (8005ccc <_free_r+0x8c>)
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	b933      	cbnz	r3, 8005c6c <_free_r+0x2c>
 8005c5e:	6063      	str	r3, [r4, #4]
 8005c60:	6014      	str	r4, [r2, #0]
 8005c62:	4628      	mov	r0, r5
 8005c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c68:	f7ff be24 	b.w	80058b4 <__malloc_unlock>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d908      	bls.n	8005c82 <_free_r+0x42>
 8005c70:	6820      	ldr	r0, [r4, #0]
 8005c72:	1821      	adds	r1, r4, r0
 8005c74:	428b      	cmp	r3, r1
 8005c76:	bf01      	itttt	eq
 8005c78:	6819      	ldreq	r1, [r3, #0]
 8005c7a:	685b      	ldreq	r3, [r3, #4]
 8005c7c:	1809      	addeq	r1, r1, r0
 8005c7e:	6021      	streq	r1, [r4, #0]
 8005c80:	e7ed      	b.n	8005c5e <_free_r+0x1e>
 8005c82:	461a      	mov	r2, r3
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	b10b      	cbz	r3, 8005c8c <_free_r+0x4c>
 8005c88:	42a3      	cmp	r3, r4
 8005c8a:	d9fa      	bls.n	8005c82 <_free_r+0x42>
 8005c8c:	6811      	ldr	r1, [r2, #0]
 8005c8e:	1850      	adds	r0, r2, r1
 8005c90:	42a0      	cmp	r0, r4
 8005c92:	d10b      	bne.n	8005cac <_free_r+0x6c>
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	4401      	add	r1, r0
 8005c98:	1850      	adds	r0, r2, r1
 8005c9a:	4283      	cmp	r3, r0
 8005c9c:	6011      	str	r1, [r2, #0]
 8005c9e:	d1e0      	bne.n	8005c62 <_free_r+0x22>
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4408      	add	r0, r1
 8005ca6:	6010      	str	r0, [r2, #0]
 8005ca8:	6053      	str	r3, [r2, #4]
 8005caa:	e7da      	b.n	8005c62 <_free_r+0x22>
 8005cac:	d902      	bls.n	8005cb4 <_free_r+0x74>
 8005cae:	230c      	movs	r3, #12
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	e7d6      	b.n	8005c62 <_free_r+0x22>
 8005cb4:	6820      	ldr	r0, [r4, #0]
 8005cb6:	1821      	adds	r1, r4, r0
 8005cb8:	428b      	cmp	r3, r1
 8005cba:	bf01      	itttt	eq
 8005cbc:	6819      	ldreq	r1, [r3, #0]
 8005cbe:	685b      	ldreq	r3, [r3, #4]
 8005cc0:	1809      	addeq	r1, r1, r0
 8005cc2:	6021      	streq	r1, [r4, #0]
 8005cc4:	6063      	str	r3, [r4, #4]
 8005cc6:	6054      	str	r4, [r2, #4]
 8005cc8:	e7cb      	b.n	8005c62 <_free_r+0x22>
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	200003cc 	.word	0x200003cc

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
