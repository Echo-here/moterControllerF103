
echo20250614-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003af0  08003af0  00004af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b6c  08003b6c  00004b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b74  08003b74  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00004b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b78  08003b78  00004b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  08003bd8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003bd8  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb1e  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfc  00000000  00000000  00010ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  000127a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000970  00000000  00000000  000133a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017acf  00000000  00000000  00013d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caf2  00000000  00000000  0002b7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a71e  00000000  00000000  000382d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c29f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003818  00000000  00000000  000c2a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c6254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ad8 	.word	0x08003ad8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003ad8 	.word	0x08003ad8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2uiz>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	d20e      	bcs.n	8000502 <__aeabi_f2uiz+0x22>
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30b      	bcc.n	8000502 <__aeabi_f2uiz+0x22>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d409      	bmi.n	8000508 <__aeabi_f2uiz+0x28>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr
 8000508:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800050c:	d101      	bne.n	8000512 <__aeabi_f2uiz+0x32>
 800050e:	0242      	lsls	r2, r0, #9
 8000510:	d102      	bne.n	8000518 <__aeabi_f2uiz+0x38>
 8000512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000516:	4770      	bx	lr
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	@ 0x28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a32      	ldr	r2, [pc, #200]	@ (80005f8 <HAL_UART_RxCpltCallback+0xd8>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d15e      	bne.n	80005f0 <HAL_UART_RxCpltCallback+0xd0>
	{
		if (rx_data >= '0' && rx_data <= '9') {
 8000532:	4b32      	ldr	r3, [pc, #200]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b2f      	cmp	r3, #47	@ 0x2f
 8000538:	d92e      	bls.n	8000598 <HAL_UART_RxCpltCallback+0x78>
 800053a:	4b30      	ldr	r3, [pc, #192]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b39      	cmp	r3, #57	@ 0x39
 8000540:	d82a      	bhi.n	8000598 <HAL_UART_RxCpltCallback+0x78>
			char tx_buffer[32];
			target_pwm_value = (rx_data - '0') * PWM_DUTY_SCALE;
 8000542:	4b2e      	ldr	r3, [pc, #184]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	3b30      	subs	r3, #48	@ 0x30
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff75 	bl	8000438 <__aeabi_i2f>
 800054e:	4603      	mov	r3, r0
 8000550:	492b      	ldr	r1, [pc, #172]	@ (8000600 <HAL_UART_RxCpltCallback+0xe0>)
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe02 	bl	800015c <__aeabi_fmul>
 8000558:	4603      	mov	r3, r0
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffc0 	bl	80004e0 <__aeabi_f2uiz>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <HAL_UART_RxCpltCallback+0xe4>)
 8000566:	801a      	strh	r2, [r3, #0]
			snprintf(tx_buffer, sizeof(tx_buffer), "Target Duty set to: %d\r\n", target_pwm_value);
 8000568:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <HAL_UART_RxCpltCallback+0xe4>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b29b      	uxth	r3, r3
 800056e:	f107 0008 	add.w	r0, r7, #8
 8000572:	4a25      	ldr	r2, [pc, #148]	@ (8000608 <HAL_UART_RxCpltCallback+0xe8>)
 8000574:	2120      	movs	r1, #32
 8000576:	f002 fdeb 	bl	8003150 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fde4 	bl	800014c <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	f107 0108 	add.w	r1, r7, #8
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000590:	481e      	ldr	r0, [pc, #120]	@ (800060c <HAL_UART_RxCpltCallback+0xec>)
 8000592:	f001 ffc3 	bl	800251c <HAL_UART_Transmit>
		if (rx_data >= '0' && rx_data <= '9') {
 8000596:	e026      	b.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
		} else if (rx_data == 'r') {
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b72      	cmp	r3, #114	@ 0x72
 800059e:	d105      	bne.n	80005ac <HAL_UART_RxCpltCallback+0x8c>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	481a      	ldr	r0, [pc, #104]	@ (8000610 <HAL_UART_RxCpltCallback+0xf0>)
 80005a6:	f000 fef3 	bl	8001390 <HAL_GPIO_WritePin>
 80005aa:	e01c      	b.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
		} else if (rx_data == 't') {
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b74      	cmp	r3, #116	@ 0x74
 80005b2:	d105      	bne.n	80005c0 <HAL_UART_RxCpltCallback+0xa0>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2102      	movs	r1, #2
 80005b8:	4815      	ldr	r0, [pc, #84]	@ (8000610 <HAL_UART_RxCpltCallback+0xf0>)
 80005ba:	f000 fee9 	bl	8001390 <HAL_GPIO_WritePin>
 80005be:	e012      	b.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
		}else if (rx_data == 'd') {
 80005c0:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b64      	cmp	r3, #100	@ 0x64
 80005c6:	d105      	bne.n	80005d4 <HAL_UART_RxCpltCallback+0xb4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	4810      	ldr	r0, [pc, #64]	@ (8000610 <HAL_UART_RxCpltCallback+0xf0>)
 80005ce:	f000 fedf 	bl	8001390 <HAL_GPIO_WritePin>
 80005d2:	e008      	b.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
		}else if (rx_data == 's') {
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b73      	cmp	r3, #115	@ 0x73
 80005da:	d104      	bne.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <HAL_UART_RxCpltCallback+0xf0>)
 80005e2:	f000 fed5 	bl	8001390 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));
 80005e6:	2201      	movs	r2, #1
 80005e8:	4904      	ldr	r1, [pc, #16]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <HAL_UART_RxCpltCallback+0xec>)
 80005ec:	f002 f821 	bl	8002632 <HAL_UART_Receive_IT>
	}
}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	@ 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40004400 	.word	0x40004400
 80005fc:	20000108 	.word	0x20000108
 8000600:	409ccccd 	.word	0x409ccccd
 8000604:	2000010c 	.word	0x2000010c
 8000608:	08003af0 	.word	0x08003af0
 800060c:	200000c0 	.word	0x200000c0
 8000610:	40010800 	.word	0x40010800

08000614 <Transform_PWM>:
void Transform_PWM(){
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	if (current_pwm_value < target_pwm_value) current_pwm_value++;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <Transform_PWM+0x58>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <Transform_PWM+0x5c>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	b29b      	uxth	r3, r3
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <Transform_PWM+0x24>
 8000628:	4b10      	ldr	r3, [pc, #64]	@ (800066c <Transform_PWM+0x58>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	b29b      	uxth	r3, r3
 800062e:	3301      	adds	r3, #1
 8000630:	b29a      	uxth	r2, r3
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <Transform_PWM+0x58>)
 8000634:	801a      	strh	r2, [r3, #0]
 8000636:	e00e      	b.n	8000656 <Transform_PWM+0x42>
	else if (current_pwm_value > target_pwm_value) current_pwm_value--;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <Transform_PWM+0x58>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <Transform_PWM+0x5c>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	b29b      	uxth	r3, r3
 8000644:	429a      	cmp	r2, r3
 8000646:	d906      	bls.n	8000656 <Transform_PWM+0x42>
 8000648:	4b08      	ldr	r3, [pc, #32]	@ (800066c <Transform_PWM+0x58>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b29b      	uxth	r3, r3
 800064e:	3b01      	subs	r3, #1
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <Transform_PWM+0x58>)
 8000654:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, current_pwm_value);
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <Transform_PWM+0x58>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <Transform_PWM+0x60>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000010a 	.word	0x2000010a
 8000670:	2000010c 	.word	0x2000010c
 8000674:	20000078 	.word	0x20000078

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fabe 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f81c 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f8e2 	bl	800084c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000688:	f000 f8b6 	bl	80007f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800068c:	f000 f85c 	bl	8000748 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // PWM 시작
 8000690:	2100      	movs	r1, #0
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <main+0x38>)
 8000694:	f001 fb16 	bl	8001cc4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data)); // UART 수신 인터럽트 시작
 8000698:	2201      	movs	r2, #1
 800069a:	4906      	ldr	r1, [pc, #24]	@ (80006b4 <main+0x3c>)
 800069c:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <main+0x40>)
 800069e:	f001 ffc8 	bl	8002632 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Transform_PWM();
 80006a2:	f7ff ffb7 	bl	8000614 <Transform_PWM>
	  HAL_Delay(5); // 딜레이를 줘서 천천히 변경 (5ms 조절 가능)
 80006a6:	2005      	movs	r0, #5
 80006a8:	f000 fb0a 	bl	8000cc0 <HAL_Delay>
	  Transform_PWM();
 80006ac:	bf00      	nop
 80006ae:	e7f8      	b.n	80006a2 <main+0x2a>
 80006b0:	20000078 	.word	0x20000078
 80006b4:	20000108 	.word	0x20000108
 80006b8:	200000c0 	.word	0x200000c0

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b090      	sub	sp, #64	@ 0x40
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	2228      	movs	r2, #40	@ 0x28
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fd76 	bl	80031bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006de:	2301      	movs	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fe7d 	bl	8001404 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000710:	f000 f90a 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f8ea 	bl	8001908 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800073a:	f000 f8f5 	bl	8000928 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3740      	adds	r7, #64	@ 0x40
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <MX_TIM2_Init+0xac>)
 800076c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000772:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_TIM2_Init+0xac>)
 8000774:	2247      	movs	r2, #71	@ 0x47
 8000776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <MX_TIM2_Init+0xac>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 800077e:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <MX_TIM2_Init+0xac>)
 8000780:	2231      	movs	r2, #49	@ 0x31
 8000782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_TIM2_Init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <MX_TIM2_Init+0xac>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000790:	4818      	ldr	r0, [pc, #96]	@ (80007f4 <MX_TIM2_Init+0xac>)
 8000792:	f001 fa47 	bl	8001c24 <HAL_TIM_PWM_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f8c4 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4619      	mov	r1, r3
 80007ae:	4811      	ldr	r0, [pc, #68]	@ (80007f4 <MX_TIM2_Init+0xac>)
 80007b0:	f001 fe06 	bl	80023c0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80007ba:	f000 f8b5 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007be:	2360      	movs	r3, #96	@ 0x60
 80007c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <MX_TIM2_Init+0xac>)
 80007d6:	f001 fb17 	bl	8001e08 <HAL_TIM_PWM_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80007e0:	f000 f8a2 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007e4:	4803      	ldr	r0, [pc, #12]	@ (80007f4 <MX_TIM2_Init+0xac>)
 80007e6:	f000 f8f3 	bl	80009d0 <HAL_TIM_MspPostInit>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	@ 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000078 	.word	0x20000078

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <MX_USART2_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000830:	f001 fe24 	bl	800247c <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f000 f875 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000c0 	.word	0x200000c0
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000860:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <MX_GPIO_Init+0xcc>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <MX_GPIO_Init+0xcc>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <MX_GPIO_Init+0xcc>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0310 	and.w	r3, r3, #16
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000878:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <MX_GPIO_Init+0xcc>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a26      	ldr	r2, [pc, #152]	@ (8000918 <MX_GPIO_Init+0xcc>)
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <MX_GPIO_Init+0xcc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0320 	and.w	r3, r3, #32
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_GPIO_Init+0xcc>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a20      	ldr	r2, [pc, #128]	@ (8000918 <MX_GPIO_Init+0xcc>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_GPIO_Init+0xcc>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_GPIO_Init+0xcc>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000918 <MX_GPIO_Init+0xcc>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_GPIO_Init+0xcc>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0308 	and.w	r3, r3, #8
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2132      	movs	r1, #50	@ 0x32
 80008c4:	4815      	ldr	r0, [pc, #84]	@ (800091c <MX_GPIO_Init+0xd0>)
 80008c6:	f000 fd63 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_GPIO_Init+0xd4>)
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	4811      	ldr	r0, [pc, #68]	@ (8000924 <MX_GPIO_Init+0xd8>)
 80008e0:	f000 fbd2 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 80008e4:	2332      	movs	r3, #50	@ 0x32
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	4808      	ldr	r0, [pc, #32]	@ (800091c <MX_GPIO_Init+0xd0>)
 80008fc:	f000 fbc4 	bl	8001088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2028      	movs	r0, #40	@ 0x28
 8000906:	f000 fad6 	bl	8000eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800090a:	2028      	movs	r0, #40	@ 0x28
 800090c:	f000 faef 	bl	8000eee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800
 8000920:	10110000 	.word	0x10110000
 8000924:	40011000 	.word	0x40011000

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_MspInit+0x60>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <HAL_MspInit+0x60>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009a8:	d10b      	bne.n	80009c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <HAL_TIM_PWM_MspInit+0x34>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <HAL_TIM_PWM_MspInit+0x34>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_TIM_PWM_MspInit+0x34>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009ee:	d117      	bne.n	8000a20 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_TIM_MspPostInit+0x58>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a28 <HAL_TIM_MspPostInit+0x58>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_TIM_MspPostInit+0x58>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <HAL_TIM_MspPostInit+0x5c>)
 8000a1c:	f000 fb34 	bl	8001088 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010800 	.word	0x40010800

08000a30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <HAL_UART_MspInit+0x80>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d12b      	bne.n	8000aa8 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5a:	61d3      	str	r3, [r2, #28]
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a80:	230c      	movs	r3, #12
 8000a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <HAL_UART_MspInit+0x88>)
 8000a94:	f000 faf8 	bl	8001088 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2026      	movs	r0, #38	@ 0x26
 8000a9e:	f000 fa0a 	bl	8000eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa2:	2026      	movs	r0, #38	@ 0x26
 8000aa4:	f000 fa23 	bl	8000eee <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f8bc 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <USART2_IRQHandler+0x10>)
 8000b1a:	f001 fdaf 	bl	800267c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000c0 	.word	0x200000c0

08000b28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b30:	f000 fc46 	bl	80013c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f002 fb30 	bl	80031cc <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20005000 	.word	0x20005000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000110 	.word	0x20000110
 8000ba0:	20000260 	.word	0x20000260

08000ba4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb0:	f7ff fff8 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb6:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a09      	ldr	r2, [pc, #36]	@ (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bcc:	4c09      	ldr	r4, [pc, #36]	@ (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 fafd 	bl	80031d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bde:	f7ff fd4b 	bl	8000678 <main>
  bx lr
 8000be2:	4770      	bx	lr
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bec:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 8000bf0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bf4:	20000260 	.word	0x20000260

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f947 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe8c 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f95f 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c64:	f000 f927 	bl	8000eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a03      	ldr	r2, [pc, #12]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000114 	.word	0x20000114

08000cac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	@ (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000114 	.word	0x20000114

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff fff0 	bl	8000cac <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffe0 	bl	8000cac <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4906      	ldr	r1, [pc, #24]	@ (8000da0 <__NVIC_EnableIRQ+0x34>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	@ (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	@ 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	@ 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e80:	f7ff ff90 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff2d 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff42 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff90 	bl	8000df8 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5f 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff35 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa2 	bl	8000e5c <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d008      	beq.n	8000f4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e020      	b.n	8000f8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 020e 	bic.w	r2, r2, #14
 8000f5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d005      	beq.n	8000fbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e051      	b.n	8001060 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020e 	bic.w	r2, r2, #14
 8000fca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a22      	ldr	r2, [pc, #136]	@ (800106c <HAL_DMA_Abort_IT+0xd4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d029      	beq.n	800103a <HAL_DMA_Abort_IT+0xa2>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a21      	ldr	r2, [pc, #132]	@ (8001070 <HAL_DMA_Abort_IT+0xd8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d022      	beq.n	8001036 <HAL_DMA_Abort_IT+0x9e>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8001074 <HAL_DMA_Abort_IT+0xdc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01a      	beq.n	8001030 <HAL_DMA_Abort_IT+0x98>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_DMA_Abort_IT+0xe0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d012      	beq.n	800102a <HAL_DMA_Abort_IT+0x92>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <HAL_DMA_Abort_IT+0xe4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00a      	beq.n	8001024 <HAL_DMA_Abort_IT+0x8c>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <HAL_DMA_Abort_IT+0xe8>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d102      	bne.n	800101e <HAL_DMA_Abort_IT+0x86>
 8001018:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800101c:	e00e      	b.n	800103c <HAL_DMA_Abort_IT+0xa4>
 800101e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001022:	e00b      	b.n	800103c <HAL_DMA_Abort_IT+0xa4>
 8001024:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001028:	e008      	b.n	800103c <HAL_DMA_Abort_IT+0xa4>
 800102a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800102e:	e005      	b.n	800103c <HAL_DMA_Abort_IT+0xa4>
 8001030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001034:	e002      	b.n	800103c <HAL_DMA_Abort_IT+0xa4>
 8001036:	2310      	movs	r3, #16
 8001038:	e000      	b.n	800103c <HAL_DMA_Abort_IT+0xa4>
 800103a:	2301      	movs	r3, #1
 800103c:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <HAL_DMA_Abort_IT+0xec>)
 800103e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	4798      	blx	r3
    } 
  }
  return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40020008 	.word	0x40020008
 8001070:	4002001c 	.word	0x4002001c
 8001074:	40020030 	.word	0x40020030
 8001078:	40020044 	.word	0x40020044
 800107c:	40020058 	.word	0x40020058
 8001080:	4002006c 	.word	0x4002006c
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b08b      	sub	sp, #44	@ 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e169      	b.n	8001370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800109c:	2201      	movs	r2, #1
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 8158 	bne.w	800136a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	4a9a      	ldr	r2, [pc, #616]	@ (8001328 <HAL_GPIO_Init+0x2a0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d05e      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010c4:	4a98      	ldr	r2, [pc, #608]	@ (8001328 <HAL_GPIO_Init+0x2a0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d875      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010ca:	4a98      	ldr	r2, [pc, #608]	@ (800132c <HAL_GPIO_Init+0x2a4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d058      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010d0:	4a96      	ldr	r2, [pc, #600]	@ (800132c <HAL_GPIO_Init+0x2a4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d86f      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010d6:	4a96      	ldr	r2, [pc, #600]	@ (8001330 <HAL_GPIO_Init+0x2a8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d052      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010dc:	4a94      	ldr	r2, [pc, #592]	@ (8001330 <HAL_GPIO_Init+0x2a8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d869      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010e2:	4a94      	ldr	r2, [pc, #592]	@ (8001334 <HAL_GPIO_Init+0x2ac>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d04c      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010e8:	4a92      	ldr	r2, [pc, #584]	@ (8001334 <HAL_GPIO_Init+0x2ac>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d863      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010ee:	4a92      	ldr	r2, [pc, #584]	@ (8001338 <HAL_GPIO_Init+0x2b0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d046      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010f4:	4a90      	ldr	r2, [pc, #576]	@ (8001338 <HAL_GPIO_Init+0x2b0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d85d      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d82a      	bhi.n	8001154 <HAL_GPIO_Init+0xcc>
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d859      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 8001102:	a201      	add	r2, pc, #4	@ (adr r2, 8001108 <HAL_GPIO_Init+0x80>)
 8001104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001108:	08001183 	.word	0x08001183
 800110c:	0800115d 	.word	0x0800115d
 8001110:	0800116f 	.word	0x0800116f
 8001114:	080011b1 	.word	0x080011b1
 8001118:	080011b7 	.word	0x080011b7
 800111c:	080011b7 	.word	0x080011b7
 8001120:	080011b7 	.word	0x080011b7
 8001124:	080011b7 	.word	0x080011b7
 8001128:	080011b7 	.word	0x080011b7
 800112c:	080011b7 	.word	0x080011b7
 8001130:	080011b7 	.word	0x080011b7
 8001134:	080011b7 	.word	0x080011b7
 8001138:	080011b7 	.word	0x080011b7
 800113c:	080011b7 	.word	0x080011b7
 8001140:	080011b7 	.word	0x080011b7
 8001144:	080011b7 	.word	0x080011b7
 8001148:	080011b7 	.word	0x080011b7
 800114c:	08001165 	.word	0x08001165
 8001150:	08001179 	.word	0x08001179
 8001154:	4a79      	ldr	r2, [pc, #484]	@ (800133c <HAL_GPIO_Init+0x2b4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800115a:	e02c      	b.n	80011b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e029      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	3304      	adds	r3, #4
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e024      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	3308      	adds	r3, #8
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e01f      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	330c      	adds	r3, #12
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e01a      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800118a:	2304      	movs	r3, #4
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e013      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	611a      	str	r2, [r3, #16]
          break;
 80011a2:	e009      	b.n	80011b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	615a      	str	r2, [r3, #20]
          break;
 80011ae:	e003      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          break;
 80011b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2bff      	cmp	r3, #255	@ 0xff
 80011bc:	d801      	bhi.n	80011c2 <HAL_GPIO_Init+0x13a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	e001      	b.n	80011c6 <HAL_GPIO_Init+0x13e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3304      	adds	r3, #4
 80011c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2bff      	cmp	r3, #255	@ 0xff
 80011cc:	d802      	bhi.n	80011d4 <HAL_GPIO_Init+0x14c>
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x152>
 80011d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d6:	3b08      	subs	r3, #8
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	210f      	movs	r1, #15
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	6a39      	ldr	r1, [r7, #32]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	431a      	orrs	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80b1 	beq.w	800136a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001208:	4b4d      	ldr	r3, [pc, #308]	@ (8001340 <HAL_GPIO_Init+0x2b8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a4c      	ldr	r2, [pc, #304]	@ (8001340 <HAL_GPIO_Init+0x2b8>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b4a      	ldr	r3, [pc, #296]	@ (8001340 <HAL_GPIO_Init+0x2b8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001220:	4a48      	ldr	r2, [pc, #288]	@ (8001344 <HAL_GPIO_Init+0x2bc>)
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a40      	ldr	r2, [pc, #256]	@ (8001348 <HAL_GPIO_Init+0x2c0>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d013      	beq.n	8001274 <HAL_GPIO_Init+0x1ec>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3f      	ldr	r2, [pc, #252]	@ (800134c <HAL_GPIO_Init+0x2c4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d00d      	beq.n	8001270 <HAL_GPIO_Init+0x1e8>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a3e      	ldr	r2, [pc, #248]	@ (8001350 <HAL_GPIO_Init+0x2c8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d007      	beq.n	800126c <HAL_GPIO_Init+0x1e4>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a3d      	ldr	r2, [pc, #244]	@ (8001354 <HAL_GPIO_Init+0x2cc>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d101      	bne.n	8001268 <HAL_GPIO_Init+0x1e0>
 8001264:	2303      	movs	r3, #3
 8001266:	e006      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001268:	2304      	movs	r3, #4
 800126a:	e004      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 800126c:	2302      	movs	r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001274:	2300      	movs	r3, #0
 8001276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001278:	f002 0203 	and.w	r2, r2, #3
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	4093      	lsls	r3, r2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001286:	492f      	ldr	r1, [pc, #188]	@ (8001344 <HAL_GPIO_Init+0x2bc>)
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	492c      	ldr	r1, [pc, #176]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	4928      	ldr	r1, [pc, #160]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	4922      	ldr	r1, [pc, #136]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60cb      	str	r3, [r1, #12]
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	43db      	mvns	r3, r3
 80012de:	491e      	ldr	r1, [pc, #120]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4918      	ldr	r1, [pc, #96]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4914      	ldr	r1, [pc, #80]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d021      	beq.n	800135c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	490e      	ldr	r1, [pc, #56]	@ (8001358 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
 8001324:	e021      	b.n	800136a <HAL_GPIO_Init+0x2e2>
 8001326:	bf00      	nop
 8001328:	10320000 	.word	0x10320000
 800132c:	10310000 	.word	0x10310000
 8001330:	10220000 	.word	0x10220000
 8001334:	10210000 	.word	0x10210000
 8001338:	10120000 	.word	0x10120000
 800133c:	10110000 	.word	0x10110000
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00
 8001350:	40011000 	.word	0x40011000
 8001354:	40011400 	.word	0x40011400
 8001358:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_GPIO_Init+0x304>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	43db      	mvns	r3, r3
 8001364:	4909      	ldr	r1, [pc, #36]	@ (800138c <HAL_GPIO_Init+0x304>)
 8001366:	4013      	ands	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	3301      	adds	r3, #1
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	f47f ae8e 	bne.w	800109c <HAL_GPIO_Init+0x14>
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	372c      	adds	r7, #44	@ 0x2c
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f806 	bl	80013f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e272      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8087 	beq.w	8001532 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001424:	4b92      	ldr	r3, [pc, #584]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b04      	cmp	r3, #4
 800142e:	d00c      	beq.n	800144a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001430:	4b8f      	ldr	r3, [pc, #572]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b08      	cmp	r3, #8
 800143a:	d112      	bne.n	8001462 <HAL_RCC_OscConfig+0x5e>
 800143c:	4b8c      	ldr	r3, [pc, #560]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001448:	d10b      	bne.n	8001462 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144a:	4b89      	ldr	r3, [pc, #548]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d06c      	beq.n	8001530 <HAL_RCC_OscConfig+0x12c>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d168      	bne.n	8001530 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e24c      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x76>
 800146c:	4b80      	ldr	r3, [pc, #512]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a7f      	ldr	r2, [pc, #508]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e02e      	b.n	80014d8 <HAL_RCC_OscConfig+0xd4>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x98>
 8001482:	4b7b      	ldr	r3, [pc, #492]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a7a      	ldr	r2, [pc, #488]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b78      	ldr	r3, [pc, #480]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a77      	ldr	r2, [pc, #476]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xd4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0xbc>
 80014a6:	4b72      	ldr	r3, [pc, #456]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a71      	ldr	r2, [pc, #452]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xd4>
 80014c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a67      	ldr	r2, [pc, #412]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fbe4 	bl	8000cac <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fbe0 	bl	8000cac <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e200      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe4>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fbd0 	bl	8000cac <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fbcc 	bl	8000cac <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1ec      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b53      	ldr	r3, [pc, #332]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x10c>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153e:	4b4c      	ldr	r3, [pc, #304]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800154a:	4b49      	ldr	r3, [pc, #292]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x18c>
 8001556:	4b46      	ldr	r3, [pc, #280]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x176>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1c0      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4939      	ldr	r1, [pc, #228]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e03a      	b.n	8001606 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fb85 	bl	8000cac <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fb81 	bl	8000cac <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1a1      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4927      	ldr	r1, [pc, #156]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb64 	bl	8000cac <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fb60 	bl	8000cac <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e180      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d03a      	beq.n	8001688 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d019      	beq.n	800164e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_RCC_OscConfig+0x274>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff fb44 	bl	8000cac <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fb40 	bl	8000cac <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e160      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f000 face 	bl	8001be8 <RCC_Delay>
 800164c:	e01c      	b.n	8001688 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_RCC_OscConfig+0x274>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff fb2a 	bl	8000cac <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165a:	e00f      	b.n	800167c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff fb26 	bl	8000cac <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d908      	bls.n	800167c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e146      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	42420000 	.word	0x42420000
 8001678:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	4b92      	ldr	r3, [pc, #584]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e9      	bne.n	800165c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a6 	beq.w	80017e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b8b      	ldr	r3, [pc, #556]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10d      	bne.n	80016c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b88      	ldr	r3, [pc, #544]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a87      	ldr	r2, [pc, #540]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b85      	ldr	r3, [pc, #532]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b82      	ldr	r3, [pc, #520]	@ (80018cc <HAL_RCC_OscConfig+0x4c8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b7f      	ldr	r3, [pc, #508]	@ (80018cc <HAL_RCC_OscConfig+0x4c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7e      	ldr	r2, [pc, #504]	@ (80018cc <HAL_RCC_OscConfig+0x4c8>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fae7 	bl	8000cac <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff fae3 	bl	8000cac <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	@ 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e103      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b75      	ldr	r3, [pc, #468]	@ (80018cc <HAL_RCC_OscConfig+0x4c8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x312>
 8001708:	4b6f      	ldr	r3, [pc, #444]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a6e      	ldr	r2, [pc, #440]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e02d      	b.n	8001772 <HAL_RCC_OscConfig+0x36e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x334>
 800171e:	4b6a      	ldr	r3, [pc, #424]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a69      	ldr	r2, [pc, #420]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b67      	ldr	r3, [pc, #412]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a66      	ldr	r2, [pc, #408]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	e01c      	b.n	8001772 <HAL_RCC_OscConfig+0x36e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d10c      	bne.n	800175a <HAL_RCC_OscConfig+0x356>
 8001740:	4b61      	ldr	r3, [pc, #388]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a60      	ldr	r2, [pc, #384]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	4b5e      	ldr	r3, [pc, #376]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4a5d      	ldr	r2, [pc, #372]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6213      	str	r3, [r2, #32]
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0x36e>
 800175a:	4b5b      	ldr	r3, [pc, #364]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a5a      	ldr	r2, [pc, #360]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	4b58      	ldr	r3, [pc, #352]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a57      	ldr	r2, [pc, #348]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d015      	beq.n	80017a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fa97 	bl	8000cac <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fa93 	bl	8000cac <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0b1      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	4b4b      	ldr	r3, [pc, #300]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ee      	beq.n	8001782 <HAL_RCC_OscConfig+0x37e>
 80017a4:	e014      	b.n	80017d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa81 	bl	8000cac <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff fa7d 	bl	8000cac <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e09b      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	4b40      	ldr	r3, [pc, #256]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1ee      	bne.n	80017ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d105      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d6:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a3b      	ldr	r2, [pc, #236]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8087 	beq.w	80018fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ec:	4b36      	ldr	r3, [pc, #216]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d061      	beq.n	80018bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d146      	bne.n	800188e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001800:	4b33      	ldr	r3, [pc, #204]	@ (80018d0 <HAL_RCC_OscConfig+0x4cc>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff fa51 	bl	8000cac <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff fa4d 	bl	8000cac <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e06d      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001820:	4b29      	ldr	r3, [pc, #164]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001834:	d108      	bne.n	8001848 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001836:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4921      	ldr	r1, [pc, #132]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a19      	ldr	r1, [r3, #32]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	430b      	orrs	r3, r1
 800185a:	491b      	ldr	r1, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <HAL_RCC_OscConfig+0x4cc>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff fa21 	bl	8000cac <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff fa1d 	bl	8000cac <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e03d      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x46a>
 800188c:	e035      	b.n	80018fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_RCC_OscConfig+0x4cc>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fa0a 	bl	8000cac <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fa06 	bl	8000cac <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e026      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x498>
 80018ba:	e01e      	b.n	80018fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e019      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40007000 	.word	0x40007000
 80018d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_OscConfig+0x500>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0d0      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d910      	bls.n	800194c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b67      	ldr	r3, [pc, #412]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0207 	bic.w	r2, r3, #7
 8001932:	4965      	ldr	r1, [pc, #404]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a58      	ldr	r2, [pc, #352]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800196e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a52      	ldr	r2, [pc, #328]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001986:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d040      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e073      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06b      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4936      	ldr	r1, [pc, #216]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f958 	bl	8000cac <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff f954 	bl	8000cac <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e053      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d210      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 0207 	bic.w	r2, r3, #7
 8001a3e:	4922      	ldr	r1, [pc, #136]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f821 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	490a      	ldr	r1, [pc, #40]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8b6 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	08003b0c 	.word	0x08003b0c
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x30>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x36>
 8001b0a:	e027      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b0e:	613b      	str	r3, [r7, #16]
      break;
 8001b10:	e027      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d010      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	0c5b      	lsrs	r3, r3, #17
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	4a11      	ldr	r2, [pc, #68]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b3e:	fb03 f202 	mul.w	r2, r3, r2
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e004      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	613b      	str	r3, [r7, #16]
      break;
 8001b5a:	e002      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b5e:	613b      	str	r3, [r7, #16]
      break;
 8001b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b62:	693b      	ldr	r3, [r7, #16]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	007a1200 	.word	0x007a1200
 8001b78:	08003b24 	.word	0x08003b24
 8001b7c:	08003b34 	.word	0x08003b34
 8001b80:	003d0900 	.word	0x003d0900

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b02      	ldr	r3, [pc, #8]	@ (8001b94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	20000000 	.word	0x20000000

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b9c:	f7ff fff2 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08003b1c 	.word	0x08003b1c

08001bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc4:	f7ff ffde 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	0adb      	lsrs	r3, r3, #11
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	@ (8001be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08003b1c 	.word	0x08003b1c

08001be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <RCC_Delay+0x34>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <RCC_Delay+0x38>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0a5b      	lsrs	r3, r3, #9
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c04:	bf00      	nop
  }
  while (Delay --);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1e5a      	subs	r2, r3, #1
 8001c0a:	60fa      	str	r2, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f9      	bne.n	8001c04 <RCC_Delay+0x1c>
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	10624dd3 	.word	0x10624dd3

08001c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e041      	b.n	8001cba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fea4 	bl	8000998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 f992 	bl	8001f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_TIM_PWM_Start+0x24>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e022      	b.n	8001d2e <HAL_TIM_PWM_Start+0x6a>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d109      	bne.n	8001d02 <HAL_TIM_PWM_Start+0x3e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	e015      	b.n	8001d2e <HAL_TIM_PWM_Start+0x6a>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d109      	bne.n	8001d1c <HAL_TIM_PWM_Start+0x58>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e008      	b.n	8001d2e <HAL_TIM_PWM_Start+0x6a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e05e      	b.n	8001df4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <HAL_TIM_PWM_Start+0x82>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d44:	e013      	b.n	8001d6e <HAL_TIM_PWM_Start+0xaa>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d104      	bne.n	8001d56 <HAL_TIM_PWM_Start+0x92>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d54:	e00b      	b.n	8001d6e <HAL_TIM_PWM_Start+0xaa>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d104      	bne.n	8001d66 <HAL_TIM_PWM_Start+0xa2>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d64:	e003      	b.n	8001d6e <HAL_TIM_PWM_Start+0xaa>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fafe 	bl	8002378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <HAL_TIM_PWM_Start+0x138>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d107      	bne.n	8001d96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a18      	ldr	r2, [pc, #96]	@ (8001dfc <HAL_TIM_PWM_Start+0x138>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00e      	beq.n	8001dbe <HAL_TIM_PWM_Start+0xfa>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da8:	d009      	beq.n	8001dbe <HAL_TIM_PWM_Start+0xfa>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <HAL_TIM_PWM_Start+0x13c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d004      	beq.n	8001dbe <HAL_TIM_PWM_Start+0xfa>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <HAL_TIM_PWM_Start+0x140>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d111      	bne.n	8001de2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b06      	cmp	r3, #6
 8001dce:	d010      	beq.n	8001df2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de0:	e007      	b.n	8001df2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40000800 	.word	0x40000800

08001e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e0ae      	b.n	8001f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	f200 809f 	bhi.w	8001f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e36:	a201      	add	r2, pc, #4	@ (adr r2, 8001e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e71 	.word	0x08001e71
 8001e40:	08001f75 	.word	0x08001f75
 8001e44:	08001f75 	.word	0x08001f75
 8001e48:	08001f75 	.word	0x08001f75
 8001e4c:	08001eb1 	.word	0x08001eb1
 8001e50:	08001f75 	.word	0x08001f75
 8001e54:	08001f75 	.word	0x08001f75
 8001e58:	08001f75 	.word	0x08001f75
 8001e5c:	08001ef3 	.word	0x08001ef3
 8001e60:	08001f75 	.word	0x08001f75
 8001e64:	08001f75 	.word	0x08001f75
 8001e68:	08001f75 	.word	0x08001f75
 8001e6c:	08001f33 	.word	0x08001f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f8f6 	bl	8002068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0208 	orr.w	r2, r2, #8
 8001e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0204 	bic.w	r2, r2, #4
 8001e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6999      	ldr	r1, [r3, #24]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	619a      	str	r2, [r3, #24]
      break;
 8001eae:	e064      	b.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f93c 	bl	8002134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6999      	ldr	r1, [r3, #24]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	021a      	lsls	r2, r3, #8
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	619a      	str	r2, [r3, #24]
      break;
 8001ef0:	e043      	b.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f985 	bl	8002208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0208 	orr.w	r2, r2, #8
 8001f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0204 	bic.w	r2, r2, #4
 8001f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69d9      	ldr	r1, [r3, #28]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	61da      	str	r2, [r3, #28]
      break;
 8001f30:	e023      	b.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f9cf 	bl	80022dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69d9      	ldr	r1, [r3, #28]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	021a      	lsls	r2, r3, #8
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	61da      	str	r2, [r3, #28]
      break;
 8001f72:	e002      	b.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	75fb      	strb	r3, [r7, #23]
      break;
 8001f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800205c <TIM_Base_SetConfig+0xd0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x30>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x30>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a2c      	ldr	r2, [pc, #176]	@ (8002060 <TIM_Base_SetConfig+0xd4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x30>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8002064 <TIM_Base_SetConfig+0xd8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a22      	ldr	r2, [pc, #136]	@ (800205c <TIM_Base_SetConfig+0xd0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x62>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x62>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8002060 <TIM_Base_SetConfig+0xd4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x62>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8002064 <TIM_Base_SetConfig+0xd8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <TIM_Base_SetConfig+0xd0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f023 0201 	bic.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
  }
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40000400 	.word	0x40000400
 8002064:	40000800 	.word	0x40000800

08002068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f023 0201 	bic.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0303 	bic.w	r3, r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f023 0302 	bic.w	r3, r3, #2
 80020b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <TIM_OC1_SetConfig+0xc8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d10c      	bne.n	80020de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f023 0308 	bic.w	r3, r3, #8
 80020ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f023 0304 	bic.w	r3, r3, #4
 80020dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a13      	ldr	r2, [pc, #76]	@ (8002130 <TIM_OC1_SetConfig+0xc8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d111      	bne.n	800210a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80020f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	621a      	str	r2, [r3, #32]
}
 8002124:	bf00      	nop
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40012c00 	.word	0x40012c00

08002134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f023 0210 	bic.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800216a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f023 0320 	bic.w	r3, r3, #32
 800217e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a1d      	ldr	r2, [pc, #116]	@ (8002204 <TIM_OC2_SetConfig+0xd0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d10d      	bne.n	80021b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800219a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a14      	ldr	r2, [pc, #80]	@ (8002204 <TIM_OC2_SetConfig+0xd0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d113      	bne.n	80021e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	621a      	str	r2, [r3, #32]
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40012c00 	.word	0x40012c00

08002208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1d      	ldr	r2, [pc, #116]	@ (80022d8 <TIM_OC3_SetConfig+0xd0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10d      	bne.n	8002282 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800226c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <TIM_OC3_SetConfig+0xd0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d113      	bne.n	80022b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	621a      	str	r2, [r3, #32]
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40012c00 	.word	0x40012c00

080022dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800230a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	031b      	lsls	r3, r3, #12
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a0f      	ldr	r2, [pc, #60]	@ (8002374 <TIM_OC4_SetConfig+0x98>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d109      	bne.n	8002350 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	621a      	str	r2, [r3, #32]
}
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	40012c00 	.word	0x40012c00

08002378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2201      	movs	r2, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a1a      	ldr	r2, [r3, #32]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	431a      	orrs	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	621a      	str	r2, [r3, #32]
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e046      	b.n	8002466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a16      	ldr	r2, [pc, #88]	@ (8002470 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002424:	d009      	beq.n	800243a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a10      	ldr	r2, [pc, #64]	@ (8002478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10c      	bne.n	8002454 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4313      	orrs	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40000400 	.word	0x40000400
 8002478:	40000800 	.word	0x40000800

0800247c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e042      	b.n	8002514 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fac4 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	@ 0x24
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fdb7 	bl	8003034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	@ 0x28
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b20      	cmp	r3, #32
 800253a:	d175      	bne.n	8002628 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_UART_Transmit+0x2c>
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e06e      	b.n	800262a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2221      	movs	r2, #33	@ 0x21
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800255a:	f7fe fba7 	bl	8000cac <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	88fa      	ldrh	r2, [r7, #6]
 8002564:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002574:	d108      	bne.n	8002588 <HAL_UART_Transmit+0x6c>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	e003      	b.n	8002590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002590:	e02e      	b.n	80025f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	2180      	movs	r1, #128	@ 0x80
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fb1c 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e03a      	b.n	800262a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10b      	bne.n	80025d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3302      	adds	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	e007      	b.n	80025e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3301      	adds	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1cb      	bne.n	8002592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	@ 0x40
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fae8 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e006      	b.n	800262a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	4613      	mov	r3, r2
 800263e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b20      	cmp	r3, #32
 800264a:	d112      	bne.n	8002672 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_UART_Receive_IT+0x26>
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e00b      	b.n	8002674 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	461a      	mov	r2, r3
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fb0f 	bl	8002c8c <UART_Start_Receive_IT>
 800266e:	4603      	mov	r3, r0
 8002670:	e000      	b.n	8002674 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0ba      	sub	sp, #232	@ 0xe8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80026ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10f      	bne.n	80026e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_UART_IRQHandler+0x66>
 80026ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fbec 	bl	8002eb8 <UART_Receive_IT>
      return;
 80026e0:	e25b      	b.n	8002b9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80de 	beq.w	80028a8 <HAL_UART_IRQHandler+0x22c>
 80026ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80d1 	beq.w	80028a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_UART_IRQHandler+0xae>
 8002712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800272a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_UART_IRQHandler+0xd2>
 8002736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800274e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_UART_IRQHandler+0xf6>
 800275a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d011      	beq.n	80027a2 <HAL_UART_IRQHandler+0x126>
 800277e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800278a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f043 0208 	orr.w	r2, r3, #8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 81f2 	beq.w	8002b90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_UART_IRQHandler+0x14e>
 80027b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fb77 	bl	8002eb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <HAL_UART_IRQHandler+0x17a>
 80027ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04f      	beq.n	8002896 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa81 	bl	8002cfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d041      	beq.n	800288e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002818:	e853 3f00 	ldrex	r3, [r3]
 800281c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3314      	adds	r3, #20
 8002832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002836:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800283a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800284e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1d9      	bne.n	800280a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d013      	beq.n	8002886 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002862:	4a7e      	ldr	r2, [pc, #504]	@ (8002a5c <HAL_UART_IRQHandler+0x3e0>)
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fb94 	bl	8000f98 <HAL_DMA_Abort_IT>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002880:	4610      	mov	r0, r2
 8002882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	e00e      	b.n	80028a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f993 	bl	8002bb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288c:	e00a      	b.n	80028a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f98f 	bl	8002bb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	e006      	b.n	80028a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f98b 	bl	8002bb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80028a2:	e175      	b.n	8002b90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a4:	bf00      	nop
    return;
 80028a6:	e173      	b.n	8002b90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f040 814f 	bne.w	8002b50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8148 	beq.w	8002b50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8141 	beq.w	8002b50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80b6 	beq.w	8002a60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8145 	beq.w	8002b94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800290e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002912:	429a      	cmp	r2, r3
 8002914:	f080 813e 	bcs.w	8002b94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800291e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b20      	cmp	r3, #32
 8002928:	f000 8088 	beq.w	8002a3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002942:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800294a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002958:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800295c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002964:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002968:	e841 2300 	strex	r3, r2, [r1]
 800296c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1d9      	bne.n	800292c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3314      	adds	r3, #20
 800297e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800299c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029a8:	e841 2300 	strex	r3, r2, [r1]
 80029ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e1      	bne.n	8002978 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80029c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3314      	adds	r3, #20
 80029d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e3      	bne.n	80029b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a0c:	f023 0310 	bic.w	r3, r3, #16
 8002a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a1e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a20:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e3      	bne.n	80029fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fa73 	bl	8000f22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8b6 	bl	8002bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a58:	e09c      	b.n	8002b94 <HAL_UART_IRQHandler+0x518>
 8002a5a:	bf00      	nop
 8002a5c:	08002dc3 	.word	0x08002dc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 808e 	beq.w	8002b98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8089 	beq.w	8002b98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002aaa:	647a      	str	r2, [r7, #68]	@ 0x44
 8002aac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e3      	bne.n	8002a86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ae2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aea:	e841 2300 	strex	r3, r2, [r1]
 8002aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1e3      	bne.n	8002abe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0310 	bic.w	r3, r3, #16
 8002b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b28:	61fa      	str	r2, [r7, #28]
 8002b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	69b9      	ldr	r1, [r7, #24]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	e841 2300 	strex	r3, r2, [r1]
 8002b34:	617b      	str	r3, [r7, #20]
   return(result);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e3      	bne.n	8002b04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f83b 	bl	8002bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b4e:	e023      	b.n	8002b98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_UART_IRQHandler+0x4f4>
 8002b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f93e 	bl	8002dea <UART_Transmit_IT>
    return;
 8002b6e:	e014      	b.n	8002b9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <HAL_UART_IRQHandler+0x51e>
 8002b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f97d 	bl	8002e88 <UART_EndTransmit_IT>
    return;
 8002b8e:	e004      	b.n	8002b9a <HAL_UART_IRQHandler+0x51e>
    return;
 8002b90:	bf00      	nop
 8002b92:	e002      	b.n	8002b9a <HAL_UART_IRQHandler+0x51e>
      return;
 8002b94:	bf00      	nop
 8002b96:	e000      	b.n	8002b9a <HAL_UART_IRQHandler+0x51e>
      return;
 8002b98:	bf00      	nop
  }
}
 8002b9a:	37e8      	adds	r7, #232	@ 0xe8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4613      	mov	r3, r2
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bea:	e03b      	b.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf2:	d037      	beq.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7fe f85a 	bl	8000cac <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e03a      	b.n	8002c84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d023      	beq.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b80      	cmp	r3, #128	@ 0x80
 8002c20:	d020      	beq.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b40      	cmp	r3, #64	@ 0x40
 8002c26:	d01d      	beq.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d116      	bne.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f856 	bl	8002cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2208      	movs	r2, #8
 8002c56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e00f      	b.n	8002c84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d0b4      	beq.n	8002bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2222      	movs	r2, #34	@ 0x22
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0220 	orr.w	r2, r2, #32
 8002cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b095      	sub	sp, #84	@ 0x54
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d26:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e5      	bne.n	8002d06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3314      	adds	r3, #20
 8002d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3314      	adds	r3, #20
 8002d58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e5      	bne.n	8002d3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d119      	bne.n	8002daa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f023 0310 	bic.w	r3, r3, #16
 8002d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	330c      	adds	r3, #12
 8002d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d96:	61ba      	str	r2, [r7, #24]
 8002d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	6979      	ldr	r1, [r7, #20]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	613b      	str	r3, [r7, #16]
   return(result);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e5      	bne.n	8002d76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002db8:	bf00      	nop
 8002dba:	3754      	adds	r7, #84	@ 0x54
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff fee8 	bl	8002bb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b21      	cmp	r3, #33	@ 0x21
 8002dfc:	d13e      	bne.n	8002e7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e06:	d114      	bne.n	8002e32 <UART_Transmit_IT+0x48>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d110      	bne.n	8002e32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	1c9a      	adds	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	621a      	str	r2, [r3, #32]
 8002e30:	e008      	b.n	8002e44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6211      	str	r1, [r2, #32]
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4619      	mov	r1, r3
 8002e52:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10f      	bne.n	8002e78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fe79 	bl	8002ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	@ 0x30
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b22      	cmp	r3, #34	@ 0x22
 8002eca:	f040 80ae 	bne.w	800302a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed6:	d117      	bne.n	8002f08 <UART_Receive_IT+0x50>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d113      	bne.n	8002f08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	1c9a      	adds	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f06:	e026      	b.n	8002f56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f1a:	d007      	beq.n	8002f2c <UART_Receive_IT+0x74>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <UART_Receive_IT+0x82>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e008      	b.n	8002f4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4619      	mov	r1, r3
 8002f64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d15d      	bne.n	8003026 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0220 	bic.w	r2, r2, #32
 8002f78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d135      	bne.n	800301c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f023 0310 	bic.w	r3, r3, #16
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd6:	623a      	str	r2, [r7, #32]
 8002fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	69f9      	ldr	r1, [r7, #28]
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e5      	bne.n	8002fb6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d10a      	bne.n	800300e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fdd5 	bl	8002bc4 <HAL_UARTEx_RxEventCallback>
 800301a:	e002      	b.n	8003022 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd fa7f 	bl	8000520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e002      	b.n	800302c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3730      	adds	r7, #48	@ 0x30
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800306e:	f023 030c 	bic.w	r3, r3, #12
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	430b      	orrs	r3, r1
 800307a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2c      	ldr	r2, [pc, #176]	@ (8003148 <UART_SetConfig+0x114>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d103      	bne.n	80030a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800309c:	f7fe fd90 	bl	8001bc0 <HAL_RCC_GetPCLK2Freq>
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	e002      	b.n	80030aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030a4:	f7fe fd78 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 80030a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	009a      	lsls	r2, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	4a22      	ldr	r2, [pc, #136]	@ (800314c <UART_SetConfig+0x118>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	0119      	lsls	r1, r3, #4
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009a      	lsls	r2, r3, #2
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e0:	4b1a      	ldr	r3, [pc, #104]	@ (800314c <UART_SetConfig+0x118>)
 80030e2:	fba3 0302 	umull	r0, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2064      	movs	r0, #100	@ 0x64
 80030ea:	fb00 f303 	mul.w	r3, r0, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	3332      	adds	r3, #50	@ 0x32
 80030f4:	4a15      	ldr	r2, [pc, #84]	@ (800314c <UART_SetConfig+0x118>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003100:	4419      	add	r1, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009a      	lsls	r2, r3, #2
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	fbb2 f2f3 	udiv	r2, r2, r3
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <UART_SetConfig+0x118>)
 800311a:	fba3 0302 	umull	r0, r3, r3, r2
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2064      	movs	r0, #100	@ 0x64
 8003122:	fb00 f303 	mul.w	r3, r0, r3
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	3332      	adds	r3, #50	@ 0x32
 800312c:	4a07      	ldr	r2, [pc, #28]	@ (800314c <UART_SetConfig+0x118>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	f003 020f 	and.w	r2, r3, #15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	440a      	add	r2, r1
 800313e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40013800 	.word	0x40013800
 800314c:	51eb851f 	.word	0x51eb851f

08003150 <sniprintf>:
 8003150:	b40c      	push	{r2, r3}
 8003152:	b530      	push	{r4, r5, lr}
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <sniprintf+0x68>)
 8003156:	1e0c      	subs	r4, r1, #0
 8003158:	681d      	ldr	r5, [r3, #0]
 800315a:	b09d      	sub	sp, #116	@ 0x74
 800315c:	da08      	bge.n	8003170 <sniprintf+0x20>
 800315e:	238b      	movs	r3, #139	@ 0x8b
 8003160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003164:	602b      	str	r3, [r5, #0]
 8003166:	b01d      	add	sp, #116	@ 0x74
 8003168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800316c:	b002      	add	sp, #8
 800316e:	4770      	bx	lr
 8003170:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003174:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800317e:	bf0c      	ite	eq
 8003180:	4623      	moveq	r3, r4
 8003182:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003186:	9304      	str	r3, [sp, #16]
 8003188:	9307      	str	r3, [sp, #28]
 800318a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800318e:	9002      	str	r0, [sp, #8]
 8003190:	9006      	str	r0, [sp, #24]
 8003192:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003196:	4628      	mov	r0, r5
 8003198:	ab21      	add	r3, sp, #132	@ 0x84
 800319a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800319c:	a902      	add	r1, sp, #8
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	f000 f992 	bl	80034c8 <_svfiprintf_r>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	bfbc      	itt	lt
 80031a8:	238b      	movlt	r3, #139	@ 0x8b
 80031aa:	602b      	strlt	r3, [r5, #0]
 80031ac:	2c00      	cmp	r4, #0
 80031ae:	d0da      	beq.n	8003166 <sniprintf+0x16>
 80031b0:	2200      	movs	r2, #0
 80031b2:	9b02      	ldr	r3, [sp, #8]
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e7d6      	b.n	8003166 <sniprintf+0x16>
 80031b8:	2000000c 	.word	0x2000000c

080031bc <memset>:
 80031bc:	4603      	mov	r3, r0
 80031be:	4402      	add	r2, r0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d100      	bne.n	80031c6 <memset+0xa>
 80031c4:	4770      	bx	lr
 80031c6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ca:	e7f9      	b.n	80031c0 <memset+0x4>

080031cc <__errno>:
 80031cc:	4b01      	ldr	r3, [pc, #4]	@ (80031d4 <__errno+0x8>)
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	2000000c 	.word	0x2000000c

080031d8 <__libc_init_array>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	2600      	movs	r6, #0
 80031dc:	4d0c      	ldr	r5, [pc, #48]	@ (8003210 <__libc_init_array+0x38>)
 80031de:	4c0d      	ldr	r4, [pc, #52]	@ (8003214 <__libc_init_array+0x3c>)
 80031e0:	1b64      	subs	r4, r4, r5
 80031e2:	10a4      	asrs	r4, r4, #2
 80031e4:	42a6      	cmp	r6, r4
 80031e6:	d109      	bne.n	80031fc <__libc_init_array+0x24>
 80031e8:	f000 fc76 	bl	8003ad8 <_init>
 80031ec:	2600      	movs	r6, #0
 80031ee:	4d0a      	ldr	r5, [pc, #40]	@ (8003218 <__libc_init_array+0x40>)
 80031f0:	4c0a      	ldr	r4, [pc, #40]	@ (800321c <__libc_init_array+0x44>)
 80031f2:	1b64      	subs	r4, r4, r5
 80031f4:	10a4      	asrs	r4, r4, #2
 80031f6:	42a6      	cmp	r6, r4
 80031f8:	d105      	bne.n	8003206 <__libc_init_array+0x2e>
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
 80031fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003200:	4798      	blx	r3
 8003202:	3601      	adds	r6, #1
 8003204:	e7ee      	b.n	80031e4 <__libc_init_array+0xc>
 8003206:	f855 3b04 	ldr.w	r3, [r5], #4
 800320a:	4798      	blx	r3
 800320c:	3601      	adds	r6, #1
 800320e:	e7f2      	b.n	80031f6 <__libc_init_array+0x1e>
 8003210:	08003b74 	.word	0x08003b74
 8003214:	08003b74 	.word	0x08003b74
 8003218:	08003b74 	.word	0x08003b74
 800321c:	08003b78 	.word	0x08003b78

08003220 <__retarget_lock_acquire_recursive>:
 8003220:	4770      	bx	lr

08003222 <__retarget_lock_release_recursive>:
 8003222:	4770      	bx	lr

08003224 <_free_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4605      	mov	r5, r0
 8003228:	2900      	cmp	r1, #0
 800322a:	d040      	beq.n	80032ae <_free_r+0x8a>
 800322c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003230:	1f0c      	subs	r4, r1, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	bfb8      	it	lt
 8003236:	18e4      	addlt	r4, r4, r3
 8003238:	f000 f8de 	bl	80033f8 <__malloc_lock>
 800323c:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <_free_r+0x8c>)
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	b933      	cbnz	r3, 8003250 <_free_r+0x2c>
 8003242:	6063      	str	r3, [r4, #4]
 8003244:	6014      	str	r4, [r2, #0]
 8003246:	4628      	mov	r0, r5
 8003248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800324c:	f000 b8da 	b.w	8003404 <__malloc_unlock>
 8003250:	42a3      	cmp	r3, r4
 8003252:	d908      	bls.n	8003266 <_free_r+0x42>
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	1821      	adds	r1, r4, r0
 8003258:	428b      	cmp	r3, r1
 800325a:	bf01      	itttt	eq
 800325c:	6819      	ldreq	r1, [r3, #0]
 800325e:	685b      	ldreq	r3, [r3, #4]
 8003260:	1809      	addeq	r1, r1, r0
 8003262:	6021      	streq	r1, [r4, #0]
 8003264:	e7ed      	b.n	8003242 <_free_r+0x1e>
 8003266:	461a      	mov	r2, r3
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	b10b      	cbz	r3, 8003270 <_free_r+0x4c>
 800326c:	42a3      	cmp	r3, r4
 800326e:	d9fa      	bls.n	8003266 <_free_r+0x42>
 8003270:	6811      	ldr	r1, [r2, #0]
 8003272:	1850      	adds	r0, r2, r1
 8003274:	42a0      	cmp	r0, r4
 8003276:	d10b      	bne.n	8003290 <_free_r+0x6c>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	4401      	add	r1, r0
 800327c:	1850      	adds	r0, r2, r1
 800327e:	4283      	cmp	r3, r0
 8003280:	6011      	str	r1, [r2, #0]
 8003282:	d1e0      	bne.n	8003246 <_free_r+0x22>
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4408      	add	r0, r1
 800328a:	6010      	str	r0, [r2, #0]
 800328c:	6053      	str	r3, [r2, #4]
 800328e:	e7da      	b.n	8003246 <_free_r+0x22>
 8003290:	d902      	bls.n	8003298 <_free_r+0x74>
 8003292:	230c      	movs	r3, #12
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	e7d6      	b.n	8003246 <_free_r+0x22>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	1821      	adds	r1, r4, r0
 800329c:	428b      	cmp	r3, r1
 800329e:	bf01      	itttt	eq
 80032a0:	6819      	ldreq	r1, [r3, #0]
 80032a2:	685b      	ldreq	r3, [r3, #4]
 80032a4:	1809      	addeq	r1, r1, r0
 80032a6:	6021      	streq	r1, [r4, #0]
 80032a8:	6063      	str	r3, [r4, #4]
 80032aa:	6054      	str	r4, [r2, #4]
 80032ac:	e7cb      	b.n	8003246 <_free_r+0x22>
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	2000025c 	.word	0x2000025c

080032b4 <sbrk_aligned>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	4e0f      	ldr	r6, [pc, #60]	@ (80032f4 <sbrk_aligned+0x40>)
 80032b8:	460c      	mov	r4, r1
 80032ba:	6831      	ldr	r1, [r6, #0]
 80032bc:	4605      	mov	r5, r0
 80032be:	b911      	cbnz	r1, 80032c6 <sbrk_aligned+0x12>
 80032c0:	f000 fba8 	bl	8003a14 <_sbrk_r>
 80032c4:	6030      	str	r0, [r6, #0]
 80032c6:	4621      	mov	r1, r4
 80032c8:	4628      	mov	r0, r5
 80032ca:	f000 fba3 	bl	8003a14 <_sbrk_r>
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	d103      	bne.n	80032da <sbrk_aligned+0x26>
 80032d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80032d6:	4620      	mov	r0, r4
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
 80032da:	1cc4      	adds	r4, r0, #3
 80032dc:	f024 0403 	bic.w	r4, r4, #3
 80032e0:	42a0      	cmp	r0, r4
 80032e2:	d0f8      	beq.n	80032d6 <sbrk_aligned+0x22>
 80032e4:	1a21      	subs	r1, r4, r0
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 fb94 	bl	8003a14 <_sbrk_r>
 80032ec:	3001      	adds	r0, #1
 80032ee:	d1f2      	bne.n	80032d6 <sbrk_aligned+0x22>
 80032f0:	e7ef      	b.n	80032d2 <sbrk_aligned+0x1e>
 80032f2:	bf00      	nop
 80032f4:	20000258 	.word	0x20000258

080032f8 <_malloc_r>:
 80032f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032fc:	1ccd      	adds	r5, r1, #3
 80032fe:	f025 0503 	bic.w	r5, r5, #3
 8003302:	3508      	adds	r5, #8
 8003304:	2d0c      	cmp	r5, #12
 8003306:	bf38      	it	cc
 8003308:	250c      	movcc	r5, #12
 800330a:	2d00      	cmp	r5, #0
 800330c:	4606      	mov	r6, r0
 800330e:	db01      	blt.n	8003314 <_malloc_r+0x1c>
 8003310:	42a9      	cmp	r1, r5
 8003312:	d904      	bls.n	800331e <_malloc_r+0x26>
 8003314:	230c      	movs	r3, #12
 8003316:	6033      	str	r3, [r6, #0]
 8003318:	2000      	movs	r0, #0
 800331a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800331e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033f4 <_malloc_r+0xfc>
 8003322:	f000 f869 	bl	80033f8 <__malloc_lock>
 8003326:	f8d8 3000 	ldr.w	r3, [r8]
 800332a:	461c      	mov	r4, r3
 800332c:	bb44      	cbnz	r4, 8003380 <_malloc_r+0x88>
 800332e:	4629      	mov	r1, r5
 8003330:	4630      	mov	r0, r6
 8003332:	f7ff ffbf 	bl	80032b4 <sbrk_aligned>
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	4604      	mov	r4, r0
 800333a:	d158      	bne.n	80033ee <_malloc_r+0xf6>
 800333c:	f8d8 4000 	ldr.w	r4, [r8]
 8003340:	4627      	mov	r7, r4
 8003342:	2f00      	cmp	r7, #0
 8003344:	d143      	bne.n	80033ce <_malloc_r+0xd6>
 8003346:	2c00      	cmp	r4, #0
 8003348:	d04b      	beq.n	80033e2 <_malloc_r+0xea>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	4639      	mov	r1, r7
 800334e:	4630      	mov	r0, r6
 8003350:	eb04 0903 	add.w	r9, r4, r3
 8003354:	f000 fb5e 	bl	8003a14 <_sbrk_r>
 8003358:	4581      	cmp	r9, r0
 800335a:	d142      	bne.n	80033e2 <_malloc_r+0xea>
 800335c:	6821      	ldr	r1, [r4, #0]
 800335e:	4630      	mov	r0, r6
 8003360:	1a6d      	subs	r5, r5, r1
 8003362:	4629      	mov	r1, r5
 8003364:	f7ff ffa6 	bl	80032b4 <sbrk_aligned>
 8003368:	3001      	adds	r0, #1
 800336a:	d03a      	beq.n	80033e2 <_malloc_r+0xea>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	442b      	add	r3, r5
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	f8d8 3000 	ldr.w	r3, [r8]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	bb62      	cbnz	r2, 80033d4 <_malloc_r+0xdc>
 800337a:	f8c8 7000 	str.w	r7, [r8]
 800337e:	e00f      	b.n	80033a0 <_malloc_r+0xa8>
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	1b52      	subs	r2, r2, r5
 8003384:	d420      	bmi.n	80033c8 <_malloc_r+0xd0>
 8003386:	2a0b      	cmp	r2, #11
 8003388:	d917      	bls.n	80033ba <_malloc_r+0xc2>
 800338a:	1961      	adds	r1, r4, r5
 800338c:	42a3      	cmp	r3, r4
 800338e:	6025      	str	r5, [r4, #0]
 8003390:	bf18      	it	ne
 8003392:	6059      	strne	r1, [r3, #4]
 8003394:	6863      	ldr	r3, [r4, #4]
 8003396:	bf08      	it	eq
 8003398:	f8c8 1000 	streq.w	r1, [r8]
 800339c:	5162      	str	r2, [r4, r5]
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 f82f 	bl	8003404 <__malloc_unlock>
 80033a6:	f104 000b 	add.w	r0, r4, #11
 80033aa:	1d23      	adds	r3, r4, #4
 80033ac:	f020 0007 	bic.w	r0, r0, #7
 80033b0:	1ac2      	subs	r2, r0, r3
 80033b2:	bf1c      	itt	ne
 80033b4:	1a1b      	subne	r3, r3, r0
 80033b6:	50a3      	strne	r3, [r4, r2]
 80033b8:	e7af      	b.n	800331a <_malloc_r+0x22>
 80033ba:	6862      	ldr	r2, [r4, #4]
 80033bc:	42a3      	cmp	r3, r4
 80033be:	bf0c      	ite	eq
 80033c0:	f8c8 2000 	streq.w	r2, [r8]
 80033c4:	605a      	strne	r2, [r3, #4]
 80033c6:	e7eb      	b.n	80033a0 <_malloc_r+0xa8>
 80033c8:	4623      	mov	r3, r4
 80033ca:	6864      	ldr	r4, [r4, #4]
 80033cc:	e7ae      	b.n	800332c <_malloc_r+0x34>
 80033ce:	463c      	mov	r4, r7
 80033d0:	687f      	ldr	r7, [r7, #4]
 80033d2:	e7b6      	b.n	8003342 <_malloc_r+0x4a>
 80033d4:	461a      	mov	r2, r3
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	42a3      	cmp	r3, r4
 80033da:	d1fb      	bne.n	80033d4 <_malloc_r+0xdc>
 80033dc:	2300      	movs	r3, #0
 80033de:	6053      	str	r3, [r2, #4]
 80033e0:	e7de      	b.n	80033a0 <_malloc_r+0xa8>
 80033e2:	230c      	movs	r3, #12
 80033e4:	4630      	mov	r0, r6
 80033e6:	6033      	str	r3, [r6, #0]
 80033e8:	f000 f80c 	bl	8003404 <__malloc_unlock>
 80033ec:	e794      	b.n	8003318 <_malloc_r+0x20>
 80033ee:	6005      	str	r5, [r0, #0]
 80033f0:	e7d6      	b.n	80033a0 <_malloc_r+0xa8>
 80033f2:	bf00      	nop
 80033f4:	2000025c 	.word	0x2000025c

080033f8 <__malloc_lock>:
 80033f8:	4801      	ldr	r0, [pc, #4]	@ (8003400 <__malloc_lock+0x8>)
 80033fa:	f7ff bf11 	b.w	8003220 <__retarget_lock_acquire_recursive>
 80033fe:	bf00      	nop
 8003400:	20000254 	.word	0x20000254

08003404 <__malloc_unlock>:
 8003404:	4801      	ldr	r0, [pc, #4]	@ (800340c <__malloc_unlock+0x8>)
 8003406:	f7ff bf0c 	b.w	8003222 <__retarget_lock_release_recursive>
 800340a:	bf00      	nop
 800340c:	20000254 	.word	0x20000254

08003410 <__ssputs_r>:
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	461f      	mov	r7, r3
 8003416:	688e      	ldr	r6, [r1, #8]
 8003418:	4682      	mov	sl, r0
 800341a:	42be      	cmp	r6, r7
 800341c:	460c      	mov	r4, r1
 800341e:	4690      	mov	r8, r2
 8003420:	680b      	ldr	r3, [r1, #0]
 8003422:	d82d      	bhi.n	8003480 <__ssputs_r+0x70>
 8003424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003428:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800342c:	d026      	beq.n	800347c <__ssputs_r+0x6c>
 800342e:	6965      	ldr	r5, [r4, #20]
 8003430:	6909      	ldr	r1, [r1, #16]
 8003432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003436:	eba3 0901 	sub.w	r9, r3, r1
 800343a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800343e:	1c7b      	adds	r3, r7, #1
 8003440:	444b      	add	r3, r9
 8003442:	106d      	asrs	r5, r5, #1
 8003444:	429d      	cmp	r5, r3
 8003446:	bf38      	it	cc
 8003448:	461d      	movcc	r5, r3
 800344a:	0553      	lsls	r3, r2, #21
 800344c:	d527      	bpl.n	800349e <__ssputs_r+0x8e>
 800344e:	4629      	mov	r1, r5
 8003450:	f7ff ff52 	bl	80032f8 <_malloc_r>
 8003454:	4606      	mov	r6, r0
 8003456:	b360      	cbz	r0, 80034b2 <__ssputs_r+0xa2>
 8003458:	464a      	mov	r2, r9
 800345a:	6921      	ldr	r1, [r4, #16]
 800345c:	f000 faf8 	bl	8003a50 <memcpy>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346a:	81a3      	strh	r3, [r4, #12]
 800346c:	6126      	str	r6, [r4, #16]
 800346e:	444e      	add	r6, r9
 8003470:	6026      	str	r6, [r4, #0]
 8003472:	463e      	mov	r6, r7
 8003474:	6165      	str	r5, [r4, #20]
 8003476:	eba5 0509 	sub.w	r5, r5, r9
 800347a:	60a5      	str	r5, [r4, #8]
 800347c:	42be      	cmp	r6, r7
 800347e:	d900      	bls.n	8003482 <__ssputs_r+0x72>
 8003480:	463e      	mov	r6, r7
 8003482:	4632      	mov	r2, r6
 8003484:	4641      	mov	r1, r8
 8003486:	6820      	ldr	r0, [r4, #0]
 8003488:	f000 faaa 	bl	80039e0 <memmove>
 800348c:	2000      	movs	r0, #0
 800348e:	68a3      	ldr	r3, [r4, #8]
 8003490:	1b9b      	subs	r3, r3, r6
 8003492:	60a3      	str	r3, [r4, #8]
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	4433      	add	r3, r6
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349e:	462a      	mov	r2, r5
 80034a0:	f000 fae4 	bl	8003a6c <_realloc_r>
 80034a4:	4606      	mov	r6, r0
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d1e0      	bne.n	800346c <__ssputs_r+0x5c>
 80034aa:	4650      	mov	r0, sl
 80034ac:	6921      	ldr	r1, [r4, #16]
 80034ae:	f7ff feb9 	bl	8003224 <_free_r>
 80034b2:	230c      	movs	r3, #12
 80034b4:	f8ca 3000 	str.w	r3, [sl]
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c2:	81a3      	strh	r3, [r4, #12]
 80034c4:	e7e9      	b.n	800349a <__ssputs_r+0x8a>
	...

080034c8 <_svfiprintf_r>:
 80034c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034cc:	4698      	mov	r8, r3
 80034ce:	898b      	ldrh	r3, [r1, #12]
 80034d0:	4607      	mov	r7, r0
 80034d2:	061b      	lsls	r3, r3, #24
 80034d4:	460d      	mov	r5, r1
 80034d6:	4614      	mov	r4, r2
 80034d8:	b09d      	sub	sp, #116	@ 0x74
 80034da:	d510      	bpl.n	80034fe <_svfiprintf_r+0x36>
 80034dc:	690b      	ldr	r3, [r1, #16]
 80034de:	b973      	cbnz	r3, 80034fe <_svfiprintf_r+0x36>
 80034e0:	2140      	movs	r1, #64	@ 0x40
 80034e2:	f7ff ff09 	bl	80032f8 <_malloc_r>
 80034e6:	6028      	str	r0, [r5, #0]
 80034e8:	6128      	str	r0, [r5, #16]
 80034ea:	b930      	cbnz	r0, 80034fa <_svfiprintf_r+0x32>
 80034ec:	230c      	movs	r3, #12
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034f4:	b01d      	add	sp, #116	@ 0x74
 80034f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fa:	2340      	movs	r3, #64	@ 0x40
 80034fc:	616b      	str	r3, [r5, #20]
 80034fe:	2300      	movs	r3, #0
 8003500:	9309      	str	r3, [sp, #36]	@ 0x24
 8003502:	2320      	movs	r3, #32
 8003504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003508:	2330      	movs	r3, #48	@ 0x30
 800350a:	f04f 0901 	mov.w	r9, #1
 800350e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003512:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80036ac <_svfiprintf_r+0x1e4>
 8003516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800351a:	4623      	mov	r3, r4
 800351c:	469a      	mov	sl, r3
 800351e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003522:	b10a      	cbz	r2, 8003528 <_svfiprintf_r+0x60>
 8003524:	2a25      	cmp	r2, #37	@ 0x25
 8003526:	d1f9      	bne.n	800351c <_svfiprintf_r+0x54>
 8003528:	ebba 0b04 	subs.w	fp, sl, r4
 800352c:	d00b      	beq.n	8003546 <_svfiprintf_r+0x7e>
 800352e:	465b      	mov	r3, fp
 8003530:	4622      	mov	r2, r4
 8003532:	4629      	mov	r1, r5
 8003534:	4638      	mov	r0, r7
 8003536:	f7ff ff6b 	bl	8003410 <__ssputs_r>
 800353a:	3001      	adds	r0, #1
 800353c:	f000 80a7 	beq.w	800368e <_svfiprintf_r+0x1c6>
 8003540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003542:	445a      	add	r2, fp
 8003544:	9209      	str	r2, [sp, #36]	@ 0x24
 8003546:	f89a 3000 	ldrb.w	r3, [sl]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 809f 	beq.w	800368e <_svfiprintf_r+0x1c6>
 8003550:	2300      	movs	r3, #0
 8003552:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800355a:	f10a 0a01 	add.w	sl, sl, #1
 800355e:	9304      	str	r3, [sp, #16]
 8003560:	9307      	str	r3, [sp, #28]
 8003562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003566:	931a      	str	r3, [sp, #104]	@ 0x68
 8003568:	4654      	mov	r4, sl
 800356a:	2205      	movs	r2, #5
 800356c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003570:	484e      	ldr	r0, [pc, #312]	@ (80036ac <_svfiprintf_r+0x1e4>)
 8003572:	f000 fa5f 	bl	8003a34 <memchr>
 8003576:	9a04      	ldr	r2, [sp, #16]
 8003578:	b9d8      	cbnz	r0, 80035b2 <_svfiprintf_r+0xea>
 800357a:	06d0      	lsls	r0, r2, #27
 800357c:	bf44      	itt	mi
 800357e:	2320      	movmi	r3, #32
 8003580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003584:	0711      	lsls	r1, r2, #28
 8003586:	bf44      	itt	mi
 8003588:	232b      	movmi	r3, #43	@ 0x2b
 800358a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800358e:	f89a 3000 	ldrb.w	r3, [sl]
 8003592:	2b2a      	cmp	r3, #42	@ 0x2a
 8003594:	d015      	beq.n	80035c2 <_svfiprintf_r+0xfa>
 8003596:	4654      	mov	r4, sl
 8003598:	2000      	movs	r0, #0
 800359a:	f04f 0c0a 	mov.w	ip, #10
 800359e:	9a07      	ldr	r2, [sp, #28]
 80035a0:	4621      	mov	r1, r4
 80035a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035a6:	3b30      	subs	r3, #48	@ 0x30
 80035a8:	2b09      	cmp	r3, #9
 80035aa:	d94b      	bls.n	8003644 <_svfiprintf_r+0x17c>
 80035ac:	b1b0      	cbz	r0, 80035dc <_svfiprintf_r+0x114>
 80035ae:	9207      	str	r2, [sp, #28]
 80035b0:	e014      	b.n	80035dc <_svfiprintf_r+0x114>
 80035b2:	eba0 0308 	sub.w	r3, r0, r8
 80035b6:	fa09 f303 	lsl.w	r3, r9, r3
 80035ba:	4313      	orrs	r3, r2
 80035bc:	46a2      	mov	sl, r4
 80035be:	9304      	str	r3, [sp, #16]
 80035c0:	e7d2      	b.n	8003568 <_svfiprintf_r+0xa0>
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	1d19      	adds	r1, r3, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	9103      	str	r1, [sp, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bfbb      	ittet	lt
 80035ce:	425b      	neglt	r3, r3
 80035d0:	f042 0202 	orrlt.w	r2, r2, #2
 80035d4:	9307      	strge	r3, [sp, #28]
 80035d6:	9307      	strlt	r3, [sp, #28]
 80035d8:	bfb8      	it	lt
 80035da:	9204      	strlt	r2, [sp, #16]
 80035dc:	7823      	ldrb	r3, [r4, #0]
 80035de:	2b2e      	cmp	r3, #46	@ 0x2e
 80035e0:	d10a      	bne.n	80035f8 <_svfiprintf_r+0x130>
 80035e2:	7863      	ldrb	r3, [r4, #1]
 80035e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80035e6:	d132      	bne.n	800364e <_svfiprintf_r+0x186>
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	3402      	adds	r4, #2
 80035ec:	1d1a      	adds	r2, r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	9203      	str	r2, [sp, #12]
 80035f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035f6:	9305      	str	r3, [sp, #20]
 80035f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80036b0 <_svfiprintf_r+0x1e8>
 80035fc:	2203      	movs	r2, #3
 80035fe:	4650      	mov	r0, sl
 8003600:	7821      	ldrb	r1, [r4, #0]
 8003602:	f000 fa17 	bl	8003a34 <memchr>
 8003606:	b138      	cbz	r0, 8003618 <_svfiprintf_r+0x150>
 8003608:	2240      	movs	r2, #64	@ 0x40
 800360a:	9b04      	ldr	r3, [sp, #16]
 800360c:	eba0 000a 	sub.w	r0, r0, sl
 8003610:	4082      	lsls	r2, r0
 8003612:	4313      	orrs	r3, r2
 8003614:	3401      	adds	r4, #1
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361c:	2206      	movs	r2, #6
 800361e:	4825      	ldr	r0, [pc, #148]	@ (80036b4 <_svfiprintf_r+0x1ec>)
 8003620:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003624:	f000 fa06 	bl	8003a34 <memchr>
 8003628:	2800      	cmp	r0, #0
 800362a:	d036      	beq.n	800369a <_svfiprintf_r+0x1d2>
 800362c:	4b22      	ldr	r3, [pc, #136]	@ (80036b8 <_svfiprintf_r+0x1f0>)
 800362e:	bb1b      	cbnz	r3, 8003678 <_svfiprintf_r+0x1b0>
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	3307      	adds	r3, #7
 8003634:	f023 0307 	bic.w	r3, r3, #7
 8003638:	3308      	adds	r3, #8
 800363a:	9303      	str	r3, [sp, #12]
 800363c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800363e:	4433      	add	r3, r6
 8003640:	9309      	str	r3, [sp, #36]	@ 0x24
 8003642:	e76a      	b.n	800351a <_svfiprintf_r+0x52>
 8003644:	460c      	mov	r4, r1
 8003646:	2001      	movs	r0, #1
 8003648:	fb0c 3202 	mla	r2, ip, r2, r3
 800364c:	e7a8      	b.n	80035a0 <_svfiprintf_r+0xd8>
 800364e:	2300      	movs	r3, #0
 8003650:	f04f 0c0a 	mov.w	ip, #10
 8003654:	4619      	mov	r1, r3
 8003656:	3401      	adds	r4, #1
 8003658:	9305      	str	r3, [sp, #20]
 800365a:	4620      	mov	r0, r4
 800365c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003660:	3a30      	subs	r2, #48	@ 0x30
 8003662:	2a09      	cmp	r2, #9
 8003664:	d903      	bls.n	800366e <_svfiprintf_r+0x1a6>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0c6      	beq.n	80035f8 <_svfiprintf_r+0x130>
 800366a:	9105      	str	r1, [sp, #20]
 800366c:	e7c4      	b.n	80035f8 <_svfiprintf_r+0x130>
 800366e:	4604      	mov	r4, r0
 8003670:	2301      	movs	r3, #1
 8003672:	fb0c 2101 	mla	r1, ip, r1, r2
 8003676:	e7f0      	b.n	800365a <_svfiprintf_r+0x192>
 8003678:	ab03      	add	r3, sp, #12
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	462a      	mov	r2, r5
 800367e:	4638      	mov	r0, r7
 8003680:	4b0e      	ldr	r3, [pc, #56]	@ (80036bc <_svfiprintf_r+0x1f4>)
 8003682:	a904      	add	r1, sp, #16
 8003684:	f3af 8000 	nop.w
 8003688:	1c42      	adds	r2, r0, #1
 800368a:	4606      	mov	r6, r0
 800368c:	d1d6      	bne.n	800363c <_svfiprintf_r+0x174>
 800368e:	89ab      	ldrh	r3, [r5, #12]
 8003690:	065b      	lsls	r3, r3, #25
 8003692:	f53f af2d 	bmi.w	80034f0 <_svfiprintf_r+0x28>
 8003696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003698:	e72c      	b.n	80034f4 <_svfiprintf_r+0x2c>
 800369a:	ab03      	add	r3, sp, #12
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	462a      	mov	r2, r5
 80036a0:	4638      	mov	r0, r7
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <_svfiprintf_r+0x1f4>)
 80036a4:	a904      	add	r1, sp, #16
 80036a6:	f000 f87d 	bl	80037a4 <_printf_i>
 80036aa:	e7ed      	b.n	8003688 <_svfiprintf_r+0x1c0>
 80036ac:	08003b36 	.word	0x08003b36
 80036b0:	08003b3c 	.word	0x08003b3c
 80036b4:	08003b40 	.word	0x08003b40
 80036b8:	00000000 	.word	0x00000000
 80036bc:	08003411 	.word	0x08003411

080036c0 <_printf_common>:
 80036c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	4616      	mov	r6, r2
 80036c6:	4698      	mov	r8, r3
 80036c8:	688a      	ldr	r2, [r1, #8]
 80036ca:	690b      	ldr	r3, [r1, #16]
 80036cc:	4607      	mov	r7, r0
 80036ce:	4293      	cmp	r3, r2
 80036d0:	bfb8      	it	lt
 80036d2:	4613      	movlt	r3, r2
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036da:	460c      	mov	r4, r1
 80036dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036e0:	b10a      	cbz	r2, 80036e6 <_printf_common+0x26>
 80036e2:	3301      	adds	r3, #1
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	0699      	lsls	r1, r3, #26
 80036ea:	bf42      	ittt	mi
 80036ec:	6833      	ldrmi	r3, [r6, #0]
 80036ee:	3302      	addmi	r3, #2
 80036f0:	6033      	strmi	r3, [r6, #0]
 80036f2:	6825      	ldr	r5, [r4, #0]
 80036f4:	f015 0506 	ands.w	r5, r5, #6
 80036f8:	d106      	bne.n	8003708 <_printf_common+0x48>
 80036fa:	f104 0a19 	add.w	sl, r4, #25
 80036fe:	68e3      	ldr	r3, [r4, #12]
 8003700:	6832      	ldr	r2, [r6, #0]
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	42ab      	cmp	r3, r5
 8003706:	dc2b      	bgt.n	8003760 <_printf_common+0xa0>
 8003708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800370c:	6822      	ldr	r2, [r4, #0]
 800370e:	3b00      	subs	r3, #0
 8003710:	bf18      	it	ne
 8003712:	2301      	movne	r3, #1
 8003714:	0692      	lsls	r2, r2, #26
 8003716:	d430      	bmi.n	800377a <_printf_common+0xba>
 8003718:	4641      	mov	r1, r8
 800371a:	4638      	mov	r0, r7
 800371c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003720:	47c8      	blx	r9
 8003722:	3001      	adds	r0, #1
 8003724:	d023      	beq.n	800376e <_printf_common+0xae>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	6922      	ldr	r2, [r4, #16]
 800372a:	f003 0306 	and.w	r3, r3, #6
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf14      	ite	ne
 8003732:	2500      	movne	r5, #0
 8003734:	6833      	ldreq	r3, [r6, #0]
 8003736:	f04f 0600 	mov.w	r6, #0
 800373a:	bf08      	it	eq
 800373c:	68e5      	ldreq	r5, [r4, #12]
 800373e:	f104 041a 	add.w	r4, r4, #26
 8003742:	bf08      	it	eq
 8003744:	1aed      	subeq	r5, r5, r3
 8003746:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800374a:	bf08      	it	eq
 800374c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003750:	4293      	cmp	r3, r2
 8003752:	bfc4      	itt	gt
 8003754:	1a9b      	subgt	r3, r3, r2
 8003756:	18ed      	addgt	r5, r5, r3
 8003758:	42b5      	cmp	r5, r6
 800375a:	d11a      	bne.n	8003792 <_printf_common+0xd2>
 800375c:	2000      	movs	r0, #0
 800375e:	e008      	b.n	8003772 <_printf_common+0xb2>
 8003760:	2301      	movs	r3, #1
 8003762:	4652      	mov	r2, sl
 8003764:	4641      	mov	r1, r8
 8003766:	4638      	mov	r0, r7
 8003768:	47c8      	blx	r9
 800376a:	3001      	adds	r0, #1
 800376c:	d103      	bne.n	8003776 <_printf_common+0xb6>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003776:	3501      	adds	r5, #1
 8003778:	e7c1      	b.n	80036fe <_printf_common+0x3e>
 800377a:	2030      	movs	r0, #48	@ 0x30
 800377c:	18e1      	adds	r1, r4, r3
 800377e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003788:	4422      	add	r2, r4
 800378a:	3302      	adds	r3, #2
 800378c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003790:	e7c2      	b.n	8003718 <_printf_common+0x58>
 8003792:	2301      	movs	r3, #1
 8003794:	4622      	mov	r2, r4
 8003796:	4641      	mov	r1, r8
 8003798:	4638      	mov	r0, r7
 800379a:	47c8      	blx	r9
 800379c:	3001      	adds	r0, #1
 800379e:	d0e6      	beq.n	800376e <_printf_common+0xae>
 80037a0:	3601      	adds	r6, #1
 80037a2:	e7d9      	b.n	8003758 <_printf_common+0x98>

080037a4 <_printf_i>:
 80037a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	7e0f      	ldrb	r7, [r1, #24]
 80037aa:	4691      	mov	r9, r2
 80037ac:	2f78      	cmp	r7, #120	@ 0x78
 80037ae:	4680      	mov	r8, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	469a      	mov	sl, r3
 80037b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ba:	d807      	bhi.n	80037cc <_printf_i+0x28>
 80037bc:	2f62      	cmp	r7, #98	@ 0x62
 80037be:	d80a      	bhi.n	80037d6 <_printf_i+0x32>
 80037c0:	2f00      	cmp	r7, #0
 80037c2:	f000 80d1 	beq.w	8003968 <_printf_i+0x1c4>
 80037c6:	2f58      	cmp	r7, #88	@ 0x58
 80037c8:	f000 80b8 	beq.w	800393c <_printf_i+0x198>
 80037cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037d4:	e03a      	b.n	800384c <_printf_i+0xa8>
 80037d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037da:	2b15      	cmp	r3, #21
 80037dc:	d8f6      	bhi.n	80037cc <_printf_i+0x28>
 80037de:	a101      	add	r1, pc, #4	@ (adr r1, 80037e4 <_printf_i+0x40>)
 80037e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037e4:	0800383d 	.word	0x0800383d
 80037e8:	08003851 	.word	0x08003851
 80037ec:	080037cd 	.word	0x080037cd
 80037f0:	080037cd 	.word	0x080037cd
 80037f4:	080037cd 	.word	0x080037cd
 80037f8:	080037cd 	.word	0x080037cd
 80037fc:	08003851 	.word	0x08003851
 8003800:	080037cd 	.word	0x080037cd
 8003804:	080037cd 	.word	0x080037cd
 8003808:	080037cd 	.word	0x080037cd
 800380c:	080037cd 	.word	0x080037cd
 8003810:	0800394f 	.word	0x0800394f
 8003814:	0800387b 	.word	0x0800387b
 8003818:	08003909 	.word	0x08003909
 800381c:	080037cd 	.word	0x080037cd
 8003820:	080037cd 	.word	0x080037cd
 8003824:	08003971 	.word	0x08003971
 8003828:	080037cd 	.word	0x080037cd
 800382c:	0800387b 	.word	0x0800387b
 8003830:	080037cd 	.word	0x080037cd
 8003834:	080037cd 	.word	0x080037cd
 8003838:	08003911 	.word	0x08003911
 800383c:	6833      	ldr	r3, [r6, #0]
 800383e:	1d1a      	adds	r2, r3, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6032      	str	r2, [r6, #0]
 8003844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800384c:	2301      	movs	r3, #1
 800384e:	e09c      	b.n	800398a <_printf_i+0x1e6>
 8003850:	6833      	ldr	r3, [r6, #0]
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	1d19      	adds	r1, r3, #4
 8003856:	6031      	str	r1, [r6, #0]
 8003858:	0606      	lsls	r6, r0, #24
 800385a:	d501      	bpl.n	8003860 <_printf_i+0xbc>
 800385c:	681d      	ldr	r5, [r3, #0]
 800385e:	e003      	b.n	8003868 <_printf_i+0xc4>
 8003860:	0645      	lsls	r5, r0, #25
 8003862:	d5fb      	bpl.n	800385c <_printf_i+0xb8>
 8003864:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003868:	2d00      	cmp	r5, #0
 800386a:	da03      	bge.n	8003874 <_printf_i+0xd0>
 800386c:	232d      	movs	r3, #45	@ 0x2d
 800386e:	426d      	negs	r5, r5
 8003870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003874:	230a      	movs	r3, #10
 8003876:	4858      	ldr	r0, [pc, #352]	@ (80039d8 <_printf_i+0x234>)
 8003878:	e011      	b.n	800389e <_printf_i+0xfa>
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	6833      	ldr	r3, [r6, #0]
 800387e:	0608      	lsls	r0, r1, #24
 8003880:	f853 5b04 	ldr.w	r5, [r3], #4
 8003884:	d402      	bmi.n	800388c <_printf_i+0xe8>
 8003886:	0649      	lsls	r1, r1, #25
 8003888:	bf48      	it	mi
 800388a:	b2ad      	uxthmi	r5, r5
 800388c:	2f6f      	cmp	r7, #111	@ 0x6f
 800388e:	6033      	str	r3, [r6, #0]
 8003890:	bf14      	ite	ne
 8003892:	230a      	movne	r3, #10
 8003894:	2308      	moveq	r3, #8
 8003896:	4850      	ldr	r0, [pc, #320]	@ (80039d8 <_printf_i+0x234>)
 8003898:	2100      	movs	r1, #0
 800389a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800389e:	6866      	ldr	r6, [r4, #4]
 80038a0:	2e00      	cmp	r6, #0
 80038a2:	60a6      	str	r6, [r4, #8]
 80038a4:	db05      	blt.n	80038b2 <_printf_i+0x10e>
 80038a6:	6821      	ldr	r1, [r4, #0]
 80038a8:	432e      	orrs	r6, r5
 80038aa:	f021 0104 	bic.w	r1, r1, #4
 80038ae:	6021      	str	r1, [r4, #0]
 80038b0:	d04b      	beq.n	800394a <_printf_i+0x1a6>
 80038b2:	4616      	mov	r6, r2
 80038b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80038b8:	fb03 5711 	mls	r7, r3, r1, r5
 80038bc:	5dc7      	ldrb	r7, [r0, r7]
 80038be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038c2:	462f      	mov	r7, r5
 80038c4:	42bb      	cmp	r3, r7
 80038c6:	460d      	mov	r5, r1
 80038c8:	d9f4      	bls.n	80038b4 <_printf_i+0x110>
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d10b      	bne.n	80038e6 <_printf_i+0x142>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	07df      	lsls	r7, r3, #31
 80038d2:	d508      	bpl.n	80038e6 <_printf_i+0x142>
 80038d4:	6923      	ldr	r3, [r4, #16]
 80038d6:	6861      	ldr	r1, [r4, #4]
 80038d8:	4299      	cmp	r1, r3
 80038da:	bfde      	ittt	le
 80038dc:	2330      	movle	r3, #48	@ 0x30
 80038de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038e2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80038e6:	1b92      	subs	r2, r2, r6
 80038e8:	6122      	str	r2, [r4, #16]
 80038ea:	464b      	mov	r3, r9
 80038ec:	4621      	mov	r1, r4
 80038ee:	4640      	mov	r0, r8
 80038f0:	f8cd a000 	str.w	sl, [sp]
 80038f4:	aa03      	add	r2, sp, #12
 80038f6:	f7ff fee3 	bl	80036c0 <_printf_common>
 80038fa:	3001      	adds	r0, #1
 80038fc:	d14a      	bne.n	8003994 <_printf_i+0x1f0>
 80038fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003902:	b004      	add	sp, #16
 8003904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	f043 0320 	orr.w	r3, r3, #32
 800390e:	6023      	str	r3, [r4, #0]
 8003910:	2778      	movs	r7, #120	@ 0x78
 8003912:	4832      	ldr	r0, [pc, #200]	@ (80039dc <_printf_i+0x238>)
 8003914:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	6831      	ldr	r1, [r6, #0]
 800391c:	061f      	lsls	r7, r3, #24
 800391e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003922:	d402      	bmi.n	800392a <_printf_i+0x186>
 8003924:	065f      	lsls	r7, r3, #25
 8003926:	bf48      	it	mi
 8003928:	b2ad      	uxthmi	r5, r5
 800392a:	6031      	str	r1, [r6, #0]
 800392c:	07d9      	lsls	r1, r3, #31
 800392e:	bf44      	itt	mi
 8003930:	f043 0320 	orrmi.w	r3, r3, #32
 8003934:	6023      	strmi	r3, [r4, #0]
 8003936:	b11d      	cbz	r5, 8003940 <_printf_i+0x19c>
 8003938:	2310      	movs	r3, #16
 800393a:	e7ad      	b.n	8003898 <_printf_i+0xf4>
 800393c:	4826      	ldr	r0, [pc, #152]	@ (80039d8 <_printf_i+0x234>)
 800393e:	e7e9      	b.n	8003914 <_printf_i+0x170>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	f023 0320 	bic.w	r3, r3, #32
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	e7f6      	b.n	8003938 <_printf_i+0x194>
 800394a:	4616      	mov	r6, r2
 800394c:	e7bd      	b.n	80038ca <_printf_i+0x126>
 800394e:	6833      	ldr	r3, [r6, #0]
 8003950:	6825      	ldr	r5, [r4, #0]
 8003952:	1d18      	adds	r0, r3, #4
 8003954:	6961      	ldr	r1, [r4, #20]
 8003956:	6030      	str	r0, [r6, #0]
 8003958:	062e      	lsls	r6, r5, #24
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	d501      	bpl.n	8003962 <_printf_i+0x1be>
 800395e:	6019      	str	r1, [r3, #0]
 8003960:	e002      	b.n	8003968 <_printf_i+0x1c4>
 8003962:	0668      	lsls	r0, r5, #25
 8003964:	d5fb      	bpl.n	800395e <_printf_i+0x1ba>
 8003966:	8019      	strh	r1, [r3, #0]
 8003968:	2300      	movs	r3, #0
 800396a:	4616      	mov	r6, r2
 800396c:	6123      	str	r3, [r4, #16]
 800396e:	e7bc      	b.n	80038ea <_printf_i+0x146>
 8003970:	6833      	ldr	r3, [r6, #0]
 8003972:	2100      	movs	r1, #0
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	6032      	str	r2, [r6, #0]
 8003978:	681e      	ldr	r6, [r3, #0]
 800397a:	6862      	ldr	r2, [r4, #4]
 800397c:	4630      	mov	r0, r6
 800397e:	f000 f859 	bl	8003a34 <memchr>
 8003982:	b108      	cbz	r0, 8003988 <_printf_i+0x1e4>
 8003984:	1b80      	subs	r0, r0, r6
 8003986:	6060      	str	r0, [r4, #4]
 8003988:	6863      	ldr	r3, [r4, #4]
 800398a:	6123      	str	r3, [r4, #16]
 800398c:	2300      	movs	r3, #0
 800398e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003992:	e7aa      	b.n	80038ea <_printf_i+0x146>
 8003994:	4632      	mov	r2, r6
 8003996:	4649      	mov	r1, r9
 8003998:	4640      	mov	r0, r8
 800399a:	6923      	ldr	r3, [r4, #16]
 800399c:	47d0      	blx	sl
 800399e:	3001      	adds	r0, #1
 80039a0:	d0ad      	beq.n	80038fe <_printf_i+0x15a>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	079b      	lsls	r3, r3, #30
 80039a6:	d413      	bmi.n	80039d0 <_printf_i+0x22c>
 80039a8:	68e0      	ldr	r0, [r4, #12]
 80039aa:	9b03      	ldr	r3, [sp, #12]
 80039ac:	4298      	cmp	r0, r3
 80039ae:	bfb8      	it	lt
 80039b0:	4618      	movlt	r0, r3
 80039b2:	e7a6      	b.n	8003902 <_printf_i+0x15e>
 80039b4:	2301      	movs	r3, #1
 80039b6:	4632      	mov	r2, r6
 80039b8:	4649      	mov	r1, r9
 80039ba:	4640      	mov	r0, r8
 80039bc:	47d0      	blx	sl
 80039be:	3001      	adds	r0, #1
 80039c0:	d09d      	beq.n	80038fe <_printf_i+0x15a>
 80039c2:	3501      	adds	r5, #1
 80039c4:	68e3      	ldr	r3, [r4, #12]
 80039c6:	9903      	ldr	r1, [sp, #12]
 80039c8:	1a5b      	subs	r3, r3, r1
 80039ca:	42ab      	cmp	r3, r5
 80039cc:	dcf2      	bgt.n	80039b4 <_printf_i+0x210>
 80039ce:	e7eb      	b.n	80039a8 <_printf_i+0x204>
 80039d0:	2500      	movs	r5, #0
 80039d2:	f104 0619 	add.w	r6, r4, #25
 80039d6:	e7f5      	b.n	80039c4 <_printf_i+0x220>
 80039d8:	08003b47 	.word	0x08003b47
 80039dc:	08003b58 	.word	0x08003b58

080039e0 <memmove>:
 80039e0:	4288      	cmp	r0, r1
 80039e2:	b510      	push	{r4, lr}
 80039e4:	eb01 0402 	add.w	r4, r1, r2
 80039e8:	d902      	bls.n	80039f0 <memmove+0x10>
 80039ea:	4284      	cmp	r4, r0
 80039ec:	4623      	mov	r3, r4
 80039ee:	d807      	bhi.n	8003a00 <memmove+0x20>
 80039f0:	1e43      	subs	r3, r0, #1
 80039f2:	42a1      	cmp	r1, r4
 80039f4:	d008      	beq.n	8003a08 <memmove+0x28>
 80039f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039fe:	e7f8      	b.n	80039f2 <memmove+0x12>
 8003a00:	4601      	mov	r1, r0
 8003a02:	4402      	add	r2, r0
 8003a04:	428a      	cmp	r2, r1
 8003a06:	d100      	bne.n	8003a0a <memmove+0x2a>
 8003a08:	bd10      	pop	{r4, pc}
 8003a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a12:	e7f7      	b.n	8003a04 <memmove+0x24>

08003a14 <_sbrk_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	2300      	movs	r3, #0
 8003a18:	4d05      	ldr	r5, [pc, #20]	@ (8003a30 <_sbrk_r+0x1c>)
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fd f88a 	bl	8000b38 <_sbrk>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_sbrk_r+0x1a>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_sbrk_r+0x1a>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20000250 	.word	0x20000250

08003a34 <memchr>:
 8003a34:	4603      	mov	r3, r0
 8003a36:	b510      	push	{r4, lr}
 8003a38:	b2c9      	uxtb	r1, r1
 8003a3a:	4402      	add	r2, r0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	d101      	bne.n	8003a46 <memchr+0x12>
 8003a42:	2000      	movs	r0, #0
 8003a44:	e003      	b.n	8003a4e <memchr+0x1a>
 8003a46:	7804      	ldrb	r4, [r0, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	428c      	cmp	r4, r1
 8003a4c:	d1f6      	bne.n	8003a3c <memchr+0x8>
 8003a4e:	bd10      	pop	{r4, pc}

08003a50 <memcpy>:
 8003a50:	440a      	add	r2, r1
 8003a52:	4291      	cmp	r1, r2
 8003a54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003a58:	d100      	bne.n	8003a5c <memcpy+0xc>
 8003a5a:	4770      	bx	lr
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a62:	4291      	cmp	r1, r2
 8003a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a68:	d1f9      	bne.n	8003a5e <memcpy+0xe>
 8003a6a:	bd10      	pop	{r4, pc}

08003a6c <_realloc_r>:
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	4607      	mov	r7, r0
 8003a72:	4614      	mov	r4, r2
 8003a74:	460d      	mov	r5, r1
 8003a76:	b921      	cbnz	r1, 8003a82 <_realloc_r+0x16>
 8003a78:	4611      	mov	r1, r2
 8003a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7e:	f7ff bc3b 	b.w	80032f8 <_malloc_r>
 8003a82:	b92a      	cbnz	r2, 8003a90 <_realloc_r+0x24>
 8003a84:	f7ff fbce 	bl	8003224 <_free_r>
 8003a88:	4625      	mov	r5, r4
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a90:	f000 f81a 	bl	8003ac8 <_malloc_usable_size_r>
 8003a94:	4284      	cmp	r4, r0
 8003a96:	4606      	mov	r6, r0
 8003a98:	d802      	bhi.n	8003aa0 <_realloc_r+0x34>
 8003a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a9e:	d8f4      	bhi.n	8003a8a <_realloc_r+0x1e>
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f7ff fc28 	bl	80032f8 <_malloc_r>
 8003aa8:	4680      	mov	r8, r0
 8003aaa:	b908      	cbnz	r0, 8003ab0 <_realloc_r+0x44>
 8003aac:	4645      	mov	r5, r8
 8003aae:	e7ec      	b.n	8003a8a <_realloc_r+0x1e>
 8003ab0:	42b4      	cmp	r4, r6
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	bf28      	it	cs
 8003ab8:	4632      	movcs	r2, r6
 8003aba:	f7ff ffc9 	bl	8003a50 <memcpy>
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f7ff fbaf 	bl	8003224 <_free_r>
 8003ac6:	e7f1      	b.n	8003aac <_realloc_r+0x40>

08003ac8 <_malloc_usable_size_r>:
 8003ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003acc:	1f18      	subs	r0, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfbc      	itt	lt
 8003ad2:	580b      	ldrlt	r3, [r1, r0]
 8003ad4:	18c0      	addlt	r0, r0, r3
 8003ad6:	4770      	bx	lr

08003ad8 <_init>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	bf00      	nop
 8003adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ade:	bc08      	pop	{r3}
 8003ae0:	469e      	mov	lr, r3
 8003ae2:	4770      	bx	lr

08003ae4 <_fini>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	bf00      	nop
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr
