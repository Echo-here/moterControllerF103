
echo20250614-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004398  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004528  08004528  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004530  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000060  08004590  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004590  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0b5  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7f  00000000  00000000  0001213e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00013dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a2  00000000  00000000  00014a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017acf  00000000  00000000  000153aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d071  00000000  00000000  0002ce79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a797  00000000  00000000  00039eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4681  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003924  00000000  00000000  000c46c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c7fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	0800448c 	.word	0x0800448c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	0800448c 	.word	0x0800448c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2uiz>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	d20e      	bcs.n	8000502 <__aeabi_f2uiz+0x22>
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30b      	bcc.n	8000502 <__aeabi_f2uiz+0x22>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d409      	bmi.n	8000508 <__aeabi_f2uiz+0x28>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr
 8000508:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800050c:	d101      	bne.n	8000512 <__aeabi_f2uiz+0x32>
 800050e:	0242      	lsls	r2, r0, #9
 8000510:	d102      	bne.n	8000518 <__aeabi_f2uiz+0x38>
 8000512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000516:	4770      	bx	lr
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	@ 0x28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a32      	ldr	r2, [pc, #200]	@ (80005f8 <HAL_UART_RxCpltCallback+0xd8>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d15e      	bne.n	80005f0 <HAL_UART_RxCpltCallback+0xd0>
	{
		if (rx_data >= '0' && rx_data <= '9') {
 8000532:	4b32      	ldr	r3, [pc, #200]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b2f      	cmp	r3, #47	@ 0x2f
 8000538:	d92e      	bls.n	8000598 <HAL_UART_RxCpltCallback+0x78>
 800053a:	4b30      	ldr	r3, [pc, #192]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b39      	cmp	r3, #57	@ 0x39
 8000540:	d82a      	bhi.n	8000598 <HAL_UART_RxCpltCallback+0x78>
			char tx_buffer[32];
			target_pwm_value = (rx_data - '0') * PWM_DUTY_SCALE;
 8000542:	4b2e      	ldr	r3, [pc, #184]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	3b30      	subs	r3, #48	@ 0x30
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff75 	bl	8000438 <__aeabi_i2f>
 800054e:	4603      	mov	r3, r0
 8000550:	492b      	ldr	r1, [pc, #172]	@ (8000600 <HAL_UART_RxCpltCallback+0xe0>)
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe02 	bl	800015c <__aeabi_fmul>
 8000558:	4603      	mov	r3, r0
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffc0 	bl	80004e0 <__aeabi_f2uiz>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <HAL_UART_RxCpltCallback+0xe4>)
 8000566:	801a      	strh	r2, [r3, #0]
			snprintf(tx_buffer, sizeof(tx_buffer), "Target Duty set to: %d\r\n", target_pwm_value);
 8000568:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <HAL_UART_RxCpltCallback+0xe4>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b29b      	uxth	r3, r3
 800056e:	f107 0008 	add.w	r0, r7, #8
 8000572:	4a25      	ldr	r2, [pc, #148]	@ (8000608 <HAL_UART_RxCpltCallback+0xe8>)
 8000574:	2120      	movs	r1, #32
 8000576:	f003 fac5 	bl	8003b04 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fde4 	bl	800014c <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	f107 0108 	add.w	r1, r7, #8
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000590:	481e      	ldr	r0, [pc, #120]	@ (800060c <HAL_UART_RxCpltCallback+0xec>)
 8000592:	f002 fc9d 	bl	8002ed0 <HAL_UART_Transmit>
		if (rx_data >= '0' && rx_data <= '9') {
 8000596:	e026      	b.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
		} else if (rx_data == 'r') {
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b72      	cmp	r3, #114	@ 0x72
 800059e:	d105      	bne.n	80005ac <HAL_UART_RxCpltCallback+0x8c>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//전방
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	481a      	ldr	r0, [pc, #104]	@ (8000610 <HAL_UART_RxCpltCallback+0xf0>)
 80005a6:	f000 ffab 	bl	8001500 <HAL_GPIO_WritePin>
 80005aa:	e01c      	b.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
		} else if (rx_data == 't') {
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b74      	cmp	r3, #116	@ 0x74
 80005b2:	d105      	bne.n	80005c0 <HAL_UART_RxCpltCallback+0xa0>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);//후방
 80005b4:	2200      	movs	r2, #0
 80005b6:	2102      	movs	r1, #2
 80005b8:	4815      	ldr	r0, [pc, #84]	@ (8000610 <HAL_UART_RxCpltCallback+0xf0>)
 80005ba:	f000 ffa1 	bl	8001500 <HAL_GPIO_WritePin>
 80005be:	e012      	b.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
		}else if (rx_data == 'd') {
 80005c0:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b64      	cmp	r3, #100	@ 0x64
 80005c6:	d105      	bne.n	80005d4 <HAL_UART_RxCpltCallback+0xb4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//브레이크
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	4810      	ldr	r0, [pc, #64]	@ (8000610 <HAL_UART_RxCpltCallback+0xf0>)
 80005ce:	f000 ff97 	bl	8001500 <HAL_GPIO_WritePin>
 80005d2:	e008      	b.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
		}else if (rx_data == 's') {
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b73      	cmp	r3, #115	@ 0x73
 80005da:	d104      	bne.n	80005e6 <HAL_UART_RxCpltCallback+0xc6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);//브레이크 때기
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <HAL_UART_RxCpltCallback+0xf0>)
 80005e2:	f000 ff8d 	bl	8001500 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));
 80005e6:	2201      	movs	r2, #1
 80005e8:	4904      	ldr	r1, [pc, #16]	@ (80005fc <HAL_UART_RxCpltCallback+0xdc>)
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <HAL_UART_RxCpltCallback+0xec>)
 80005ec:	f002 fcfb 	bl	8002fe6 <HAL_UART_Receive_IT>
	}
}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	@ 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40004400 	.word	0x40004400
 80005fc:	20000154 	.word	0x20000154
 8000600:	409ccccd 	.word	0x409ccccd
 8000604:	20000156 	.word	0x20000156
 8000608:	080044a4 	.word	0x080044a4
 800060c:	2000010c 	.word	0x2000010c
 8000610:	40010800 	.word	0x40010800

08000614 <HAL_GPIO_EXTI_Callback>:
//{
//  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);  // 콜백 함수 호출
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d10c      	bne.n	800063e <HAL_GPIO_EXTI_Callback+0x2a>
  {
    encoder_count++;  // A상 펄스 하나마다 카운트 증가
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x34>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x34>)
 800062c:	6013      	str	r3, [r2, #0]
    // 또는, 방향도 판단하고 싶으면 B상 상태 읽어서 처리 가능
    if(encoder_count>=cycle){
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x34>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_GPIO_EXTI_Callback+0x38>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	db01      	blt.n	800063e <HAL_GPIO_EXTI_Callback+0x2a>
    	Stop_Motor();  // 정지 함수 호출
 800063a:	f000 f82d 	bl	8000698 <Stop_Motor>

    }
  }
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000158 	.word	0x20000158
 800064c:	20000000 	.word	0x20000000

08000650 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0b      	ldr	r2, [pc, #44]	@ (800068c <HAL_TIM_IC_CaptureCallback+0x3c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d110      	bne.n	8000684 <HAL_TIM_IC_CaptureCallback+0x34>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7f1b      	ldrb	r3, [r3, #28]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d10c      	bne.n	8000684 <HAL_TIM_IC_CaptureCallback+0x34>
  {
	  encoder_count++;  // A상 rising마다 증가
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <HAL_TIM_IC_CaptureCallback+0x40>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000672:	6013      	str	r3, [r2, #0]
	  if(encoder_count>=cycle){
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <HAL_TIM_IC_CaptureCallback+0x44>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	db01      	blt.n	8000684 <HAL_TIM_IC_CaptureCallback+0x34>
	      	Stop_Motor();  // 정지 함수 호출
 8000680:	f000 f80a 	bl	8000698 <Stop_Motor>

	      }
  }
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40012c00 	.word	0x40012c00
 8000690:	20000158 	.word	0x20000158
 8000694:	20000000 	.word	0x20000000

08000698 <Stop_Motor>:



void Stop_Motor(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  // PWM을 0으로 설정 (모터 정지)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <Stop_Motor+0x14>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  // 필요 시 후속 처리
  // 예: 방향핀 LOW로, 브레이크 걸기 등
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	200000c4 	.word	0x200000c4

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fb7e 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f824 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 f940 	bl	8000940 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c0:	f000 f914 	bl	80008ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006c4:	f000 f8ba 	bl	800083c <MX_TIM2_Init>
  MX_TIM1_Init();
 80006c8:	f000 f862 	bl	8000790 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // PWM 시작
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <main+0x44>)
 80006d0:	f001 fba6 	bl	8001e20 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data)); // UART 수신 인터럽트 시작
 80006d4:	2201      	movs	r2, #1
 80006d6:	4908      	ldr	r1, [pc, #32]	@ (80006f8 <main+0x48>)
 80006d8:	4808      	ldr	r0, [pc, #32]	@ (80006fc <main+0x4c>)
 80006da:	f002 fc84 	bl	8002fe6 <HAL_UART_Receive_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4807      	ldr	r0, [pc, #28]	@ (8000700 <main+0x50>)
 80006e2:	f001 fc8f 	bl	8002004 <HAL_TIM_IC_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10);
 80006e6:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <main+0x44>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	220a      	movs	r2, #10
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ee:	bf00      	nop
 80006f0:	e7fd      	b.n	80006ee <main+0x3e>
 80006f2:	bf00      	nop
 80006f4:	200000c4 	.word	0x200000c4
 80006f8:	20000154 	.word	0x20000154
 80006fc:	2000010c 	.word	0x2000010c
 8000700:	2000007c 	.word	0x2000007c

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b090      	sub	sp, #64	@ 0x40
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	2228      	movs	r2, #40	@ 0x28
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fa2c 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000726:	2301      	movs	r3, #1
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800072a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000742:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	4618      	mov	r0, r3
 800074e:	f000 ff07 	bl	8001560 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000758:	f000 f968 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f974 	bl	8001a64 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000782:	f000 f953 	bl	8000a2c <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3740      	adds	r7, #64	@ 0x40
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ac:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007ae:	4a22      	ldr	r2, [pc, #136]	@ (8000838 <MX_TIM1_Init+0xa8>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80007d8:	4816      	ldr	r0, [pc, #88]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007da:	f001 fbc3 	bl	8001f64 <HAL_TIM_IC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 f922 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	480f      	ldr	r0, [pc, #60]	@ (8000834 <MX_TIM1_Init+0xa4>)
 80007f8:	f002 faaa 	bl	8002d50 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000802:	f000 f913 	bl	8000a2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_TIM1_Init+0xa4>)
 800081e:	f001 fded 	bl	80023fc <HAL_TIM_IC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000828:	f000 f900 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000007c 	.word	0x2000007c
 8000838:	40012c00 	.word	0x40012c00

0800083c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <MX_TIM2_Init+0xac>)
 8000860:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000864:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_TIM2_Init+0xac>)
 8000868:	2247      	movs	r2, #71	@ 0x47
 800086a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_TIM2_Init+0xac>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_TIM2_Init+0xac>)
 8000874:	2231      	movs	r2, #49	@ 0x31
 8000876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_TIM2_Init+0xac>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_TIM2_Init+0xac>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000884:	4818      	ldr	r0, [pc, #96]	@ (80008e8 <MX_TIM2_Init+0xac>)
 8000886:	f001 fa7b 	bl	8001d80 <HAL_TIM_PWM_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000890:	f000 f8cc 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4619      	mov	r1, r3
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_TIM2_Init+0xac>)
 80008a4:	f002 fa54 	bl	8002d50 <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80008ae:	f000 f8bd 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b2:	2360      	movs	r3, #96	@ 0x60
 80008b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4807      	ldr	r0, [pc, #28]	@ (80008e8 <MX_TIM2_Init+0xac>)
 80008ca:	f001 fe33 	bl	8002534 <HAL_TIM_PWM_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80008d4:	f000 f8aa 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008d8:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <MX_TIM2_Init+0xac>)
 80008da:	f000 f943 	bl	8000b64 <HAL_TIM_MspPostInit>

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	@ 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000c4 	.word	0x200000c4

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	@ (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f002 fa84 	bl	8002e30 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f87d 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000010c 	.word	0x2000010c
 800093c:	40004400 	.word	0x40004400

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a30      	ldr	r2, [pc, #192]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a2a      	ldr	r2, [pc, #168]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b28      	ldr	r3, [pc, #160]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0320 	and.w	r3, r3, #32
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a24      	ldr	r2, [pc, #144]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_GPIO_Init+0xdc>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2132      	movs	r1, #50	@ 0x32
 80009b8:	4819      	ldr	r0, [pc, #100]	@ (8000a20 <MX_GPIO_Init+0xe0>)
 80009ba:	f000 fda1 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC0 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_0;
 80009be:	f242 0301 	movw	r3, #8193	@ 0x2001
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_GPIO_Init+0xe4>)
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	4815      	ldr	r0, [pc, #84]	@ (8000a28 <MX_GPIO_Init+0xe8>)
 80009d4:	f000 fc10 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 80009d8:	2332      	movs	r3, #50	@ 0x32
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <MX_GPIO_Init+0xe0>)
 80009f0:	f000 fc02 	bl	80011f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2006      	movs	r0, #6
 80009fa:	f000 fb14 	bl	8001026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009fe:	2006      	movs	r0, #6
 8000a00:	f000 fb2d 	bl	800105e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2028      	movs	r0, #40	@ 0x28
 8000a0a:	f000 fb0c 	bl	8001026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a0e:	2028      	movs	r0, #40	@ 0x28
 8000a10:	f000 fb25 	bl	800105e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010800 	.word	0x40010800
 8000a24:	10110000 	.word	0x10110000
 8000a28:	40011000 	.word	0x40011000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_MspInit+0x5c>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a14      	ldr	r2, [pc, #80]	@ (8000a94 <HAL_MspInit+0x5c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6193      	str	r3, [r2, #24]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_MspInit+0x5c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <HAL_MspInit+0x5c>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a94 <HAL_MspInit+0x5c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <HAL_MspInit+0x5c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <HAL_MspInit+0x60>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_MspInit+0x60>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010000 	.word	0x40010000

08000a9c <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b20 <HAL_TIM_IC_MspInit+0x84>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d12c      	bne.n	8000b16 <HAL_TIM_IC_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_TIM_IC_MspInit+0x88>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a18      	ldr	r2, [pc, #96]	@ (8000b24 <HAL_TIM_IC_MspInit+0x88>)
 8000ac2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_TIM_IC_MspInit+0x88>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_TIM_IC_MspInit+0x88>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <HAL_TIM_IC_MspInit+0x88>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_TIM_IC_MspInit+0x88>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <HAL_TIM_IC_MspInit+0x8c>)
 8000b02:	f000 fb79 	bl	80011f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	201b      	movs	r0, #27
 8000b0c:	f000 fa8b 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b10:	201b      	movs	r0, #27
 8000b12:	f000 faa4 	bl	800105e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40012c00 	.word	0x40012c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010800 	.word	0x40010800

08000b2c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b3c:	d10b      	bne.n	8000b56 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <HAL_TIM_PWM_MspInit+0x34>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <HAL_TIM_PWM_MspInit+0x34>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_TIM_PWM_MspInit+0x34>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b82:	d117      	bne.n	8000bb4 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <HAL_TIM_MspPostInit+0x58>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <HAL_TIM_MspPostInit+0x58>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_TIM_MspPostInit+0x58>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <HAL_TIM_MspPostInit+0x5c>)
 8000bb0:	f000 fb22 	bl	80011f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a19      	ldr	r2, [pc, #100]	@ (8000c44 <HAL_UART_MspInit+0x80>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d12b      	bne.n	8000c3c <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bee:	61d3      	str	r3, [r2, #28]
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a11      	ldr	r2, [pc, #68]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c14:	230c      	movs	r3, #12
 8000c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	4809      	ldr	r0, [pc, #36]	@ (8000c4c <HAL_UART_MspInit+0x88>)
 8000c28:	f000 fae6 	bl	80011f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2026      	movs	r0, #38	@ 0x26
 8000c32:	f000 f9f8 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c36:	2026      	movs	r0, #38	@ 0x26
 8000c38:	f000 fa11 	bl	800105e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <NMI_Handler+0x4>

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <MemManage_Handler+0x4>

08000c68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f8ce 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fc3f 	bl	8001530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <TIM1_CC_IRQHandler+0x10>)
 8000cbe:	f001 faad 	bl	800221c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000007c 	.word	0x2000007c

08000ccc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <USART2_IRQHandler+0x10>)
 8000cd2:	f002 f9ad 	bl	8003030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000010c 	.word	0x2000010c

08000ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ce4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ce8:	f000 fc22 	bl	8001530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f002 ff2e 	bl	8003b80 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20005000 	.word	0x20005000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	2000015c 	.word	0x2000015c
 8000d58:	200002b0 	.word	0x200002b0

08000d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff fff8 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d6e:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d70:	4a0c      	ldr	r2, [pc, #48]	@ (8000da4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a09      	ldr	r2, [pc, #36]	@ (8000da8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d84:	4c09      	ldr	r4, [pc, #36]	@ (8000dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f002 fefb 	bl	8003b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d96:	f7ff fc8b 	bl	80006b0 <main>
  bx lr
 8000d9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000da4:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 8000da8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dac:	200002ac 	.word	0x200002ac

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_Init+0x28>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_Init+0x28>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f923 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fe32 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40022000 	.word	0x40022000

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f93b 	bl	800107a <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e1c:	f000 f903 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000004 	.word	0x20000004
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	20000008 	.word	0x20000008

08000e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_IncTick+0x1c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a03      	ldr	r2, [pc, #12]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20000160 	.word	0x20000160

08000e64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b02      	ldr	r3, [pc, #8]	@ (8000e74 <HAL_GetTick+0x10>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000160 	.word	0x20000160

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4906      	ldr	r1, [pc, #24]	@ (8000f10 <__NVIC_EnableIRQ+0x34>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	@ (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	@ (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	@ 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ff0:	f7ff ff90 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff2d 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff42 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff35 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001092:	b480      	push	{r7}
 8001094:	b085      	sub	sp, #20
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d008      	beq.n	80010bc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2204      	movs	r2, #4
 80010ae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e020      	b.n	80010fe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 020e 	bic.w	r2, r2, #14
 80010ca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d005      	beq.n	800112c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2204      	movs	r2, #4
 8001124:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e051      	b.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 020e 	bic.w	r2, r2, #14
 800113a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a22      	ldr	r2, [pc, #136]	@ (80011dc <HAL_DMA_Abort_IT+0xd4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d029      	beq.n	80011aa <HAL_DMA_Abort_IT+0xa2>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a21      	ldr	r2, [pc, #132]	@ (80011e0 <HAL_DMA_Abort_IT+0xd8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d022      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x9e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a1f      	ldr	r2, [pc, #124]	@ (80011e4 <HAL_DMA_Abort_IT+0xdc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01a      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x98>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <HAL_DMA_Abort_IT+0xe0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d012      	beq.n	800119a <HAL_DMA_Abort_IT+0x92>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <HAL_DMA_Abort_IT+0xe4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00a      	beq.n	8001194 <HAL_DMA_Abort_IT+0x8c>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <HAL_DMA_Abort_IT+0xe8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d102      	bne.n	800118e <HAL_DMA_Abort_IT+0x86>
 8001188:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800118c:	e00e      	b.n	80011ac <HAL_DMA_Abort_IT+0xa4>
 800118e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001192:	e00b      	b.n	80011ac <HAL_DMA_Abort_IT+0xa4>
 8001194:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001198:	e008      	b.n	80011ac <HAL_DMA_Abort_IT+0xa4>
 800119a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119e:	e005      	b.n	80011ac <HAL_DMA_Abort_IT+0xa4>
 80011a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a4:	e002      	b.n	80011ac <HAL_DMA_Abort_IT+0xa4>
 80011a6:	2310      	movs	r3, #16
 80011a8:	e000      	b.n	80011ac <HAL_DMA_Abort_IT+0xa4>
 80011aa:	2301      	movs	r3, #1
 80011ac:	4a11      	ldr	r2, [pc, #68]	@ (80011f4 <HAL_DMA_Abort_IT+0xec>)
 80011ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	4798      	blx	r3
    } 
  }
  return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020008 	.word	0x40020008
 80011e0:	4002001c 	.word	0x4002001c
 80011e4:	40020030 	.word	0x40020030
 80011e8:	40020044 	.word	0x40020044
 80011ec:	40020058 	.word	0x40020058
 80011f0:	4002006c 	.word	0x4002006c
 80011f4:	40020000 	.word	0x40020000

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b08b      	sub	sp, #44	@ 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120a:	e169      	b.n	80014e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800120c:	2201      	movs	r2, #1
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 8158 	bne.w	80014da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a9a      	ldr	r2, [pc, #616]	@ (8001498 <HAL_GPIO_Init+0x2a0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d05e      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001234:	4a98      	ldr	r2, [pc, #608]	@ (8001498 <HAL_GPIO_Init+0x2a0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d875      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800123a:	4a98      	ldr	r2, [pc, #608]	@ (800149c <HAL_GPIO_Init+0x2a4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d058      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001240:	4a96      	ldr	r2, [pc, #600]	@ (800149c <HAL_GPIO_Init+0x2a4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d86f      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001246:	4a96      	ldr	r2, [pc, #600]	@ (80014a0 <HAL_GPIO_Init+0x2a8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d052      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 800124c:	4a94      	ldr	r2, [pc, #592]	@ (80014a0 <HAL_GPIO_Init+0x2a8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d869      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001252:	4a94      	ldr	r2, [pc, #592]	@ (80014a4 <HAL_GPIO_Init+0x2ac>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d04c      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001258:	4a92      	ldr	r2, [pc, #584]	@ (80014a4 <HAL_GPIO_Init+0x2ac>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d863      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800125e:	4a92      	ldr	r2, [pc, #584]	@ (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d046      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001264:	4a90      	ldr	r2, [pc, #576]	@ (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d85d      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800126a:	2b12      	cmp	r3, #18
 800126c:	d82a      	bhi.n	80012c4 <HAL_GPIO_Init+0xcc>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d859      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001272:	a201      	add	r2, pc, #4	@ (adr r2, 8001278 <HAL_GPIO_Init+0x80>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	080012f3 	.word	0x080012f3
 800127c:	080012cd 	.word	0x080012cd
 8001280:	080012df 	.word	0x080012df
 8001284:	08001321 	.word	0x08001321
 8001288:	08001327 	.word	0x08001327
 800128c:	08001327 	.word	0x08001327
 8001290:	08001327 	.word	0x08001327
 8001294:	08001327 	.word	0x08001327
 8001298:	08001327 	.word	0x08001327
 800129c:	08001327 	.word	0x08001327
 80012a0:	08001327 	.word	0x08001327
 80012a4:	08001327 	.word	0x08001327
 80012a8:	08001327 	.word	0x08001327
 80012ac:	08001327 	.word	0x08001327
 80012b0:	08001327 	.word	0x08001327
 80012b4:	08001327 	.word	0x08001327
 80012b8:	08001327 	.word	0x08001327
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012e9 	.word	0x080012e9
 80012c4:	4a79      	ldr	r2, [pc, #484]	@ (80014ac <HAL_GPIO_Init+0x2b4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ca:	e02c      	b.n	8001326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e029      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	3304      	adds	r3, #4
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e024      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	3308      	adds	r3, #8
 80012e4:	623b      	str	r3, [r7, #32]
          break;
 80012e6:	e01f      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	330c      	adds	r3, #12
 80012ee:	623b      	str	r3, [r7, #32]
          break;
 80012f0:	e01a      	b.n	8001328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012fa:	2304      	movs	r3, #4
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e013      	b.n	8001328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001308:	2308      	movs	r3, #8
 800130a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	611a      	str	r2, [r3, #16]
          break;
 8001312:	e009      	b.n	8001328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001314:	2308      	movs	r3, #8
 8001316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	615a      	str	r2, [r3, #20]
          break;
 800131e:	e003      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x130>
          break;
 8001326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	@ 0xff
 800132c:	d801      	bhi.n	8001332 <HAL_GPIO_Init+0x13a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	e001      	b.n	8001336 <HAL_GPIO_Init+0x13e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3304      	adds	r3, #4
 8001336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2bff      	cmp	r3, #255	@ 0xff
 800133c:	d802      	bhi.n	8001344 <HAL_GPIO_Init+0x14c>
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	e002      	b.n	800134a <HAL_GPIO_Init+0x152>
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	3b08      	subs	r3, #8
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	210f      	movs	r1, #15
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	6a39      	ldr	r1, [r7, #32]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80b1 	beq.w	80014da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001378:	4b4d      	ldr	r3, [pc, #308]	@ (80014b0 <HAL_GPIO_Init+0x2b8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a4c      	ldr	r2, [pc, #304]	@ (80014b0 <HAL_GPIO_Init+0x2b8>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <HAL_GPIO_Init+0x2b8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001390:	4a48      	ldr	r2, [pc, #288]	@ (80014b4 <HAL_GPIO_Init+0x2bc>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a40      	ldr	r2, [pc, #256]	@ (80014b8 <HAL_GPIO_Init+0x2c0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d013      	beq.n	80013e4 <HAL_GPIO_Init+0x1ec>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3f      	ldr	r2, [pc, #252]	@ (80014bc <HAL_GPIO_Init+0x2c4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00d      	beq.n	80013e0 <HAL_GPIO_Init+0x1e8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a3e      	ldr	r2, [pc, #248]	@ (80014c0 <HAL_GPIO_Init+0x2c8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d007      	beq.n	80013dc <HAL_GPIO_Init+0x1e4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3d      	ldr	r2, [pc, #244]	@ (80014c4 <HAL_GPIO_Init+0x2cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d101      	bne.n	80013d8 <HAL_GPIO_Init+0x1e0>
 80013d4:	2303      	movs	r3, #3
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013d8:	2304      	movs	r3, #4
 80013da:	e004      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013dc:	2302      	movs	r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013e4:	2300      	movs	r3, #0
 80013e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013f6:	492f      	ldr	r1, [pc, #188]	@ (80014b4 <HAL_GPIO_Init+0x2bc>)
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001410:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	492c      	ldr	r1, [pc, #176]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800141e:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4928      	ldr	r1, [pc, #160]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001428:	4013      	ands	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001438:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4922      	ldr	r1, [pc, #136]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001446:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	491e      	ldr	r1, [pc, #120]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4918      	ldr	r1, [pc, #96]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800146e:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	4914      	ldr	r1, [pc, #80]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d021      	beq.n	80014cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	490e      	ldr	r1, [pc, #56]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
 8001494:	e021      	b.n	80014da <HAL_GPIO_Init+0x2e2>
 8001496:	bf00      	nop
 8001498:	10320000 	.word	0x10320000
 800149c:	10310000 	.word	0x10310000
 80014a0:	10220000 	.word	0x10220000
 80014a4:	10210000 	.word	0x10210000
 80014a8:	10120000 	.word	0x10120000
 80014ac:	10110000 	.word	0x10110000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	40010800 	.word	0x40010800
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40011400 	.word	0x40011400
 80014c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_GPIO_Init+0x304>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4909      	ldr	r1, [pc, #36]	@ (80014fc <HAL_GPIO_Init+0x304>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	3301      	adds	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f47f ae8e 	bne.w	800120c <HAL_GPIO_Init+0x14>
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	372c      	adds	r7, #44	@ 0x2c
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	041a      	lsls	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f860 	bl	8000614 <HAL_GPIO_EXTI_Callback>
  }
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e272      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8087 	beq.w	800168e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	4b92      	ldr	r3, [pc, #584]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	d00c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800158c:	4b8f      	ldr	r3, [pc, #572]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d112      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
 8001598:	4b8c      	ldr	r3, [pc, #560]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a4:	d10b      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b89      	ldr	r3, [pc, #548]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d06c      	beq.n	800168c <HAL_RCC_OscConfig+0x12c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d168      	bne.n	800168c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e24c      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x76>
 80015c8:	4b80      	ldr	r3, [pc, #512]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a7f      	ldr	r2, [pc, #508]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e02e      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x98>
 80015de:	4b7b      	ldr	r3, [pc, #492]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7a      	ldr	r2, [pc, #488]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b78      	ldr	r3, [pc, #480]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a77      	ldr	r2, [pc, #476]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0xbc>
 8001602:	4b72      	ldr	r3, [pc, #456]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a71      	ldr	r2, [pc, #452]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6f      	ldr	r3, [pc, #444]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6e      	ldr	r2, [pc, #440]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 800161c:	4b6b      	ldr	r3, [pc, #428]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6a      	ldr	r2, [pc, #424]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b68      	ldr	r3, [pc, #416]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a67      	ldr	r2, [pc, #412]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fc12 	bl	8000e64 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fc0e 	bl	8000e64 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	@ 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e200      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b5d      	ldr	r3, [pc, #372]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xe4>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fbfe 	bl	8000e64 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fbfa 	bl	8000e64 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	@ 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1ec      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b53      	ldr	r3, [pc, #332]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x10c>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169a:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016a6:	4b49      	ldr	r3, [pc, #292]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
 80016b2:	4b46      	ldr	r3, [pc, #280]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1c0      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4939      	ldr	r1, [pc, #228]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b36      	ldr	r3, [pc, #216]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fbb3 	bl	8000e64 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fbaf 	bl	8000e64 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1a1      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4927      	ldr	r1, [pc, #156]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fb92 	bl	8000e64 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fb8e 	bl	8000e64 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e180      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d03a      	beq.n	80017e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff fb72 	bl	8000e64 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fb6e 	bl	8000e64 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e160      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 face 	bl	8001d44 <RCC_Delay>
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff fb58 	bl	8000e64 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b6:	e00f      	b.n	80017d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fb54 	bl	8000e64 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d908      	bls.n	80017d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e146      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	42420000 	.word	0x42420000
 80017d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b92      	ldr	r3, [pc, #584]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e9      	bne.n	80017b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a6 	beq.w	800193e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10d      	bne.n	800181e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b88      	ldr	r3, [pc, #544]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a87      	ldr	r2, [pc, #540]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b85      	ldr	r3, [pc, #532]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	4b82      	ldr	r3, [pc, #520]	@ (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7ff fb15 	bl	8000e64 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7ff fb11 	bl	8000e64 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	@ 0x64
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e103      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b75      	ldr	r3, [pc, #468]	@ (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x312>
 8001864:	4b6f      	ldr	r3, [pc, #444]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a6e      	ldr	r2, [pc, #440]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e02d      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x334>
 800187a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a69      	ldr	r2, [pc, #420]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b67      	ldr	r3, [pc, #412]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a66      	ldr	r2, [pc, #408]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	e01c      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d10c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x356>
 800189c:	4b61      	ldr	r3, [pc, #388]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a60      	ldr	r2, [pc, #384]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	e00b      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 80018b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4b58      	ldr	r3, [pc, #352]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a57      	ldr	r2, [pc, #348]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d015      	beq.n	8001902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fac5 	bl	8000e64 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fac1 	bl	8000e64 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0b1      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ee      	beq.n	80018de <HAL_RCC_OscConfig+0x37e>
 8001900:	e014      	b.n	800192c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff faaf 	bl	8000e64 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff faab 	bl	8000e64 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e09b      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	4b40      	ldr	r3, [pc, #256]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ee      	bne.n	800190a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b3c      	ldr	r3, [pc, #240]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a3b      	ldr	r2, [pc, #236]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001948:	4b36      	ldr	r3, [pc, #216]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d061      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d146      	bne.n	80019ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b33      	ldr	r3, [pc, #204]	@ (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fa7f 	bl	8000e64 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff fa7b 	bl	8000e64 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e06d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	4921      	ldr	r1, [pc, #132]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a19      	ldr	r1, [r3, #32]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	430b      	orrs	r3, r1
 80019b6:	491b      	ldr	r1, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fa4f 	bl	8000e64 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff fa4b 	bl	8000e64 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e03d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x46a>
 80019e8:	e035      	b.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fa38 	bl	8000e64 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff fa34 	bl	8000e64 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e026      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x498>
 8001a16:	e01e      	b.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e019      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_OscConfig+0x500>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d0      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b6a      	ldr	r3, [pc, #424]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b67      	ldr	r3, [pc, #412]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4965      	ldr	r1, [pc, #404]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a52      	ldr	r2, [pc, #328]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d040      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e073      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06b      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4936      	ldr	r1, [pc, #216]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f986 	bl	8000e64 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f982 	bl	8000e64 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e053      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b84:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d210      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b24      	ldr	r3, [pc, #144]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4922      	ldr	r1, [pc, #136]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f821 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	@ (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <HAL_RCC_ClockConfig+0x1cc>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_RCC_ClockConfig+0x1d0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f8e4 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	080044c0 	.word	0x080044c0
 8001c30:	20000004 	.word	0x20000004
 8001c34:	20000008 	.word	0x20000008

08001c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x30>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x36>
 8001c66:	e027      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c6a:	613b      	str	r3, [r7, #16]
      break;
 8001c6c:	e027      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	0c9b      	lsrs	r3, r3, #18
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d010      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0c5b      	lsrs	r3, r3, #17
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	4a11      	ldr	r2, [pc, #68]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e004      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a0c      	ldr	r2, [pc, #48]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	613b      	str	r3, [r7, #16]
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cba:	613b      	str	r3, [r7, #16]
      break;
 8001cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbe:	693b      	ldr	r3, [r7, #16]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	080044d8 	.word	0x080044d8
 8001cd8:	080044e8 	.word	0x080044e8
 8001cdc:	003d0900 	.word	0x003d0900

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	@ (8001cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf8:	f7ff fff2 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	@ (8001d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	080044d0 	.word	0x080044d0

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	0adb      	lsrs	r3, r3, #11
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	@ (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	080044d0 	.word	0x080044d0

08001d44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <RCC_Delay+0x34>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <RCC_Delay+0x38>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0a5b      	lsrs	r3, r3, #9
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d60:	bf00      	nop
  }
  while (Delay --);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	60fa      	str	r2, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f9      	bne.n	8001d60 <RCC_Delay+0x1c>
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	10624dd3 	.word	0x10624dd3

08001d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e041      	b.n	8001e16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fec0 	bl	8000b2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f000 fc9e 	bl	8002700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_TIM_PWM_Start+0x24>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e022      	b.n	8001e8a <HAL_TIM_PWM_Start+0x6a>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d109      	bne.n	8001e5e <HAL_TIM_PWM_Start+0x3e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	bf14      	ite	ne
 8001e56:	2301      	movne	r3, #1
 8001e58:	2300      	moveq	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	e015      	b.n	8001e8a <HAL_TIM_PWM_Start+0x6a>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d109      	bne.n	8001e78 <HAL_TIM_PWM_Start+0x58>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e008      	b.n	8001e8a <HAL_TIM_PWM_Start+0x6a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	bf14      	ite	ne
 8001e84:	2301      	movne	r3, #1
 8001e86:	2300      	moveq	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e05e      	b.n	8001f50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d104      	bne.n	8001ea2 <HAL_TIM_PWM_Start+0x82>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ea0:	e013      	b.n	8001eca <HAL_TIM_PWM_Start+0xaa>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d104      	bne.n	8001eb2 <HAL_TIM_PWM_Start+0x92>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eb0:	e00b      	b.n	8001eca <HAL_TIM_PWM_Start+0xaa>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_PWM_Start+0xa2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec0:	e003      	b.n	8001eca <HAL_TIM_PWM_Start+0xaa>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 ff17 	bl	8002d06 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f58 <HAL_TIM_PWM_Start+0x138>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d107      	bne.n	8001ef2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <HAL_TIM_PWM_Start+0x138>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00e      	beq.n	8001f1a <HAL_TIM_PWM_Start+0xfa>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f04:	d009      	beq.n	8001f1a <HAL_TIM_PWM_Start+0xfa>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <HAL_TIM_PWM_Start+0x13c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d004      	beq.n	8001f1a <HAL_TIM_PWM_Start+0xfa>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <HAL_TIM_PWM_Start+0x140>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d111      	bne.n	8001f3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d010      	beq.n	8001f4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3c:	e007      	b.n	8001f4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800

08001f64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e041      	b.n	8001ffa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fd86 	bl	8000a9c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 fbac 	bl	8002700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_TIM_IC_Start_IT+0x1e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800201e:	b2db      	uxtb	r3, r3
 8002020:	e013      	b.n	800204a <HAL_TIM_IC_Start_IT+0x46>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d104      	bne.n	8002032 <HAL_TIM_IC_Start_IT+0x2e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e00b      	b.n	800204a <HAL_TIM_IC_Start_IT+0x46>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d104      	bne.n	8002042 <HAL_TIM_IC_Start_IT+0x3e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800203e:	b2db      	uxtb	r3, r3
 8002040:	e003      	b.n	800204a <HAL_TIM_IC_Start_IT+0x46>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002048:	b2db      	uxtb	r3, r3
 800204a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d104      	bne.n	800205c <HAL_TIM_IC_Start_IT+0x58>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e013      	b.n	8002084 <HAL_TIM_IC_Start_IT+0x80>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d104      	bne.n	800206c <HAL_TIM_IC_Start_IT+0x68>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e00b      	b.n	8002084 <HAL_TIM_IC_Start_IT+0x80>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b08      	cmp	r3, #8
 8002070:	d104      	bne.n	800207c <HAL_TIM_IC_Start_IT+0x78>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e003      	b.n	8002084 <HAL_TIM_IC_Start_IT+0x80>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002082:	b2db      	uxtb	r3, r3
 8002084:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002086:	7bbb      	ldrb	r3, [r7, #14]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d102      	bne.n	8002092 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800208c:	7b7b      	ldrb	r3, [r7, #13]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0b8      	b.n	8002208 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <HAL_TIM_IC_Start_IT+0xa2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020a4:	e013      	b.n	80020ce <HAL_TIM_IC_Start_IT+0xca>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_IC_Start_IT+0xb2>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020b4:	e00b      	b.n	80020ce <HAL_TIM_IC_Start_IT+0xca>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_IC_Start_IT+0xc2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020c4:	e003      	b.n	80020ce <HAL_TIM_IC_Start_IT+0xca>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d104      	bne.n	80020de <HAL_TIM_IC_Start_IT+0xda>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020dc:	e013      	b.n	8002106 <HAL_TIM_IC_Start_IT+0x102>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d104      	bne.n	80020ee <HAL_TIM_IC_Start_IT+0xea>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020ec:	e00b      	b.n	8002106 <HAL_TIM_IC_Start_IT+0x102>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d104      	bne.n	80020fe <HAL_TIM_IC_Start_IT+0xfa>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020fc:	e003      	b.n	8002106 <HAL_TIM_IC_Start_IT+0x102>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d841      	bhi.n	8002190 <HAL_TIM_IC_Start_IT+0x18c>
 800210c:	a201      	add	r2, pc, #4	@ (adr r2, 8002114 <HAL_TIM_IC_Start_IT+0x110>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002149 	.word	0x08002149
 8002118:	08002191 	.word	0x08002191
 800211c:	08002191 	.word	0x08002191
 8002120:	08002191 	.word	0x08002191
 8002124:	0800215b 	.word	0x0800215b
 8002128:	08002191 	.word	0x08002191
 800212c:	08002191 	.word	0x08002191
 8002130:	08002191 	.word	0x08002191
 8002134:	0800216d 	.word	0x0800216d
 8002138:	08002191 	.word	0x08002191
 800213c:	08002191 	.word	0x08002191
 8002140:	08002191 	.word	0x08002191
 8002144:	0800217f 	.word	0x0800217f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0202 	orr.w	r2, r2, #2
 8002156:	60da      	str	r2, [r3, #12]
      break;
 8002158:	e01d      	b.n	8002196 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0204 	orr.w	r2, r2, #4
 8002168:	60da      	str	r2, [r3, #12]
      break;
 800216a:	e014      	b.n	8002196 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	60da      	str	r2, [r3, #12]
      break;
 800217c:	e00b      	b.n	8002196 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0210 	orr.w	r2, r2, #16
 800218c:	60da      	str	r2, [r3, #12]
      break;
 800218e:	e002      	b.n	8002196 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	bf00      	nop
  }

  if (status == HAL_OK)
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d134      	bne.n	8002206 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fdae 	bl	8002d06 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <HAL_TIM_IC_Start_IT+0x20c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00e      	beq.n	80021d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021bc:	d009      	beq.n	80021d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a14      	ldr	r2, [pc, #80]	@ (8002214 <HAL_TIM_IC_Start_IT+0x210>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <HAL_TIM_IC_Start_IT+0x214>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d111      	bne.n	80021f6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d010      	beq.n	8002206 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f4:	e007      	b.n	8002206 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800

0800221c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d020      	beq.n	8002280 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0202 	mvn.w	r2, #2
 8002250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe f9f2 	bl	8000650 <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fa2b 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fa31 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0204 	mvn.w	r2, #4
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe f9cc 	bl	8000650 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa05 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fa0b 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d020      	beq.n	8002318 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0208 	mvn.w	r2, #8
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2204      	movs	r2, #4
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe f9a6 	bl	8000650 <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f9df 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f9e5 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d020      	beq.n	8002364 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0210 	mvn.w	r2, #16
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2208      	movs	r2, #8
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe f980 	bl	8000650 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f9b9 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f9bf 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0201 	mvn.w	r2, #1
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f998 	bl	80026b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fd39 	bl	8002e1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f98f 	bl	80026ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0220 	mvn.w	r2, #32
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fd0c 	bl	8002e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002416:	2302      	movs	r3, #2
 8002418:	e088      	b.n	800252c <HAL_TIM_IC_ConfigChannel+0x130>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d11b      	bne.n	8002460 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002438:	f000 fb58 	bl	8002aec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 020c 	bic.w	r2, r2, #12
 800244a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6999      	ldr	r1, [r3, #24]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	619a      	str	r2, [r3, #24]
 800245e:	e060      	b.n	8002522 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d11c      	bne.n	80024a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002476:	f000 fb93 	bl	8002ba0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002488:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6999      	ldr	r1, [r3, #24]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	021a      	lsls	r2, r3, #8
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	619a      	str	r2, [r3, #24]
 800249e:	e040      	b.n	8002522 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11b      	bne.n	80024de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80024b6:	f000 fbaf 	bl	8002c18 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 020c 	bic.w	r2, r2, #12
 80024c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69d9      	ldr	r1, [r3, #28]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	61da      	str	r2, [r3, #28]
 80024dc:	e021      	b.n	8002522 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	d11c      	bne.n	800251e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80024f4:	f000 fbcb 	bl	8002c8e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002506:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69d9      	ldr	r1, [r3, #28]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	021a      	lsls	r2, r3, #8
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	61da      	str	r2, [r3, #28]
 800251c:	e001      	b.n	8002522 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800252a:	7dfb      	ldrb	r3, [r7, #23]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800254e:	2302      	movs	r3, #2
 8002550:	e0ae      	b.n	80026b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	f200 809f 	bhi.w	80026a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002562:	a201      	add	r2, pc, #4	@ (adr r2, 8002568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	0800259d 	.word	0x0800259d
 800256c:	080026a1 	.word	0x080026a1
 8002570:	080026a1 	.word	0x080026a1
 8002574:	080026a1 	.word	0x080026a1
 8002578:	080025dd 	.word	0x080025dd
 800257c:	080026a1 	.word	0x080026a1
 8002580:	080026a1 	.word	0x080026a1
 8002584:	080026a1 	.word	0x080026a1
 8002588:	0800261f 	.word	0x0800261f
 800258c:	080026a1 	.word	0x080026a1
 8002590:	080026a1 	.word	0x080026a1
 8002594:	080026a1 	.word	0x080026a1
 8002598:	0800265f 	.word	0x0800265f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f91a 	bl	80027dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0208 	orr.w	r2, r2, #8
 80025b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6999      	ldr	r1, [r3, #24]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	619a      	str	r2, [r3, #24]
      break;
 80025da:	e064      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f960 	bl	80028a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6999      	ldr	r1, [r3, #24]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	021a      	lsls	r2, r3, #8
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	619a      	str	r2, [r3, #24]
      break;
 800261c:	e043      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f9a9 	bl	800297c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0208 	orr.w	r2, r2, #8
 8002638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69d9      	ldr	r1, [r3, #28]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	61da      	str	r2, [r3, #28]
      break;
 800265c:	e023      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f9f3 	bl	8002a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69d9      	ldr	r1, [r3, #28]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	61da      	str	r2, [r3, #28]
      break;
 800269e:	e002      	b.n	80026a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	75fb      	strb	r3, [r7, #23]
      break;
 80026a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a2f      	ldr	r2, [pc, #188]	@ (80027d0 <TIM_Base_SetConfig+0xd0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00b      	beq.n	8002730 <TIM_Base_SetConfig+0x30>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271e:	d007      	beq.n	8002730 <TIM_Base_SetConfig+0x30>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a2c      	ldr	r2, [pc, #176]	@ (80027d4 <TIM_Base_SetConfig+0xd4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_Base_SetConfig+0x30>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a2b      	ldr	r2, [pc, #172]	@ (80027d8 <TIM_Base_SetConfig+0xd8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d108      	bne.n	8002742 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <TIM_Base_SetConfig+0xd0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00b      	beq.n	8002762 <TIM_Base_SetConfig+0x62>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002750:	d007      	beq.n	8002762 <TIM_Base_SetConfig+0x62>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1f      	ldr	r2, [pc, #124]	@ (80027d4 <TIM_Base_SetConfig+0xd4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d003      	beq.n	8002762 <TIM_Base_SetConfig+0x62>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1e      	ldr	r2, [pc, #120]	@ (80027d8 <TIM_Base_SetConfig+0xd8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d108      	bne.n	8002774 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <TIM_Base_SetConfig+0xd0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d103      	bne.n	80027a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f023 0201 	bic.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]
  }
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800

080027dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f023 0201 	bic.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f023 0302 	bic.w	r3, r3, #2
 8002824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a1c      	ldr	r2, [pc, #112]	@ (80028a4 <TIM_OC1_SetConfig+0xc8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d10c      	bne.n	8002852 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0308 	bic.w	r3, r3, #8
 800283e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a13      	ldr	r2, [pc, #76]	@ (80028a4 <TIM_OC1_SetConfig+0xc8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d111      	bne.n	800287e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	621a      	str	r2, [r3, #32]
}
 8002898:	bf00      	nop
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40012c00 	.word	0x40012c00

080028a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f023 0210 	bic.w	r2, r3, #16
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f023 0320 	bic.w	r3, r3, #32
 80028f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a1d      	ldr	r2, [pc, #116]	@ (8002978 <TIM_OC2_SetConfig+0xd0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10d      	bne.n	8002924 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800290e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002922:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <TIM_OC2_SetConfig+0xd0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d113      	bne.n	8002954 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800293a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	621a      	str	r2, [r3, #32]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00

0800297c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <TIM_OC3_SetConfig+0xd0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10d      	bne.n	80029f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a14      	ldr	r2, [pc, #80]	@ (8002a4c <TIM_OC3_SetConfig+0xd0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d113      	bne.n	8002a26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	621a      	str	r2, [r3, #32]
}
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40012c00 	.word	0x40012c00

08002a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	031b      	lsls	r3, r3, #12
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae8 <TIM_OC4_SetConfig+0x98>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d109      	bne.n	8002ac4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	621a      	str	r2, [r3, #32]
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40012c00 	.word	0x40012c00

08002aec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f023 0201 	bic.w	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <TIM_TI1_SetConfig+0xa8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_TI1_SetConfig+0x46>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b20:	d007      	beq.n	8002b32 <TIM_TI1_SetConfig+0x46>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <TIM_TI1_SetConfig+0xac>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_TI1_SetConfig+0x46>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b9c <TIM_TI1_SetConfig+0xb0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <TIM_TI1_SetConfig+0x4a>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <TIM_TI1_SetConfig+0x4c>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e003      	b.n	8002b56 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f023 030a 	bic.w	r3, r3, #10
 8002b70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f003 030a 	and.w	r3, r3, #10
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40000800 	.word	0x40000800

08002ba0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f023 0210 	bic.w	r2, r3, #16
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	031b      	lsls	r3, r3, #12
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bf2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f023 0303 	bic.w	r3, r3, #3
 8002c44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	621a      	str	r2, [r3, #32]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b087      	sub	sp, #28
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ccc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	031b      	lsls	r3, r3, #12
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	621a      	str	r2, [r3, #32]
}
 8002cfc:	bf00      	nop
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2201      	movs	r2, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	401a      	ands	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	621a      	str	r2, [r3, #32]
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e046      	b.n	8002df6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a16      	ldr	r2, [pc, #88]	@ (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db4:	d009      	beq.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a10      	ldr	r2, [pc, #64]	@ (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10c      	bne.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800

08002e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e042      	b.n	8002ec8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd feb4 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	@ 0x24
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fdb7 	bl	80039e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d175      	bne.n	8002fdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Transmit+0x2c>
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e06e      	b.n	8002fde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2221      	movs	r2, #33	@ 0x21
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0e:	f7fd ffa9 	bl	8000e64 <HAL_GetTick>
 8002f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f28:	d108      	bne.n	8002f3c <HAL_UART_Transmit+0x6c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e003      	b.n	8002f44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f44:	e02e      	b.n	8002fa4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2180      	movs	r1, #128	@ 0x80
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fb1c 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e03a      	b.n	8002fde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3302      	adds	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e007      	b.n	8002f96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1cb      	bne.n	8002f46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2140      	movs	r1, #64	@ 0x40
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fae8 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e006      	b.n	8002fde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d112      	bne.n	8003026 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_UART_Receive_IT+0x26>
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e00b      	b.n	8003028 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	461a      	mov	r2, r3
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fb0f 	bl	8003640 <UART_Start_Receive_IT>
 8003022:	4603      	mov	r3, r0
 8003024:	e000      	b.n	8003028 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b0ba      	sub	sp, #232	@ 0xe8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800306e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_UART_IRQHandler+0x66>
 8003082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fbec 	bl	800386c <UART_Receive_IT>
      return;
 8003094:	e25b      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80de 	beq.w	800325c <HAL_UART_IRQHandler+0x22c>
 80030a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80d1 	beq.w	800325c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_UART_IRQHandler+0xae>
 80030c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_UART_IRQHandler+0xd2>
 80030ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_UART_IRQHandler+0xf6>
 800310e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	f043 0204 	orr.w	r2, r3, #4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d011      	beq.n	8003156 <HAL_UART_IRQHandler+0x126>
 8003132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800313e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f043 0208 	orr.w	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 81f2 	beq.w	8003544 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_UART_IRQHandler+0x14e>
 800316c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fb77 	bl	800386c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_UART_IRQHandler+0x17a>
 80031a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d04f      	beq.n	800324a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa81 	bl	80036b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d041      	beq.n	8003242 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1d9      	bne.n	80031be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d013      	beq.n	800323a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003216:	4a7e      	ldr	r2, [pc, #504]	@ (8003410 <HAL_UART_IRQHandler+0x3e0>)
 8003218:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd ff72 	bl	8001108 <HAL_DMA_Abort_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003234:	4610      	mov	r0, r2
 8003236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e00e      	b.n	8003258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f993 	bl	8003566 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e00a      	b.n	8003258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f98f 	bl	8003566 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	e006      	b.n	8003258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f98b 	bl	8003566 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003256:	e175      	b.n	8003544 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	bf00      	nop
    return;
 800325a:	e173      	b.n	8003544 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 814f 	bne.w	8003504 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8148 	beq.w	8003504 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8141 	beq.w	8003504 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80b6 	beq.w	8003414 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8145 	beq.w	8003548 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032c6:	429a      	cmp	r2, r3
 80032c8:	f080 813e 	bcs.w	8003548 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b20      	cmp	r3, #32
 80032dc:	f000 8088 	beq.w	80033f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800330c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003310:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003318:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003324:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1d9      	bne.n	80032e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3314      	adds	r3, #20
 8003332:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800333c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3314      	adds	r3, #20
 800334c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003350:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003354:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003358:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e1      	bne.n	800332c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800337e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3314      	adds	r3, #20
 8003388:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800338c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800338e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003392:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800339a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e3      	bne.n	8003368 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c0:	f023 0310 	bic.w	r3, r3, #16
 80033c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e3      	bne.n	80033ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fe51 	bl	8001092 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033fe:	b29b      	uxth	r3, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	b29b      	uxth	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8b6 	bl	8003578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800340c:	e09c      	b.n	8003548 <HAL_UART_IRQHandler+0x518>
 800340e:	bf00      	nop
 8003410:	08003777 	.word	0x08003777
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800341c:	b29b      	uxth	r3, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 808e 	beq.w	800354c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8089 	beq.w	800354c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	330c      	adds	r3, #12
 800345a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800345e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800346c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e3      	bne.n	800343a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	623b      	str	r3, [r7, #32]
   return(result);
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3314      	adds	r3, #20
 8003492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003496:	633a      	str	r2, [r7, #48]	@ 0x30
 8003498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800349c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e3      	bne.n	8003472 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0310 	bic.w	r3, r3, #16
 80034ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034dc:	61fa      	str	r2, [r7, #28]
 80034de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	69b9      	ldr	r1, [r7, #24]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e3      	bne.n	80034b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f83b 	bl	8003578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003502:	e023      	b.n	800354c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_UART_IRQHandler+0x4f4>
 8003510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f93e 	bl	800379e <UART_Transmit_IT>
    return;
 8003522:	e014      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00e      	beq.n	800354e <HAL_UART_IRQHandler+0x51e>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f97d 	bl	800383c <UART_EndTransmit_IT>
    return;
 8003542:	e004      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
    return;
 8003544:	bf00      	nop
 8003546:	e002      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
      return;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
      return;
 800354c:	bf00      	nop
  }
}
 800354e:	37e8      	adds	r7, #232	@ 0xe8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	e03b      	b.n	8003618 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a6:	d037      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7fd fc5c 	bl	8000e64 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	6a3a      	ldr	r2, [r7, #32]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <UART_WaitOnFlagUntilTimeout+0x30>
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e03a      	b.n	8003638 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d023      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b80      	cmp	r3, #128	@ 0x80
 80035d4:	d020      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b40      	cmp	r3, #64	@ 0x40
 80035da:	d01d      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d116      	bne.n	8003618 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f856 	bl	80036b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2208      	movs	r2, #8
 800360a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e00f      	b.n	8003638 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	d0b4      	beq.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2222      	movs	r2, #34	@ 0x22
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003684:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0220 	orr.w	r2, r2, #32
 80036a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b095      	sub	sp, #84	@ 0x54
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036da:	643a      	str	r2, [r7, #64]	@ 0x40
 80036dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e5      	bne.n	80036ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3314      	adds	r3, #20
 80036f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800370e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e5      	bne.n	80036ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	2b01      	cmp	r3, #1
 8003728:	d119      	bne.n	800375e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	60bb      	str	r3, [r7, #8]
   return(result);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f023 0310 	bic.w	r3, r3, #16
 8003740:	647b      	str	r3, [r7, #68]	@ 0x44
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800374a:	61ba      	str	r2, [r7, #24]
 800374c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6979      	ldr	r1, [r7, #20]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	613b      	str	r3, [r7, #16]
   return(result);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800376c:	bf00      	nop
 800376e:	3754      	adds	r7, #84	@ 0x54
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fee8 	bl	8003566 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b21      	cmp	r3, #33	@ 0x21
 80037b0:	d13e      	bne.n	8003830 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ba:	d114      	bne.n	80037e6 <UART_Transmit_IT+0x48>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d110      	bne.n	80037e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	1c9a      	adds	r2, r3, #2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	621a      	str	r2, [r3, #32]
 80037e4:	e008      	b.n	80037f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	1c59      	adds	r1, r3, #1
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6211      	str	r1, [r2, #32]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29b      	uxth	r3, r3
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4619      	mov	r1, r3
 8003806:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10f      	bne.n	800382c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800381a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800382a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003852:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fe79 	bl	8003554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08c      	sub	sp, #48	@ 0x30
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b22      	cmp	r3, #34	@ 0x22
 800387e:	f040 80ae 	bne.w	80039de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388a:	d117      	bne.n	80038bc <UART_Receive_IT+0x50>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d113      	bne.n	80038bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80038ba:	e026      	b.n	800390a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ce:	d007      	beq.n	80038e0 <UART_Receive_IT+0x74>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <UART_Receive_IT+0x82>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e008      	b.n	8003900 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29b      	uxth	r3, r3
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4619      	mov	r1, r3
 8003918:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800391a:	2b00      	cmp	r3, #0
 800391c:	d15d      	bne.n	80039da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0220 	bic.w	r2, r2, #32
 800392c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800393c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	2b01      	cmp	r3, #1
 8003962:	d135      	bne.n	80039d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	613b      	str	r3, [r7, #16]
   return(result);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f023 0310 	bic.w	r3, r3, #16
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398a:	623a      	str	r2, [r7, #32]
 800398c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	69f9      	ldr	r1, [r7, #28]
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	61bb      	str	r3, [r7, #24]
   return(result);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e5      	bne.n	800396a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d10a      	bne.n	80039c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fdd5 	bl	8003578 <HAL_UARTEx_RxEventCallback>
 80039ce:	e002      	b.n	80039d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fc fda5 	bl	8000520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e002      	b.n	80039e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3730      	adds	r7, #48	@ 0x30
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a22:	f023 030c 	bic.w	r3, r3, #12
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003afc <UART_SetConfig+0x114>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d103      	bne.n	8003a58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7fe f964 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	e002      	b.n	8003a5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7fe f94c 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009a      	lsls	r2, r3, #2
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <UART_SetConfig+0x118>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	0119      	lsls	r1, r3, #4
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009a      	lsls	r2, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a94:	4b1a      	ldr	r3, [pc, #104]	@ (8003b00 <UART_SetConfig+0x118>)
 8003a96:	fba3 0302 	umull	r0, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2064      	movs	r0, #100	@ 0x64
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	3332      	adds	r3, #50	@ 0x32
 8003aa8:	4a15      	ldr	r2, [pc, #84]	@ (8003b00 <UART_SetConfig+0x118>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ab4:	4419      	add	r1, r3
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	009a      	lsls	r2, r3, #2
 8003ac0:	441a      	add	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003acc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <UART_SetConfig+0x118>)
 8003ace:	fba3 0302 	umull	r0, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2064      	movs	r0, #100	@ 0x64
 8003ad6:	fb00 f303 	mul.w	r3, r0, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	3332      	adds	r3, #50	@ 0x32
 8003ae0:	4a07      	ldr	r2, [pc, #28]	@ (8003b00 <UART_SetConfig+0x118>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 020f 	and.w	r2, r3, #15
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	440a      	add	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40013800 	.word	0x40013800
 8003b00:	51eb851f 	.word	0x51eb851f

08003b04 <sniprintf>:
 8003b04:	b40c      	push	{r2, r3}
 8003b06:	b530      	push	{r4, r5, lr}
 8003b08:	4b18      	ldr	r3, [pc, #96]	@ (8003b6c <sniprintf+0x68>)
 8003b0a:	1e0c      	subs	r4, r1, #0
 8003b0c:	681d      	ldr	r5, [r3, #0]
 8003b0e:	b09d      	sub	sp, #116	@ 0x74
 8003b10:	da08      	bge.n	8003b24 <sniprintf+0x20>
 8003b12:	238b      	movs	r3, #139	@ 0x8b
 8003b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b18:	602b      	str	r3, [r5, #0]
 8003b1a:	b01d      	add	sp, #116	@ 0x74
 8003b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b20:	b002      	add	sp, #8
 8003b22:	4770      	bx	lr
 8003b24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003b28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003b32:	bf0c      	ite	eq
 8003b34:	4623      	moveq	r3, r4
 8003b36:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003b3a:	9304      	str	r3, [sp, #16]
 8003b3c:	9307      	str	r3, [sp, #28]
 8003b3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b42:	9002      	str	r0, [sp, #8]
 8003b44:	9006      	str	r0, [sp, #24]
 8003b46:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	ab21      	add	r3, sp, #132	@ 0x84
 8003b4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b50:	a902      	add	r1, sp, #8
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	f000 f89c 	bl	8003c90 <_svfiprintf_r>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	bfbc      	itt	lt
 8003b5c:	238b      	movlt	r3, #139	@ 0x8b
 8003b5e:	602b      	strlt	r3, [r5, #0]
 8003b60:	2c00      	cmp	r4, #0
 8003b62:	d0da      	beq.n	8003b1a <sniprintf+0x16>
 8003b64:	2200      	movs	r2, #0
 8003b66:	9b02      	ldr	r3, [sp, #8]
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e7d6      	b.n	8003b1a <sniprintf+0x16>
 8003b6c:	20000010 	.word	0x20000010

08003b70 <memset>:
 8003b70:	4603      	mov	r3, r0
 8003b72:	4402      	add	r2, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <__errno>:
 8003b80:	4b01      	ldr	r3, [pc, #4]	@ (8003b88 <__errno+0x8>)
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000010 	.word	0x20000010

08003b8c <__libc_init_array>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	2600      	movs	r6, #0
 8003b90:	4d0c      	ldr	r5, [pc, #48]	@ (8003bc4 <__libc_init_array+0x38>)
 8003b92:	4c0d      	ldr	r4, [pc, #52]	@ (8003bc8 <__libc_init_array+0x3c>)
 8003b94:	1b64      	subs	r4, r4, r5
 8003b96:	10a4      	asrs	r4, r4, #2
 8003b98:	42a6      	cmp	r6, r4
 8003b9a:	d109      	bne.n	8003bb0 <__libc_init_array+0x24>
 8003b9c:	f000 fc76 	bl	800448c <_init>
 8003ba0:	2600      	movs	r6, #0
 8003ba2:	4d0a      	ldr	r5, [pc, #40]	@ (8003bcc <__libc_init_array+0x40>)
 8003ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd0 <__libc_init_array+0x44>)
 8003ba6:	1b64      	subs	r4, r4, r5
 8003ba8:	10a4      	asrs	r4, r4, #2
 8003baa:	42a6      	cmp	r6, r4
 8003bac:	d105      	bne.n	8003bba <__libc_init_array+0x2e>
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb4:	4798      	blx	r3
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7ee      	b.n	8003b98 <__libc_init_array+0xc>
 8003bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbe:	4798      	blx	r3
 8003bc0:	3601      	adds	r6, #1
 8003bc2:	e7f2      	b.n	8003baa <__libc_init_array+0x1e>
 8003bc4:	08004528 	.word	0x08004528
 8003bc8:	08004528 	.word	0x08004528
 8003bcc:	08004528 	.word	0x08004528
 8003bd0:	0800452c 	.word	0x0800452c

08003bd4 <__retarget_lock_acquire_recursive>:
 8003bd4:	4770      	bx	lr

08003bd6 <__retarget_lock_release_recursive>:
 8003bd6:	4770      	bx	lr

08003bd8 <__ssputs_r>:
 8003bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bdc:	461f      	mov	r7, r3
 8003bde:	688e      	ldr	r6, [r1, #8]
 8003be0:	4682      	mov	sl, r0
 8003be2:	42be      	cmp	r6, r7
 8003be4:	460c      	mov	r4, r1
 8003be6:	4690      	mov	r8, r2
 8003be8:	680b      	ldr	r3, [r1, #0]
 8003bea:	d82d      	bhi.n	8003c48 <__ssputs_r+0x70>
 8003bec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003bf4:	d026      	beq.n	8003c44 <__ssputs_r+0x6c>
 8003bf6:	6965      	ldr	r5, [r4, #20]
 8003bf8:	6909      	ldr	r1, [r1, #16]
 8003bfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bfe:	eba3 0901 	sub.w	r9, r3, r1
 8003c02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c06:	1c7b      	adds	r3, r7, #1
 8003c08:	444b      	add	r3, r9
 8003c0a:	106d      	asrs	r5, r5, #1
 8003c0c:	429d      	cmp	r5, r3
 8003c0e:	bf38      	it	cc
 8003c10:	461d      	movcc	r5, r3
 8003c12:	0553      	lsls	r3, r2, #21
 8003c14:	d527      	bpl.n	8003c66 <__ssputs_r+0x8e>
 8003c16:	4629      	mov	r1, r5
 8003c18:	f000 f958 	bl	8003ecc <_malloc_r>
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	b360      	cbz	r0, 8003c7a <__ssputs_r+0xa2>
 8003c20:	464a      	mov	r2, r9
 8003c22:	6921      	ldr	r1, [r4, #16]
 8003c24:	f000 fbd4 	bl	80043d0 <memcpy>
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c32:	81a3      	strh	r3, [r4, #12]
 8003c34:	6126      	str	r6, [r4, #16]
 8003c36:	444e      	add	r6, r9
 8003c38:	6026      	str	r6, [r4, #0]
 8003c3a:	463e      	mov	r6, r7
 8003c3c:	6165      	str	r5, [r4, #20]
 8003c3e:	eba5 0509 	sub.w	r5, r5, r9
 8003c42:	60a5      	str	r5, [r4, #8]
 8003c44:	42be      	cmp	r6, r7
 8003c46:	d900      	bls.n	8003c4a <__ssputs_r+0x72>
 8003c48:	463e      	mov	r6, r7
 8003c4a:	4632      	mov	r2, r6
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	f000 fb86 	bl	8004360 <memmove>
 8003c54:	2000      	movs	r0, #0
 8003c56:	68a3      	ldr	r3, [r4, #8]
 8003c58:	1b9b      	subs	r3, r3, r6
 8003c5a:	60a3      	str	r3, [r4, #8]
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	4433      	add	r3, r6
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c66:	462a      	mov	r2, r5
 8003c68:	f000 fb4c 	bl	8004304 <_realloc_r>
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d1e0      	bne.n	8003c34 <__ssputs_r+0x5c>
 8003c72:	4650      	mov	r0, sl
 8003c74:	6921      	ldr	r1, [r4, #16]
 8003c76:	f000 fbb9 	bl	80043ec <_free_r>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	f8ca 3000 	str.w	r3, [sl]
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c8a:	81a3      	strh	r3, [r4, #12]
 8003c8c:	e7e9      	b.n	8003c62 <__ssputs_r+0x8a>
	...

08003c90 <_svfiprintf_r>:
 8003c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	4698      	mov	r8, r3
 8003c96:	898b      	ldrh	r3, [r1, #12]
 8003c98:	4607      	mov	r7, r0
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	460d      	mov	r5, r1
 8003c9e:	4614      	mov	r4, r2
 8003ca0:	b09d      	sub	sp, #116	@ 0x74
 8003ca2:	d510      	bpl.n	8003cc6 <_svfiprintf_r+0x36>
 8003ca4:	690b      	ldr	r3, [r1, #16]
 8003ca6:	b973      	cbnz	r3, 8003cc6 <_svfiprintf_r+0x36>
 8003ca8:	2140      	movs	r1, #64	@ 0x40
 8003caa:	f000 f90f 	bl	8003ecc <_malloc_r>
 8003cae:	6028      	str	r0, [r5, #0]
 8003cb0:	6128      	str	r0, [r5, #16]
 8003cb2:	b930      	cbnz	r0, 8003cc2 <_svfiprintf_r+0x32>
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cbc:	b01d      	add	sp, #116	@ 0x74
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	2340      	movs	r3, #64	@ 0x40
 8003cc4:	616b      	str	r3, [r5, #20]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cca:	2320      	movs	r3, #32
 8003ccc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cd0:	2330      	movs	r3, #48	@ 0x30
 8003cd2:	f04f 0901 	mov.w	r9, #1
 8003cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003e74 <_svfiprintf_r+0x1e4>
 8003cde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	469a      	mov	sl, r3
 8003ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cea:	b10a      	cbz	r2, 8003cf0 <_svfiprintf_r+0x60>
 8003cec:	2a25      	cmp	r2, #37	@ 0x25
 8003cee:	d1f9      	bne.n	8003ce4 <_svfiprintf_r+0x54>
 8003cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8003cf4:	d00b      	beq.n	8003d0e <_svfiprintf_r+0x7e>
 8003cf6:	465b      	mov	r3, fp
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f7ff ff6b 	bl	8003bd8 <__ssputs_r>
 8003d02:	3001      	adds	r0, #1
 8003d04:	f000 80a7 	beq.w	8003e56 <_svfiprintf_r+0x1c6>
 8003d08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d0a:	445a      	add	r2, fp
 8003d0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 809f 	beq.w	8003e56 <_svfiprintf_r+0x1c6>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d22:	f10a 0a01 	add.w	sl, sl, #1
 8003d26:	9304      	str	r3, [sp, #16]
 8003d28:	9307      	str	r3, [sp, #28]
 8003d2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d30:	4654      	mov	r4, sl
 8003d32:	2205      	movs	r2, #5
 8003d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d38:	484e      	ldr	r0, [pc, #312]	@ (8003e74 <_svfiprintf_r+0x1e4>)
 8003d3a:	f000 fb3b 	bl	80043b4 <memchr>
 8003d3e:	9a04      	ldr	r2, [sp, #16]
 8003d40:	b9d8      	cbnz	r0, 8003d7a <_svfiprintf_r+0xea>
 8003d42:	06d0      	lsls	r0, r2, #27
 8003d44:	bf44      	itt	mi
 8003d46:	2320      	movmi	r3, #32
 8003d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d4c:	0711      	lsls	r1, r2, #28
 8003d4e:	bf44      	itt	mi
 8003d50:	232b      	movmi	r3, #43	@ 0x2b
 8003d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d56:	f89a 3000 	ldrb.w	r3, [sl]
 8003d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d5c:	d015      	beq.n	8003d8a <_svfiprintf_r+0xfa>
 8003d5e:	4654      	mov	r4, sl
 8003d60:	2000      	movs	r0, #0
 8003d62:	f04f 0c0a 	mov.w	ip, #10
 8003d66:	9a07      	ldr	r2, [sp, #28]
 8003d68:	4621      	mov	r1, r4
 8003d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d6e:	3b30      	subs	r3, #48	@ 0x30
 8003d70:	2b09      	cmp	r3, #9
 8003d72:	d94b      	bls.n	8003e0c <_svfiprintf_r+0x17c>
 8003d74:	b1b0      	cbz	r0, 8003da4 <_svfiprintf_r+0x114>
 8003d76:	9207      	str	r2, [sp, #28]
 8003d78:	e014      	b.n	8003da4 <_svfiprintf_r+0x114>
 8003d7a:	eba0 0308 	sub.w	r3, r0, r8
 8003d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d82:	4313      	orrs	r3, r2
 8003d84:	46a2      	mov	sl, r4
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	e7d2      	b.n	8003d30 <_svfiprintf_r+0xa0>
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	1d19      	adds	r1, r3, #4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	9103      	str	r1, [sp, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bfbb      	ittet	lt
 8003d96:	425b      	neglt	r3, r3
 8003d98:	f042 0202 	orrlt.w	r2, r2, #2
 8003d9c:	9307      	strge	r3, [sp, #28]
 8003d9e:	9307      	strlt	r3, [sp, #28]
 8003da0:	bfb8      	it	lt
 8003da2:	9204      	strlt	r2, [sp, #16]
 8003da4:	7823      	ldrb	r3, [r4, #0]
 8003da6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003da8:	d10a      	bne.n	8003dc0 <_svfiprintf_r+0x130>
 8003daa:	7863      	ldrb	r3, [r4, #1]
 8003dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dae:	d132      	bne.n	8003e16 <_svfiprintf_r+0x186>
 8003db0:	9b03      	ldr	r3, [sp, #12]
 8003db2:	3402      	adds	r4, #2
 8003db4:	1d1a      	adds	r2, r3, #4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	9203      	str	r2, [sp, #12]
 8003dba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dbe:	9305      	str	r3, [sp, #20]
 8003dc0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003e78 <_svfiprintf_r+0x1e8>
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	4650      	mov	r0, sl
 8003dc8:	7821      	ldrb	r1, [r4, #0]
 8003dca:	f000 faf3 	bl	80043b4 <memchr>
 8003dce:	b138      	cbz	r0, 8003de0 <_svfiprintf_r+0x150>
 8003dd0:	2240      	movs	r2, #64	@ 0x40
 8003dd2:	9b04      	ldr	r3, [sp, #16]
 8003dd4:	eba0 000a 	sub.w	r0, r0, sl
 8003dd8:	4082      	lsls	r2, r0
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	3401      	adds	r4, #1
 8003dde:	9304      	str	r3, [sp, #16]
 8003de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de4:	2206      	movs	r2, #6
 8003de6:	4825      	ldr	r0, [pc, #148]	@ (8003e7c <_svfiprintf_r+0x1ec>)
 8003de8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dec:	f000 fae2 	bl	80043b4 <memchr>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d036      	beq.n	8003e62 <_svfiprintf_r+0x1d2>
 8003df4:	4b22      	ldr	r3, [pc, #136]	@ (8003e80 <_svfiprintf_r+0x1f0>)
 8003df6:	bb1b      	cbnz	r3, 8003e40 <_svfiprintf_r+0x1b0>
 8003df8:	9b03      	ldr	r3, [sp, #12]
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	f023 0307 	bic.w	r3, r3, #7
 8003e00:	3308      	adds	r3, #8
 8003e02:	9303      	str	r3, [sp, #12]
 8003e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e06:	4433      	add	r3, r6
 8003e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e0a:	e76a      	b.n	8003ce2 <_svfiprintf_r+0x52>
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	2001      	movs	r0, #1
 8003e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e14:	e7a8      	b.n	8003d68 <_svfiprintf_r+0xd8>
 8003e16:	2300      	movs	r3, #0
 8003e18:	f04f 0c0a 	mov.w	ip, #10
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	3401      	adds	r4, #1
 8003e20:	9305      	str	r3, [sp, #20]
 8003e22:	4620      	mov	r0, r4
 8003e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e28:	3a30      	subs	r2, #48	@ 0x30
 8003e2a:	2a09      	cmp	r2, #9
 8003e2c:	d903      	bls.n	8003e36 <_svfiprintf_r+0x1a6>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0c6      	beq.n	8003dc0 <_svfiprintf_r+0x130>
 8003e32:	9105      	str	r1, [sp, #20]
 8003e34:	e7c4      	b.n	8003dc0 <_svfiprintf_r+0x130>
 8003e36:	4604      	mov	r4, r0
 8003e38:	2301      	movs	r3, #1
 8003e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e3e:	e7f0      	b.n	8003e22 <_svfiprintf_r+0x192>
 8003e40:	ab03      	add	r3, sp, #12
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	462a      	mov	r2, r5
 8003e46:	4638      	mov	r0, r7
 8003e48:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <_svfiprintf_r+0x1f4>)
 8003e4a:	a904      	add	r1, sp, #16
 8003e4c:	f3af 8000 	nop.w
 8003e50:	1c42      	adds	r2, r0, #1
 8003e52:	4606      	mov	r6, r0
 8003e54:	d1d6      	bne.n	8003e04 <_svfiprintf_r+0x174>
 8003e56:	89ab      	ldrh	r3, [r5, #12]
 8003e58:	065b      	lsls	r3, r3, #25
 8003e5a:	f53f af2d 	bmi.w	8003cb8 <_svfiprintf_r+0x28>
 8003e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e60:	e72c      	b.n	8003cbc <_svfiprintf_r+0x2c>
 8003e62:	ab03      	add	r3, sp, #12
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	462a      	mov	r2, r5
 8003e68:	4638      	mov	r0, r7
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <_svfiprintf_r+0x1f4>)
 8003e6c:	a904      	add	r1, sp, #16
 8003e6e:	f000 f91f 	bl	80040b0 <_printf_i>
 8003e72:	e7ed      	b.n	8003e50 <_svfiprintf_r+0x1c0>
 8003e74:	080044ea 	.word	0x080044ea
 8003e78:	080044f0 	.word	0x080044f0
 8003e7c:	080044f4 	.word	0x080044f4
 8003e80:	00000000 	.word	0x00000000
 8003e84:	08003bd9 	.word	0x08003bd9

08003e88 <sbrk_aligned>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ec8 <sbrk_aligned+0x40>)
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	6831      	ldr	r1, [r6, #0]
 8003e90:	4605      	mov	r5, r0
 8003e92:	b911      	cbnz	r1, 8003e9a <sbrk_aligned+0x12>
 8003e94:	f000 fa7e 	bl	8004394 <_sbrk_r>
 8003e98:	6030      	str	r0, [r6, #0]
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f000 fa79 	bl	8004394 <_sbrk_r>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	d103      	bne.n	8003eae <sbrk_aligned+0x26>
 8003ea6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003eaa:	4620      	mov	r0, r4
 8003eac:	bd70      	pop	{r4, r5, r6, pc}
 8003eae:	1cc4      	adds	r4, r0, #3
 8003eb0:	f024 0403 	bic.w	r4, r4, #3
 8003eb4:	42a0      	cmp	r0, r4
 8003eb6:	d0f8      	beq.n	8003eaa <sbrk_aligned+0x22>
 8003eb8:	1a21      	subs	r1, r4, r0
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 fa6a 	bl	8004394 <_sbrk_r>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d1f2      	bne.n	8003eaa <sbrk_aligned+0x22>
 8003ec4:	e7ef      	b.n	8003ea6 <sbrk_aligned+0x1e>
 8003ec6:	bf00      	nop
 8003ec8:	200002a0 	.word	0x200002a0

08003ecc <_malloc_r>:
 8003ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed0:	1ccd      	adds	r5, r1, #3
 8003ed2:	f025 0503 	bic.w	r5, r5, #3
 8003ed6:	3508      	adds	r5, #8
 8003ed8:	2d0c      	cmp	r5, #12
 8003eda:	bf38      	it	cc
 8003edc:	250c      	movcc	r5, #12
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	db01      	blt.n	8003ee8 <_malloc_r+0x1c>
 8003ee4:	42a9      	cmp	r1, r5
 8003ee6:	d904      	bls.n	8003ef2 <_malloc_r+0x26>
 8003ee8:	230c      	movs	r3, #12
 8003eea:	6033      	str	r3, [r6, #0]
 8003eec:	2000      	movs	r0, #0
 8003eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fc8 <_malloc_r+0xfc>
 8003ef6:	f000 f9f9 	bl	80042ec <__malloc_lock>
 8003efa:	f8d8 3000 	ldr.w	r3, [r8]
 8003efe:	461c      	mov	r4, r3
 8003f00:	bb44      	cbnz	r4, 8003f54 <_malloc_r+0x88>
 8003f02:	4629      	mov	r1, r5
 8003f04:	4630      	mov	r0, r6
 8003f06:	f7ff ffbf 	bl	8003e88 <sbrk_aligned>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	d158      	bne.n	8003fc2 <_malloc_r+0xf6>
 8003f10:	f8d8 4000 	ldr.w	r4, [r8]
 8003f14:	4627      	mov	r7, r4
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	d143      	bne.n	8003fa2 <_malloc_r+0xd6>
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d04b      	beq.n	8003fb6 <_malloc_r+0xea>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	4639      	mov	r1, r7
 8003f22:	4630      	mov	r0, r6
 8003f24:	eb04 0903 	add.w	r9, r4, r3
 8003f28:	f000 fa34 	bl	8004394 <_sbrk_r>
 8003f2c:	4581      	cmp	r9, r0
 8003f2e:	d142      	bne.n	8003fb6 <_malloc_r+0xea>
 8003f30:	6821      	ldr	r1, [r4, #0]
 8003f32:	4630      	mov	r0, r6
 8003f34:	1a6d      	subs	r5, r5, r1
 8003f36:	4629      	mov	r1, r5
 8003f38:	f7ff ffa6 	bl	8003e88 <sbrk_aligned>
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d03a      	beq.n	8003fb6 <_malloc_r+0xea>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	442b      	add	r3, r5
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	f8d8 3000 	ldr.w	r3, [r8]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	bb62      	cbnz	r2, 8003fa8 <_malloc_r+0xdc>
 8003f4e:	f8c8 7000 	str.w	r7, [r8]
 8003f52:	e00f      	b.n	8003f74 <_malloc_r+0xa8>
 8003f54:	6822      	ldr	r2, [r4, #0]
 8003f56:	1b52      	subs	r2, r2, r5
 8003f58:	d420      	bmi.n	8003f9c <_malloc_r+0xd0>
 8003f5a:	2a0b      	cmp	r2, #11
 8003f5c:	d917      	bls.n	8003f8e <_malloc_r+0xc2>
 8003f5e:	1961      	adds	r1, r4, r5
 8003f60:	42a3      	cmp	r3, r4
 8003f62:	6025      	str	r5, [r4, #0]
 8003f64:	bf18      	it	ne
 8003f66:	6059      	strne	r1, [r3, #4]
 8003f68:	6863      	ldr	r3, [r4, #4]
 8003f6a:	bf08      	it	eq
 8003f6c:	f8c8 1000 	streq.w	r1, [r8]
 8003f70:	5162      	str	r2, [r4, r5]
 8003f72:	604b      	str	r3, [r1, #4]
 8003f74:	4630      	mov	r0, r6
 8003f76:	f000 f9bf 	bl	80042f8 <__malloc_unlock>
 8003f7a:	f104 000b 	add.w	r0, r4, #11
 8003f7e:	1d23      	adds	r3, r4, #4
 8003f80:	f020 0007 	bic.w	r0, r0, #7
 8003f84:	1ac2      	subs	r2, r0, r3
 8003f86:	bf1c      	itt	ne
 8003f88:	1a1b      	subne	r3, r3, r0
 8003f8a:	50a3      	strne	r3, [r4, r2]
 8003f8c:	e7af      	b.n	8003eee <_malloc_r+0x22>
 8003f8e:	6862      	ldr	r2, [r4, #4]
 8003f90:	42a3      	cmp	r3, r4
 8003f92:	bf0c      	ite	eq
 8003f94:	f8c8 2000 	streq.w	r2, [r8]
 8003f98:	605a      	strne	r2, [r3, #4]
 8003f9a:	e7eb      	b.n	8003f74 <_malloc_r+0xa8>
 8003f9c:	4623      	mov	r3, r4
 8003f9e:	6864      	ldr	r4, [r4, #4]
 8003fa0:	e7ae      	b.n	8003f00 <_malloc_r+0x34>
 8003fa2:	463c      	mov	r4, r7
 8003fa4:	687f      	ldr	r7, [r7, #4]
 8003fa6:	e7b6      	b.n	8003f16 <_malloc_r+0x4a>
 8003fa8:	461a      	mov	r2, r3
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	d1fb      	bne.n	8003fa8 <_malloc_r+0xdc>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	6053      	str	r3, [r2, #4]
 8003fb4:	e7de      	b.n	8003f74 <_malloc_r+0xa8>
 8003fb6:	230c      	movs	r3, #12
 8003fb8:	4630      	mov	r0, r6
 8003fba:	6033      	str	r3, [r6, #0]
 8003fbc:	f000 f99c 	bl	80042f8 <__malloc_unlock>
 8003fc0:	e794      	b.n	8003eec <_malloc_r+0x20>
 8003fc2:	6005      	str	r5, [r0, #0]
 8003fc4:	e7d6      	b.n	8003f74 <_malloc_r+0xa8>
 8003fc6:	bf00      	nop
 8003fc8:	200002a4 	.word	0x200002a4

08003fcc <_printf_common>:
 8003fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	4698      	mov	r8, r3
 8003fd4:	688a      	ldr	r2, [r1, #8]
 8003fd6:	690b      	ldr	r3, [r1, #16]
 8003fd8:	4607      	mov	r7, r0
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	bfb8      	it	lt
 8003fde:	4613      	movlt	r3, r2
 8003fe0:	6033      	str	r3, [r6, #0]
 8003fe2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fec:	b10a      	cbz	r2, 8003ff2 <_printf_common+0x26>
 8003fee:	3301      	adds	r3, #1
 8003ff0:	6033      	str	r3, [r6, #0]
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	0699      	lsls	r1, r3, #26
 8003ff6:	bf42      	ittt	mi
 8003ff8:	6833      	ldrmi	r3, [r6, #0]
 8003ffa:	3302      	addmi	r3, #2
 8003ffc:	6033      	strmi	r3, [r6, #0]
 8003ffe:	6825      	ldr	r5, [r4, #0]
 8004000:	f015 0506 	ands.w	r5, r5, #6
 8004004:	d106      	bne.n	8004014 <_printf_common+0x48>
 8004006:	f104 0a19 	add.w	sl, r4, #25
 800400a:	68e3      	ldr	r3, [r4, #12]
 800400c:	6832      	ldr	r2, [r6, #0]
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	42ab      	cmp	r3, r5
 8004012:	dc2b      	bgt.n	800406c <_printf_common+0xa0>
 8004014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	3b00      	subs	r3, #0
 800401c:	bf18      	it	ne
 800401e:	2301      	movne	r3, #1
 8004020:	0692      	lsls	r2, r2, #26
 8004022:	d430      	bmi.n	8004086 <_printf_common+0xba>
 8004024:	4641      	mov	r1, r8
 8004026:	4638      	mov	r0, r7
 8004028:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800402c:	47c8      	blx	r9
 800402e:	3001      	adds	r0, #1
 8004030:	d023      	beq.n	800407a <_printf_common+0xae>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	6922      	ldr	r2, [r4, #16]
 8004036:	f003 0306 	and.w	r3, r3, #6
 800403a:	2b04      	cmp	r3, #4
 800403c:	bf14      	ite	ne
 800403e:	2500      	movne	r5, #0
 8004040:	6833      	ldreq	r3, [r6, #0]
 8004042:	f04f 0600 	mov.w	r6, #0
 8004046:	bf08      	it	eq
 8004048:	68e5      	ldreq	r5, [r4, #12]
 800404a:	f104 041a 	add.w	r4, r4, #26
 800404e:	bf08      	it	eq
 8004050:	1aed      	subeq	r5, r5, r3
 8004052:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004056:	bf08      	it	eq
 8004058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800405c:	4293      	cmp	r3, r2
 800405e:	bfc4      	itt	gt
 8004060:	1a9b      	subgt	r3, r3, r2
 8004062:	18ed      	addgt	r5, r5, r3
 8004064:	42b5      	cmp	r5, r6
 8004066:	d11a      	bne.n	800409e <_printf_common+0xd2>
 8004068:	2000      	movs	r0, #0
 800406a:	e008      	b.n	800407e <_printf_common+0xb2>
 800406c:	2301      	movs	r3, #1
 800406e:	4652      	mov	r2, sl
 8004070:	4641      	mov	r1, r8
 8004072:	4638      	mov	r0, r7
 8004074:	47c8      	blx	r9
 8004076:	3001      	adds	r0, #1
 8004078:	d103      	bne.n	8004082 <_printf_common+0xb6>
 800407a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800407e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004082:	3501      	adds	r5, #1
 8004084:	e7c1      	b.n	800400a <_printf_common+0x3e>
 8004086:	2030      	movs	r0, #48	@ 0x30
 8004088:	18e1      	adds	r1, r4, r3
 800408a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004094:	4422      	add	r2, r4
 8004096:	3302      	adds	r3, #2
 8004098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800409c:	e7c2      	b.n	8004024 <_printf_common+0x58>
 800409e:	2301      	movs	r3, #1
 80040a0:	4622      	mov	r2, r4
 80040a2:	4641      	mov	r1, r8
 80040a4:	4638      	mov	r0, r7
 80040a6:	47c8      	blx	r9
 80040a8:	3001      	adds	r0, #1
 80040aa:	d0e6      	beq.n	800407a <_printf_common+0xae>
 80040ac:	3601      	adds	r6, #1
 80040ae:	e7d9      	b.n	8004064 <_printf_common+0x98>

080040b0 <_printf_i>:
 80040b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	7e0f      	ldrb	r7, [r1, #24]
 80040b6:	4691      	mov	r9, r2
 80040b8:	2f78      	cmp	r7, #120	@ 0x78
 80040ba:	4680      	mov	r8, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	469a      	mov	sl, r3
 80040c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040c6:	d807      	bhi.n	80040d8 <_printf_i+0x28>
 80040c8:	2f62      	cmp	r7, #98	@ 0x62
 80040ca:	d80a      	bhi.n	80040e2 <_printf_i+0x32>
 80040cc:	2f00      	cmp	r7, #0
 80040ce:	f000 80d1 	beq.w	8004274 <_printf_i+0x1c4>
 80040d2:	2f58      	cmp	r7, #88	@ 0x58
 80040d4:	f000 80b8 	beq.w	8004248 <_printf_i+0x198>
 80040d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040e0:	e03a      	b.n	8004158 <_printf_i+0xa8>
 80040e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040e6:	2b15      	cmp	r3, #21
 80040e8:	d8f6      	bhi.n	80040d8 <_printf_i+0x28>
 80040ea:	a101      	add	r1, pc, #4	@ (adr r1, 80040f0 <_printf_i+0x40>)
 80040ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040f0:	08004149 	.word	0x08004149
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	080040d9 	.word	0x080040d9
 80040fc:	080040d9 	.word	0x080040d9
 8004100:	080040d9 	.word	0x080040d9
 8004104:	080040d9 	.word	0x080040d9
 8004108:	0800415d 	.word	0x0800415d
 800410c:	080040d9 	.word	0x080040d9
 8004110:	080040d9 	.word	0x080040d9
 8004114:	080040d9 	.word	0x080040d9
 8004118:	080040d9 	.word	0x080040d9
 800411c:	0800425b 	.word	0x0800425b
 8004120:	08004187 	.word	0x08004187
 8004124:	08004215 	.word	0x08004215
 8004128:	080040d9 	.word	0x080040d9
 800412c:	080040d9 	.word	0x080040d9
 8004130:	0800427d 	.word	0x0800427d
 8004134:	080040d9 	.word	0x080040d9
 8004138:	08004187 	.word	0x08004187
 800413c:	080040d9 	.word	0x080040d9
 8004140:	080040d9 	.word	0x080040d9
 8004144:	0800421d 	.word	0x0800421d
 8004148:	6833      	ldr	r3, [r6, #0]
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6032      	str	r2, [r6, #0]
 8004150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004158:	2301      	movs	r3, #1
 800415a:	e09c      	b.n	8004296 <_printf_i+0x1e6>
 800415c:	6833      	ldr	r3, [r6, #0]
 800415e:	6820      	ldr	r0, [r4, #0]
 8004160:	1d19      	adds	r1, r3, #4
 8004162:	6031      	str	r1, [r6, #0]
 8004164:	0606      	lsls	r6, r0, #24
 8004166:	d501      	bpl.n	800416c <_printf_i+0xbc>
 8004168:	681d      	ldr	r5, [r3, #0]
 800416a:	e003      	b.n	8004174 <_printf_i+0xc4>
 800416c:	0645      	lsls	r5, r0, #25
 800416e:	d5fb      	bpl.n	8004168 <_printf_i+0xb8>
 8004170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004174:	2d00      	cmp	r5, #0
 8004176:	da03      	bge.n	8004180 <_printf_i+0xd0>
 8004178:	232d      	movs	r3, #45	@ 0x2d
 800417a:	426d      	negs	r5, r5
 800417c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004180:	230a      	movs	r3, #10
 8004182:	4858      	ldr	r0, [pc, #352]	@ (80042e4 <_printf_i+0x234>)
 8004184:	e011      	b.n	80041aa <_printf_i+0xfa>
 8004186:	6821      	ldr	r1, [r4, #0]
 8004188:	6833      	ldr	r3, [r6, #0]
 800418a:	0608      	lsls	r0, r1, #24
 800418c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004190:	d402      	bmi.n	8004198 <_printf_i+0xe8>
 8004192:	0649      	lsls	r1, r1, #25
 8004194:	bf48      	it	mi
 8004196:	b2ad      	uxthmi	r5, r5
 8004198:	2f6f      	cmp	r7, #111	@ 0x6f
 800419a:	6033      	str	r3, [r6, #0]
 800419c:	bf14      	ite	ne
 800419e:	230a      	movne	r3, #10
 80041a0:	2308      	moveq	r3, #8
 80041a2:	4850      	ldr	r0, [pc, #320]	@ (80042e4 <_printf_i+0x234>)
 80041a4:	2100      	movs	r1, #0
 80041a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041aa:	6866      	ldr	r6, [r4, #4]
 80041ac:	2e00      	cmp	r6, #0
 80041ae:	60a6      	str	r6, [r4, #8]
 80041b0:	db05      	blt.n	80041be <_printf_i+0x10e>
 80041b2:	6821      	ldr	r1, [r4, #0]
 80041b4:	432e      	orrs	r6, r5
 80041b6:	f021 0104 	bic.w	r1, r1, #4
 80041ba:	6021      	str	r1, [r4, #0]
 80041bc:	d04b      	beq.n	8004256 <_printf_i+0x1a6>
 80041be:	4616      	mov	r6, r2
 80041c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80041c4:	fb03 5711 	mls	r7, r3, r1, r5
 80041c8:	5dc7      	ldrb	r7, [r0, r7]
 80041ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041ce:	462f      	mov	r7, r5
 80041d0:	42bb      	cmp	r3, r7
 80041d2:	460d      	mov	r5, r1
 80041d4:	d9f4      	bls.n	80041c0 <_printf_i+0x110>
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d10b      	bne.n	80041f2 <_printf_i+0x142>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	07df      	lsls	r7, r3, #31
 80041de:	d508      	bpl.n	80041f2 <_printf_i+0x142>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	6861      	ldr	r1, [r4, #4]
 80041e4:	4299      	cmp	r1, r3
 80041e6:	bfde      	ittt	le
 80041e8:	2330      	movle	r3, #48	@ 0x30
 80041ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80041f2:	1b92      	subs	r2, r2, r6
 80041f4:	6122      	str	r2, [r4, #16]
 80041f6:	464b      	mov	r3, r9
 80041f8:	4621      	mov	r1, r4
 80041fa:	4640      	mov	r0, r8
 80041fc:	f8cd a000 	str.w	sl, [sp]
 8004200:	aa03      	add	r2, sp, #12
 8004202:	f7ff fee3 	bl	8003fcc <_printf_common>
 8004206:	3001      	adds	r0, #1
 8004208:	d14a      	bne.n	80042a0 <_printf_i+0x1f0>
 800420a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800420e:	b004      	add	sp, #16
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	f043 0320 	orr.w	r3, r3, #32
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	2778      	movs	r7, #120	@ 0x78
 800421e:	4832      	ldr	r0, [pc, #200]	@ (80042e8 <_printf_i+0x238>)
 8004220:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	6831      	ldr	r1, [r6, #0]
 8004228:	061f      	lsls	r7, r3, #24
 800422a:	f851 5b04 	ldr.w	r5, [r1], #4
 800422e:	d402      	bmi.n	8004236 <_printf_i+0x186>
 8004230:	065f      	lsls	r7, r3, #25
 8004232:	bf48      	it	mi
 8004234:	b2ad      	uxthmi	r5, r5
 8004236:	6031      	str	r1, [r6, #0]
 8004238:	07d9      	lsls	r1, r3, #31
 800423a:	bf44      	itt	mi
 800423c:	f043 0320 	orrmi.w	r3, r3, #32
 8004240:	6023      	strmi	r3, [r4, #0]
 8004242:	b11d      	cbz	r5, 800424c <_printf_i+0x19c>
 8004244:	2310      	movs	r3, #16
 8004246:	e7ad      	b.n	80041a4 <_printf_i+0xf4>
 8004248:	4826      	ldr	r0, [pc, #152]	@ (80042e4 <_printf_i+0x234>)
 800424a:	e7e9      	b.n	8004220 <_printf_i+0x170>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f023 0320 	bic.w	r3, r3, #32
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	e7f6      	b.n	8004244 <_printf_i+0x194>
 8004256:	4616      	mov	r6, r2
 8004258:	e7bd      	b.n	80041d6 <_printf_i+0x126>
 800425a:	6833      	ldr	r3, [r6, #0]
 800425c:	6825      	ldr	r5, [r4, #0]
 800425e:	1d18      	adds	r0, r3, #4
 8004260:	6961      	ldr	r1, [r4, #20]
 8004262:	6030      	str	r0, [r6, #0]
 8004264:	062e      	lsls	r6, r5, #24
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	d501      	bpl.n	800426e <_printf_i+0x1be>
 800426a:	6019      	str	r1, [r3, #0]
 800426c:	e002      	b.n	8004274 <_printf_i+0x1c4>
 800426e:	0668      	lsls	r0, r5, #25
 8004270:	d5fb      	bpl.n	800426a <_printf_i+0x1ba>
 8004272:	8019      	strh	r1, [r3, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	4616      	mov	r6, r2
 8004278:	6123      	str	r3, [r4, #16]
 800427a:	e7bc      	b.n	80041f6 <_printf_i+0x146>
 800427c:	6833      	ldr	r3, [r6, #0]
 800427e:	2100      	movs	r1, #0
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	6032      	str	r2, [r6, #0]
 8004284:	681e      	ldr	r6, [r3, #0]
 8004286:	6862      	ldr	r2, [r4, #4]
 8004288:	4630      	mov	r0, r6
 800428a:	f000 f893 	bl	80043b4 <memchr>
 800428e:	b108      	cbz	r0, 8004294 <_printf_i+0x1e4>
 8004290:	1b80      	subs	r0, r0, r6
 8004292:	6060      	str	r0, [r4, #4]
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	6123      	str	r3, [r4, #16]
 8004298:	2300      	movs	r3, #0
 800429a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800429e:	e7aa      	b.n	80041f6 <_printf_i+0x146>
 80042a0:	4632      	mov	r2, r6
 80042a2:	4649      	mov	r1, r9
 80042a4:	4640      	mov	r0, r8
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	47d0      	blx	sl
 80042aa:	3001      	adds	r0, #1
 80042ac:	d0ad      	beq.n	800420a <_printf_i+0x15a>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	079b      	lsls	r3, r3, #30
 80042b2:	d413      	bmi.n	80042dc <_printf_i+0x22c>
 80042b4:	68e0      	ldr	r0, [r4, #12]
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	4298      	cmp	r0, r3
 80042ba:	bfb8      	it	lt
 80042bc:	4618      	movlt	r0, r3
 80042be:	e7a6      	b.n	800420e <_printf_i+0x15e>
 80042c0:	2301      	movs	r3, #1
 80042c2:	4632      	mov	r2, r6
 80042c4:	4649      	mov	r1, r9
 80042c6:	4640      	mov	r0, r8
 80042c8:	47d0      	blx	sl
 80042ca:	3001      	adds	r0, #1
 80042cc:	d09d      	beq.n	800420a <_printf_i+0x15a>
 80042ce:	3501      	adds	r5, #1
 80042d0:	68e3      	ldr	r3, [r4, #12]
 80042d2:	9903      	ldr	r1, [sp, #12]
 80042d4:	1a5b      	subs	r3, r3, r1
 80042d6:	42ab      	cmp	r3, r5
 80042d8:	dcf2      	bgt.n	80042c0 <_printf_i+0x210>
 80042da:	e7eb      	b.n	80042b4 <_printf_i+0x204>
 80042dc:	2500      	movs	r5, #0
 80042de:	f104 0619 	add.w	r6, r4, #25
 80042e2:	e7f5      	b.n	80042d0 <_printf_i+0x220>
 80042e4:	080044fb 	.word	0x080044fb
 80042e8:	0800450c 	.word	0x0800450c

080042ec <__malloc_lock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	@ (80042f4 <__malloc_lock+0x8>)
 80042ee:	f7ff bc71 	b.w	8003bd4 <__retarget_lock_acquire_recursive>
 80042f2:	bf00      	nop
 80042f4:	2000029c 	.word	0x2000029c

080042f8 <__malloc_unlock>:
 80042f8:	4801      	ldr	r0, [pc, #4]	@ (8004300 <__malloc_unlock+0x8>)
 80042fa:	f7ff bc6c 	b.w	8003bd6 <__retarget_lock_release_recursive>
 80042fe:	bf00      	nop
 8004300:	2000029c 	.word	0x2000029c

08004304 <_realloc_r>:
 8004304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004308:	4607      	mov	r7, r0
 800430a:	4614      	mov	r4, r2
 800430c:	460d      	mov	r5, r1
 800430e:	b921      	cbnz	r1, 800431a <_realloc_r+0x16>
 8004310:	4611      	mov	r1, r2
 8004312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004316:	f7ff bdd9 	b.w	8003ecc <_malloc_r>
 800431a:	b92a      	cbnz	r2, 8004328 <_realloc_r+0x24>
 800431c:	f000 f866 	bl	80043ec <_free_r>
 8004320:	4625      	mov	r5, r4
 8004322:	4628      	mov	r0, r5
 8004324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004328:	f000 f8a8 	bl	800447c <_malloc_usable_size_r>
 800432c:	4284      	cmp	r4, r0
 800432e:	4606      	mov	r6, r0
 8004330:	d802      	bhi.n	8004338 <_realloc_r+0x34>
 8004332:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004336:	d8f4      	bhi.n	8004322 <_realloc_r+0x1e>
 8004338:	4621      	mov	r1, r4
 800433a:	4638      	mov	r0, r7
 800433c:	f7ff fdc6 	bl	8003ecc <_malloc_r>
 8004340:	4680      	mov	r8, r0
 8004342:	b908      	cbnz	r0, 8004348 <_realloc_r+0x44>
 8004344:	4645      	mov	r5, r8
 8004346:	e7ec      	b.n	8004322 <_realloc_r+0x1e>
 8004348:	42b4      	cmp	r4, r6
 800434a:	4622      	mov	r2, r4
 800434c:	4629      	mov	r1, r5
 800434e:	bf28      	it	cs
 8004350:	4632      	movcs	r2, r6
 8004352:	f000 f83d 	bl	80043d0 <memcpy>
 8004356:	4629      	mov	r1, r5
 8004358:	4638      	mov	r0, r7
 800435a:	f000 f847 	bl	80043ec <_free_r>
 800435e:	e7f1      	b.n	8004344 <_realloc_r+0x40>

08004360 <memmove>:
 8004360:	4288      	cmp	r0, r1
 8004362:	b510      	push	{r4, lr}
 8004364:	eb01 0402 	add.w	r4, r1, r2
 8004368:	d902      	bls.n	8004370 <memmove+0x10>
 800436a:	4284      	cmp	r4, r0
 800436c:	4623      	mov	r3, r4
 800436e:	d807      	bhi.n	8004380 <memmove+0x20>
 8004370:	1e43      	subs	r3, r0, #1
 8004372:	42a1      	cmp	r1, r4
 8004374:	d008      	beq.n	8004388 <memmove+0x28>
 8004376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800437a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800437e:	e7f8      	b.n	8004372 <memmove+0x12>
 8004380:	4601      	mov	r1, r0
 8004382:	4402      	add	r2, r0
 8004384:	428a      	cmp	r2, r1
 8004386:	d100      	bne.n	800438a <memmove+0x2a>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800438e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004392:	e7f7      	b.n	8004384 <memmove+0x24>

08004394 <_sbrk_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	2300      	movs	r3, #0
 8004398:	4d05      	ldr	r5, [pc, #20]	@ (80043b0 <_sbrk_r+0x1c>)
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fc fca6 	bl	8000cf0 <_sbrk>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_sbrk_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_sbrk_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	200002a8 	.word	0x200002a8

080043b4 <memchr>:
 80043b4:	4603      	mov	r3, r0
 80043b6:	b510      	push	{r4, lr}
 80043b8:	b2c9      	uxtb	r1, r1
 80043ba:	4402      	add	r2, r0
 80043bc:	4293      	cmp	r3, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	d101      	bne.n	80043c6 <memchr+0x12>
 80043c2:	2000      	movs	r0, #0
 80043c4:	e003      	b.n	80043ce <memchr+0x1a>
 80043c6:	7804      	ldrb	r4, [r0, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	428c      	cmp	r4, r1
 80043cc:	d1f6      	bne.n	80043bc <memchr+0x8>
 80043ce:	bd10      	pop	{r4, pc}

080043d0 <memcpy>:
 80043d0:	440a      	add	r2, r1
 80043d2:	4291      	cmp	r1, r2
 80043d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80043d8:	d100      	bne.n	80043dc <memcpy+0xc>
 80043da:	4770      	bx	lr
 80043dc:	b510      	push	{r4, lr}
 80043de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043e2:	4291      	cmp	r1, r2
 80043e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043e8:	d1f9      	bne.n	80043de <memcpy+0xe>
 80043ea:	bd10      	pop	{r4, pc}

080043ec <_free_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4605      	mov	r5, r0
 80043f0:	2900      	cmp	r1, #0
 80043f2:	d040      	beq.n	8004476 <_free_r+0x8a>
 80043f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f8:	1f0c      	subs	r4, r1, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bfb8      	it	lt
 80043fe:	18e4      	addlt	r4, r4, r3
 8004400:	f7ff ff74 	bl	80042ec <__malloc_lock>
 8004404:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <_free_r+0x8c>)
 8004406:	6813      	ldr	r3, [r2, #0]
 8004408:	b933      	cbnz	r3, 8004418 <_free_r+0x2c>
 800440a:	6063      	str	r3, [r4, #4]
 800440c:	6014      	str	r4, [r2, #0]
 800440e:	4628      	mov	r0, r5
 8004410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004414:	f7ff bf70 	b.w	80042f8 <__malloc_unlock>
 8004418:	42a3      	cmp	r3, r4
 800441a:	d908      	bls.n	800442e <_free_r+0x42>
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	1821      	adds	r1, r4, r0
 8004420:	428b      	cmp	r3, r1
 8004422:	bf01      	itttt	eq
 8004424:	6819      	ldreq	r1, [r3, #0]
 8004426:	685b      	ldreq	r3, [r3, #4]
 8004428:	1809      	addeq	r1, r1, r0
 800442a:	6021      	streq	r1, [r4, #0]
 800442c:	e7ed      	b.n	800440a <_free_r+0x1e>
 800442e:	461a      	mov	r2, r3
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	b10b      	cbz	r3, 8004438 <_free_r+0x4c>
 8004434:	42a3      	cmp	r3, r4
 8004436:	d9fa      	bls.n	800442e <_free_r+0x42>
 8004438:	6811      	ldr	r1, [r2, #0]
 800443a:	1850      	adds	r0, r2, r1
 800443c:	42a0      	cmp	r0, r4
 800443e:	d10b      	bne.n	8004458 <_free_r+0x6c>
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	4401      	add	r1, r0
 8004444:	1850      	adds	r0, r2, r1
 8004446:	4283      	cmp	r3, r0
 8004448:	6011      	str	r1, [r2, #0]
 800444a:	d1e0      	bne.n	800440e <_free_r+0x22>
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4408      	add	r0, r1
 8004452:	6010      	str	r0, [r2, #0]
 8004454:	6053      	str	r3, [r2, #4]
 8004456:	e7da      	b.n	800440e <_free_r+0x22>
 8004458:	d902      	bls.n	8004460 <_free_r+0x74>
 800445a:	230c      	movs	r3, #12
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	e7d6      	b.n	800440e <_free_r+0x22>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	1821      	adds	r1, r4, r0
 8004464:	428b      	cmp	r3, r1
 8004466:	bf01      	itttt	eq
 8004468:	6819      	ldreq	r1, [r3, #0]
 800446a:	685b      	ldreq	r3, [r3, #4]
 800446c:	1809      	addeq	r1, r1, r0
 800446e:	6021      	streq	r1, [r4, #0]
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	6054      	str	r4, [r2, #4]
 8004474:	e7cb      	b.n	800440e <_free_r+0x22>
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	200002a4 	.word	0x200002a4

0800447c <_malloc_usable_size_r>:
 800447c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004480:	1f18      	subs	r0, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfbc      	itt	lt
 8004486:	580b      	ldrlt	r3, [r1, r0]
 8004488:	18c0      	addlt	r0, r0, r3
 800448a:	4770      	bx	lr

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
